{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li> npc_lims<ul> <li> exceptions</li> <li> jobs</li> <li> metadata<ul> <li> codeocean</li> <li> spreadsheets</li> <li> types</li> </ul> </li> <li> paths<ul> <li> codeocean</li> <li> s3</li> </ul> </li> <li> scripts<ul> <li> regenerate_all_nwbs</li> <li> update_session_status</li> </ul> </li> <li> status<ul> <li> behavior_sessions</li> <li> tracked_sessions</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/npc_lims/","title":"Index","text":""},{"location":"reference/npc_lims/#npc_lims","title":"npc_lims","text":""},{"location":"reference/npc_lims/exceptions/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> exceptions","text":""},{"location":"reference/npc_lims/exceptions/#npc_lims.exceptions","title":"exceptions","text":""},{"location":"reference/npc_lims/exceptions/#npc_lims.exceptions.DataAssetAPI","title":"DataAssetAPI  <code>module-attribute</code>","text":"<pre><code>DataAssetAPI: TypeAlias = dict[Literal['created', 'custom_metadata', 'description', 'files', 'id', 'last_used', 'name', 'size', 'sourceBucket', 'state', 'tags', 'type'], Any]\n</code></pre> <p>Result from CodeOcean API when querying data assets.</p>"},{"location":"reference/npc_lims/exceptions/#npc_lims.exceptions.MissingCredentials","title":"MissingCredentials","text":"<p>             Bases: <code>KeyError</code></p> <p>Raised when a required credential is not found in environment variables.</p>"},{"location":"reference/npc_lims/exceptions/#npc_lims.exceptions.NoSessionInfo","title":"NoSessionInfo","text":"<p>             Bases: <code>ValueError</code></p> <p>Raised when a session is not found in the tracked-sessions database.</p>"},{"location":"reference/npc_lims/exceptions/#npc_lims.exceptions.SessionInfo","title":"SessionInfo  <code>dataclass</code>","text":"<p>Minimal session metadata obtained quickly from a database.</p> <p>Currently using: https://raw.githubusercontent.com/AllenInstitute/npc_lims/main/tracked_sessions.yaml and training spreadsheets.</p>"},{"location":"reference/npc_lims/exceptions/#npc_lims.exceptions.SessionInfo.date","title":"date  <code>property</code>","text":"<pre><code>date: npc_session.DateRecord\n</code></pre> <p>YY-MM-DD</p>"},{"location":"reference/npc_lims/exceptions/#npc_lims.exceptions.SessionInfo.experiment_day","title":"experiment_day  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>experiment_day: int | None = None\n</code></pre> <p>Experiment day (ephys recording, or opto experiment), starting from 1 for each subject. <code>None</code> for training behavior-only sessions.</p>"},{"location":"reference/npc_lims/exceptions/#npc_lims.exceptions.SessionInfo.idx","title":"idx  <code>property</code>","text":"<pre><code>idx: int\n</code></pre> <p>Session index, starting from 0 for each subject on each day. Currently one session per day, so index isn't specified - implicitly equal to 0.</p>"},{"location":"reference/npc_lims/exceptions/#npc_lims.exceptions.SessionInfo.is_annotated","title":"is_annotated  <code>cached</code> <code>property</code>","text":"<pre><code>is_annotated: bool\n</code></pre> <p>The subject associated with the sessions has CCF annotation data for probes available on S3.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; next(session.is_annotated for session in get_session_info() if session.is_annotated)\nTrue\n</code></pre>"},{"location":"reference/npc_lims/exceptions/#npc_lims.exceptions.SessionInfo.is_sorted","title":"is_sorted  <code>cached</code> <code>property</code>","text":"<pre><code>is_sorted: bool\n</code></pre> <p>The AIND sorting pipeline has yielded a Result asset for this session.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; next(session.is_sorted for session in get_session_info() if session.is_sorted)\nTrue\n</code></pre>"},{"location":"reference/npc_lims/exceptions/#npc_lims.exceptions.SessionInfo.is_surface_channels","title":"is_surface_channels  <code>cached</code> <code>property</code>","text":"<pre><code>is_surface_channels: bool\n</code></pre> <p>The session has ephys data collected separately to record surface channel.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; get_session_info(\"DRpilot_660023_20230808\").is_surface_channels\nTrue\n</code></pre>"},{"location":"reference/npc_lims/exceptions/#npc_lims.exceptions.SessionInfo.is_sync","title":"is_sync  <code>instance-attribute</code>","text":"<pre><code>is_sync: bool\n</code></pre> <p>The session has sync data, implying more than a behavior-box.</p>"},{"location":"reference/npc_lims/exceptions/#npc_lims.exceptions.SessionInfo.is_templeton","title":"is_templeton  <code>cached</code> <code>property</code>","text":"<pre><code>is_templeton: bool\n</code></pre> <p>Uses project in <code>tracked_sessions.yaml</code> if available, then infers from whether the session is in Sam's DR training database.</p>"},{"location":"reference/npc_lims/exceptions/#npc_lims.exceptions.SessionInfo.is_uploaded","title":"is_uploaded  <code>cached</code> <code>property</code>","text":"<pre><code>is_uploaded: bool\n</code></pre> <p>All of the session's raw data has been uploaded to S3 and can be found in CodeOcean. Not the same as <code>cloud_path</code> being non-None: this property indicates a proper session upload via aind tools, with metadata etc.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; next(session.is_uploaded for session in get_session_info() if session.is_uploaded)\nTrue\n</code></pre>"},{"location":"reference/npc_lims/exceptions/#npc_lims.exceptions.SessionInfo.rig","title":"rig  <code>property</code>","text":"<pre><code>rig: str\n</code></pre> <p>From DR training spreadsheet (<code>NP2</code>, <code>B2</code>, 'BEH.E`).</p> <ul> <li>does not necessarily match <code>AIBS_RIG_ID</code> on computer</li> <li><code>unknown</code> if not available (for Templeton sessions)</li> </ul>"},{"location":"reference/npc_lims/exceptions/#npc_lims.exceptions.SessionInfo.task_version","title":"task_version  <code>property</code>","text":"<pre><code>task_version: str\n</code></pre> <p>From DR training spreadsheet (<code>stage 5 ori AMN moving timeouts repeats</code>). - <code>unknown</code> if not available (for Templeton sessions)</p>"},{"location":"reference/npc_lims/exceptions/#npc_lims.exceptions.SessionInfo.training_info","title":"training_info  <code>cached</code> <code>property</code>","text":"<pre><code>training_info: dict[str, Any]\n</code></pre> <p>Session metadata from Sam's DR training database. - empty dict for Templeton sessions</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; next(get_session_info()).session_info                       # doctest: +SKIP\n{'ID': 1, 'start_time': '2023-03-07 12:56:27', 'rig_name': 'B2', 'task_version': 'stage 0 moving', 'hits': '0', 'dprime_same_modality': '', 'dprime_other_modality_go_stim': '', 'pass': '1', 'ignore': '0'}\n&gt;&gt;&gt; assert next(session.training_info for session in get_session_info() if session.training_info)\n</code></pre>"},{"location":"reference/npc_lims/exceptions/#npc_lims.exceptions.excel_to_sqlite","title":"excel_to_sqlite","text":"<pre><code>excel_to_sqlite(spreadsheet: str | upath.UPath, save_path: str | upath.UPath) -&gt; upath.UPath\n</code></pre> <p>This code uses the openpyxl package for playing around with excel using Python code to convert complete excel workbook (all sheets) to an SQLite database The code assumes that the first row of every sheet is the column name Every sheet is stored in a separate table The sheet name is assigned as the table name for every sheet.</p> <p>From https://stackoverflow.com/questions/17439885/export-data-from-excel-to-sqlite-database</p> Source code in <code>npc_lims/metadata/spreadsheets.py</code> <pre><code>def excel_to_sqlite(\n    spreadsheet: str | upath.UPath,\n    save_path: str | upath.UPath,\n) -&gt; upath.UPath:\n    \"\"\"\n    This code uses the openpyxl package for playing around with excel using Python code\n    to convert complete excel workbook (all sheets) to an SQLite database\n    The code assumes that the first row of every sheet is the column name\n    Every sheet is stored in a separate table\n    The sheet name is assigned as the table name for every sheet.\n\n    From\n    https://stackoverflow.com/questions/17439885/export-data-from-excel-to-sqlite-database\n    \"\"\"\n    spreadsheet = upath.UPath(spreadsheet)\n    save_path = upath.UPath(save_path)\n\n    db_path = tempfile.mkstemp(suffix=\".sqlite\")[1]\n    xls_path = tempfile.mkstemp(suffix=spreadsheet.suffix)[1]\n    upath.UPath(xls_path).write_bytes(spreadsheet.read_bytes())\n\n    # Replace with a database name\n    con = sqlite3.connect(db_path)\n\n    # replace with the complete path to your excel workbook\n    wb = openpyxl.load_workbook(filename=xls_path)\n\n    def slugify(text: str, lower=1) -&gt; str:\n        if lower == 1:\n            text = text.strip().lower()\n        text = text.replace(\"d'\", \"dprime\")\n        text = re.sub(r\"[^\\w _-]+\", \"\", text)\n        text = re.sub(r\"[- ]+\", \"_\", text)\n        return text\n\n    for sheet in wb.sheetnames:\n        ws = wb[sheet]\n        columns = []\n        duplicate_column_idx = []\n        query = (\n            \"CREATE TABLE \"\n            + repr(str(slugify(sheet)))\n            + \"(ID INTEGER PRIMARY KEY AUTOINCREMENT\"\n        )\n        for row in ws.rows:\n            for idx, col in enumerate(row):\n                column_name = slugify(col.value)\n                if column_name not in columns:\n                    query += \", \" + column_name + \" TEXT\"\n                    columns.append(column_name)\n                else:\n                    duplicate_column_idx.append(idx)\n            break  # only want column names from first row\n        query += \");\"\n        if not columns:\n            continue\n\n        con.execute(query)\n\n        tup = []\n        for i, col in enumerate(ws):\n            tuprow = []\n            if i == 0:\n                continue\n            for idx, col in enumerate(col):\n                if idx in duplicate_column_idx:\n                    continue\n                tuprow.append(str(col.value).strip()) if str(\n                    col.value\n                ).strip() != \"None\" else tuprow.append(\"\")\n            tup.append(tuple(tuprow))\n\n        insQuery1 = \"INSERT INTO \" + repr(str(slugify(sheet))) + \"(\"\n        insQuery2 = \"\"\n        for col in columns:\n            insQuery1 += col + \", \"\n            insQuery2 += \"?, \"\n        insQuery1 = insQuery1[:-2] + \") VALUES(\"\n        insQuery2 = insQuery2[:-2] + \")\"\n        insQuery = insQuery1 + insQuery2\n\n        con.executemany(insQuery, tup)\n        con.commit()\n\n    con.close()\n    save_path.write_bytes(upath.UPath(db_path).read_bytes())\n    return save_path\n</code></pre>"},{"location":"reference/npc_lims/exceptions/#npc_lims.exceptions.get_data_asset","title":"get_data_asset","text":"<pre><code>get_data_asset(asset: str | uuid.UUID | DataAssetAPI) -&gt; DataAssetAPI\n</code></pre> <p>Converts an asset uuid to dict of info from CodeOcean API.</p> Source code in <code>npc_lims/metadata/codeocean.py</code> <pre><code>def get_data_asset(asset: str | uuid.UUID | DataAssetAPI) -&gt; DataAssetAPI:\n    \"\"\"Converts an asset uuid to dict of info from CodeOcean API.\"\"\"\n    if not isinstance(asset, Mapping):\n        response = get_codeocean_client().get_data_asset(str(asset))\n        response.raise_for_status()\n        asset = response.json()\n    assert isinstance(asset, Mapping), f\"Unexpected {type(asset) = }, {asset = }\"\n    return asset\n</code></pre>"},{"location":"reference/npc_lims/exceptions/#npc_lims.exceptions.get_data_asset_s3_path","title":"get_data_asset_s3_path","text":"<pre><code>get_data_asset_s3_path(asset_id: str | codeocean.DataAssetAPI) -&gt; upath.UPath\n</code></pre> <p>Path on s3 that contains actual data for CodeOcean data asset.</p> <ul> <li>asset <code>id</code> is a UUID</li> <li>accept anything with an \"id\" attribute or key, or a string Assumes that the data asset has data on s3, which may not be true, and we can't tell from asset info.</li> </ul> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>def get_data_asset_s3_path(asset_id: str | codeocean.DataAssetAPI) -&gt; upath.UPath:\n    \"\"\"Path on s3 that contains actual data for CodeOcean data asset.\n\n    - asset `id` is a UUID\n    - accept anything with an \"id\" attribute or key, or a string\n    Assumes that the data asset has data on s3, which may not be true, and we can't tell from asset info.\n    \"\"\"\n    bucket = CODE_OCEAN_DATA_BUCKET\n    with contextlib.suppress(AttributeError, KeyError):\n        bucket = upath.UPath(upath.UPath(f's3://{asset_id[\"sourceBucket\"]}'))  # type: ignore[index]\n    with contextlib.suppress(AttributeError, KeyError):\n        return bucket / asset_id.get(\"id\")  # type: ignore[union-attr, operator]\n    with contextlib.suppress(AttributeError):\n        return bucket / asset_id.id  # type: ignore[union-attr]\n    return bucket / str(asset_id)\n</code></pre>"},{"location":"reference/npc_lims/exceptions/#npc_lims.exceptions.get_h5_sync_from_s3","title":"get_h5_sync_from_s3  <code>cached</code>","text":"<pre><code>get_h5_sync_from_s3(session: str | npc_session.SessionRecord) -&gt; upath.UPath\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; get_h5_sync_from_s3('662892_20230821')\nS3Path('s3://aind-ephys-data/ecephys_662892_2023-08-21_12-43-45/behavior/20230821T124345.h5')\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_h5_sync_from_s3(session: str | npc_session.SessionRecord) -&gt; upath.UPath:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; get_h5_sync_from_s3('662892_20230821')\n        S3Path('s3://aind-ephys-data/ecephys_662892_2023-08-21_12-43-45/behavior/20230821T124345.h5')\n    \"\"\"\n    raw_data_paths_s3 = get_raw_data_paths_from_s3(session)\n    sync_path = tuple(path for path in raw_data_paths_s3 if \".h5\" in path.suffix)\n\n    if not sync_path:\n        raise FileNotFoundError(f\"No sync file found in {raw_data_paths_s3!r}\")\n\n    return sync_path[0]\n</code></pre>"},{"location":"reference/npc_lims/exceptions/#npc_lims.exceptions.get_hdf5_stim_files_from_s3","title":"get_hdf5_stim_files_from_s3  <code>cached</code>","text":"<pre><code>get_hdf5_stim_files_from_s3(session: str | npc_session.SessionRecord) -&gt; tuple[StimFile, ...]\n</code></pre> <p>All the stim files for a session, from the synced <code>DynamicRoutingTask/Data</code> folder on s3.</p> <ul> <li>filters out files that are obviously wrong</li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; files = get_hdf5_stim_files_from_s3('668759_20230711')\n&gt;&gt;&gt; assert len(files) &gt; 0\n&gt;&gt;&gt; files[0].name, files[0].time\n('DynamicRouting1', '13:25:00')\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_hdf5_stim_files_from_s3(\n    session: str | npc_session.SessionRecord,\n) -&gt; tuple[StimFile, ...]:\n    \"\"\"All the stim files for a session, from the synced\n    `DynamicRoutingTask/Data` folder on s3.\n\n    - filters out files that are obviously wrong\n\n    Examples:\n        &gt;&gt;&gt; files = get_hdf5_stim_files_from_s3('668759_20230711')\n        &gt;&gt;&gt; assert len(files) &gt; 0\n        &gt;&gt;&gt; files[0].name, files[0].time\n        ('DynamicRouting1', '13:25:00')\n    \"\"\"\n    session = npc_session.SessionRecord(session)\n    root = DR_DATA_REPO / str(session.subject)\n    if not root.exists():\n        if not DR_DATA_REPO.exists():\n            raise FileNotFoundError(f\"{DR_DATA_REPO = } does not exist\")\n        raise FileNotFoundError(\n            f\"Subject {session.subject} hdf5s not on s3: may have been run by NSB, in which case they are on lims2\"\n        )\n    file_glob = f\"*_{session.subject}_{session.date.replace('-', '')}_??????.hdf5\"\n    files = [StimFile(path, session) for path in root.glob(file_glob)]\n\n    test_glob = file_glob.replace(str(session.subject), \"test\")\n    files += [\n        StimFile(path, session)\n        for path in root.glob(test_glob)\n        if str(session.subject) in path.as_posix()\n    ]\n\n    # no empty files:\n    files = [f for f in files if f.size &gt; 0]\n\n    # single behavior task:\n    behavior_tasks = tuple(f for f in files if \"DynamicRouting\" in f.name)\n    if len(behavior_tasks) &gt; 1:\n        largest = max(behavior_tasks, key=lambda f: f.size)\n        for f in behavior_tasks:\n            if f.path != largest.path:\n                files.remove(f)\n\n    return tuple(files)\n</code></pre>"},{"location":"reference/npc_lims/exceptions/#npc_lims.exceptions.get_mean_waveform_codeocean_kilosort_path_from_s3","title":"get_mean_waveform_codeocean_kilosort_path_from_s3  <code>cached</code>","text":"<pre><code>get_mean_waveform_codeocean_kilosort_path_from_s3(session: str | npc_session.SessionRecord) -&gt; upath.UPath\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; path = get_spike_times_codeocean_kilosort_path_from_s3('668759_20230711')\n&gt;&gt;&gt; assert path\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_mean_waveform_codeocean_kilosort_path_from_s3(\n    session: str | npc_session.SessionRecord,\n) -&gt; upath.UPath:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; path = get_spike_times_codeocean_kilosort_path_from_s3('668759_20230711')\n        &gt;&gt;&gt; assert path\n    \"\"\"\n    files = get_units_spikes_codeocean_kilosort_top_level_files(session)\n    mean_waveforms_path = next(path for path in files if \"mean\" in str(path))\n\n    return mean_waveforms_path\n</code></pre>"},{"location":"reference/npc_lims/exceptions/#npc_lims.exceptions.get_nwb_file_from_s3","title":"get_nwb_file_from_s3  <code>cached</code>","text":"<pre><code>get_nwb_file_from_s3(session: str | npc_session.SessionRecord) -&gt; upath.UPath\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; get_nwb_file_from_s3('636766_20230125')\nS3Path('s3://aind-scratch-data/ben.hardcastle/nwb/nwb/DRpilot_636766_20230125.nwb')\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_nwb_file_from_s3(\n    session: str | npc_session.SessionRecord,\n) -&gt; upath.UPath:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; get_nwb_file_from_s3('636766_20230125')\n        S3Path('s3://aind-scratch-data/ben.hardcastle/nwb/nwb/DRpilot_636766_20230125.nwb')\n    \"\"\"\n    session = npc_session.SessionRecord(session)\n    root = NWB_REPO\n    glob = \"*.nwb*\"\n    result = next(\n        (\n            path\n            for path in root.glob(glob)\n            if session == npc_session.SessionRecord(path.name)\n        ),\n        None,\n    )\n    if not result:\n        raise FileNotFoundError(f\"No NWB file found at {root}/{glob}\")\n    return result\n</code></pre>"},{"location":"reference/npc_lims/exceptions/#npc_lims.exceptions.get_path_from_data_asset","title":"get_path_from_data_asset","text":"<pre><code>get_path_from_data_asset(asset: DataAssetAPI) -&gt; upath.UPath\n</code></pre> <p>Reconstruct path to raw data in bucket (e.g. on s3) using data asset uuid or dict of info from Code Ocean API.</p> Source code in <code>npc_lims/metadata/codeocean.py</code> <pre><code>def get_path_from_data_asset(asset: DataAssetAPI) -&gt; upath.UPath:\n    \"\"\"Reconstruct path to raw data in bucket (e.g. on s3) using data asset\n    uuid or dict of info from Code Ocean API.\"\"\"\n    if \"sourceBucket\" not in asset:\n        raise ValueError(\n            f\"Asset {asset['id']} has no `sourceBucket` info - not sure how to create UPath:\\n{asset!r}\"\n        )\n    bucket_info = asset[\"sourceBucket\"]\n    roots = {\"aws\": \"s3\", \"gcs\": \"gs\"}\n    if bucket_info[\"origin\"] not in roots:\n        raise RuntimeError(\n            f\"Unknown bucket origin - not sure how to create UPath: {bucket_info = }\"\n        )\n    return upath.UPath(\n        f\"{roots[bucket_info['origin']]}://{bucket_info['bucket']}/{bucket_info['prefix']}\"\n    )\n</code></pre>"},{"location":"reference/npc_lims/exceptions/#npc_lims.exceptions.get_quality_metrics_paths_from_s3","title":"get_quality_metrics_paths_from_s3  <code>cached</code>","text":"<pre><code>get_quality_metrics_paths_from_s3(session: str | npc_session.SessionRecord) -&gt; tuple[upath.UPath, ...]\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; quality_metrics_paths = get_quality_metrics_paths_from_s3('662892_2023-08-21')\n&gt;&gt;&gt; assert len(quality_metrics_paths) &gt; 0\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_quality_metrics_paths_from_s3(\n    session: str | npc_session.SessionRecord,\n) -&gt; tuple[upath.UPath, ...]:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; quality_metrics_paths = get_quality_metrics_paths_from_s3('662892_2023-08-21')\n        &gt;&gt;&gt; assert len(quality_metrics_paths) &gt; 0\n    \"\"\"\n    sorted_paths = get_sorted_data_paths_from_s3(session)\n    postprocessed_files = next(\n        path for path in sorted_paths if \"postprocessed\" in str(path)\n    ).iterdir()\n    quality_metrics_paths = tuple(\n        next(path.glob(\"quality_metrics/metrics.csv\")) for path in postprocessed_files\n    )\n\n    return quality_metrics_paths\n</code></pre>"},{"location":"reference/npc_lims/exceptions/#npc_lims.exceptions.get_raw_data_paths_from_s3","title":"get_raw_data_paths_from_s3  <code>cached</code>","text":"<pre><code>get_raw_data_paths_from_s3(session: str | npc_session.SessionRecord) -&gt; tuple[upath.UPath, ...]\n</code></pre> <p>All top-level files and folders from the <code>ephys</code> &amp; <code>behavior</code> subdirectories in a session's raw data folder on s3.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; files = get_raw_data_paths_from_s3 ('668759_20230711')\n&gt;&gt;&gt; assert len(files) &gt; 0\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_raw_data_paths_from_s3(\n    session: str | npc_session.SessionRecord,\n) -&gt; tuple[upath.UPath, ...]:\n    \"\"\"All top-level files and folders from the `ephys` &amp; `behavior`\n    subdirectories in a session's raw data folder on s3.\n\n    Examples:\n        &gt;&gt;&gt; files = get_raw_data_paths_from_s3 ('668759_20230711')\n        &gt;&gt;&gt; assert len(files) &gt; 0\n    \"\"\"\n    raw_data_root = codeocean.get_raw_data_root(session)\n    directories: Iterator[upath.UPath] = (\n        directory for directory in raw_data_root.iterdir() if directory.is_dir()\n    )\n    first_level_files_directories: Iterator = (\n        tuple(directory.iterdir()) for directory in directories\n    )\n\n    paths = functools.reduce(operator.add, first_level_files_directories)\n\n    if not paths:\n        raise FileNotFoundError(\n            f\"Raw data paths empty for {session} on s3. Looks like an upload was started, but no files have been transferred.\"\n        )\n    return paths\n</code></pre>"},{"location":"reference/npc_lims/exceptions/#npc_lims.exceptions.get_raw_data_root","title":"get_raw_data_root  <code>cached</code>","text":"<pre><code>get_raw_data_root(session: str | npc_session.SessionRecord) -&gt; upath.UPath\n</code></pre> <p>Reconstruct path to raw data in bucket (e.g. on s3) using data-asset info from Code Ocean.</p> <pre><code>&gt;&gt;&gt; get_raw_data_root('668759_20230711')\nS3Path('s3://aind-ephys-data/ecephys_668759_2023-07-11_13-07-32')\n</code></pre> Source code in <code>npc_lims/metadata/codeocean.py</code> <pre><code>@functools.cache\ndef get_raw_data_root(session: str | npc_session.SessionRecord) -&gt; upath.UPath:\n    \"\"\"Reconstruct path to raw data in bucket (e.g. on s3) using data-asset\n    info from Code Ocean.\n\n        &gt;&gt;&gt; get_raw_data_root('668759_20230711')\n        S3Path('s3://aind-ephys-data/ecephys_668759_2023-07-11_13-07-32')\n    \"\"\"\n    session = npc_session.SessionRecord(session)\n    raw_assets = tuple(\n        asset for asset in get_session_data_assets(session) if is_raw_data_asset(asset)\n    )\n    raw_asset = get_single_data_asset(session, raw_assets, \"raw\")\n\n    return get_path_from_data_asset(raw_asset)\n</code></pre>"},{"location":"reference/npc_lims/exceptions/#npc_lims.exceptions.get_recording_dirs_experiment_path_from_s3","title":"get_recording_dirs_experiment_path_from_s3  <code>cached</code>","text":"<pre><code>get_recording_dirs_experiment_path_from_s3(session: str | npc_session.SessionRecord) -&gt; tuple[upath.UPath, ...]\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; recording_dirs = get_recording_dirs_experiment_path_from_s3('662892_20230821')\n&gt;&gt;&gt; assert len(recording_dirs) &gt; 0\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_recording_dirs_experiment_path_from_s3(\n    session: str | npc_session.SessionRecord,\n) -&gt; tuple[upath.UPath, ...]:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; recording_dirs = get_recording_dirs_experiment_path_from_s3('662892_20230821')\n        &gt;&gt;&gt; assert len(recording_dirs) &gt; 0\n    \"\"\"\n    raw_data_paths = get_raw_data_paths_from_s3(session)\n    recording_dirs = (\n        path\n        for path in raw_data_paths\n        if \"Record Node\" in str(path) and \"zarr\" not in str(path)\n    )\n    recording_dirs_experiment = tuple(\n        next(path.glob(\"*/recording*\")) for path in recording_dirs\n    )\n\n    return recording_dirs_experiment\n</code></pre>"},{"location":"reference/npc_lims/exceptions/#npc_lims.exceptions.get_session_id_from_db_row","title":"get_session_id_from_db_row","text":"<pre><code>get_session_id_from_db_row(subject: int | str, row: dict[str, Any]) -&gt; npc_session.SessionRecord\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; get_session_id_from_db_row(366122, {'start_time': '2023-01-30 12:56:27'})\n'366122_2023-01-30'\n</code></pre> Source code in <code>npc_lims/status/behavior_sessions.py</code> <pre><code>def get_session_id_from_db_row(\n    subject: int | str, row: dict[str, Any]\n) -&gt; npc_session.SessionRecord:\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; get_session_id_from_db_row(366122, {'start_time': '2023-01-30 12:56:27'})\n        '366122_2023-01-30'\n    \"\"\"\n    return npc_session.SessionRecord(\n        f\"{subject} {row[next(k for k in row.keys() if 'start' in k and any(t in k for t in ('date', 'time')))]}\"\n    )\n</code></pre>"},{"location":"reference/npc_lims/exceptions/#npc_lims.exceptions.get_session_info","title":"get_session_info","text":"<pre><code>get_session_info(session: str | npc_session.SessionRecord | SessionInfo | None = None, **bool_filter_kwargs: bool) -&gt; tuple[SessionInfo, ...] | SessionInfo\n</code></pre> <p>Quickly get a sequence of all tracked sessions.</p> <p>Examples:</p> <pre><code>Each object in the sequence has info about one session:\n&gt;&gt;&gt; sessions = get_session_info()\n&gt;&gt;&gt; sessions[0].__class__.__name__\n'SessionInfo'\n&gt;&gt;&gt; sessions[0].is_ephys                    # doctest: +SKIP\nTrue\n&gt;&gt;&gt; any(s for s in sessions if s.date.year &lt; 2021)\nFalse\n\nPass a session str or SessionRecord to get the info for that session:\n&gt;&gt;&gt; info = get_session_info(\"DRpilot_667252_20230927\")\n&gt;&gt;&gt; assert isinstance(info, SessionInfo)\n</code></pre> Source code in <code>npc_lims/status/tracked_sessions.py</code> <pre><code>def get_session_info(\n    session: str | npc_session.SessionRecord | SessionInfo | None = None,\n    **bool_filter_kwargs: bool,\n) -&gt; tuple[SessionInfo, ...] | SessionInfo:\n    \"\"\"Quickly get a sequence of all tracked sessions.\n\n    Examples:\n\n        Each object in the sequence has info about one session:\n        &gt;&gt;&gt; sessions = get_session_info()\n        &gt;&gt;&gt; sessions[0].__class__.__name__\n        'SessionInfo'\n        &gt;&gt;&gt; sessions[0].is_ephys                    # doctest: +SKIP\n        True\n        &gt;&gt;&gt; any(s for s in sessions if s.date.year &lt; 2021)\n        False\n\n        Pass a session str or SessionRecord to get the info for that session:\n        &gt;&gt;&gt; info = get_session_info(\"DRpilot_667252_20230927\")\n        &gt;&gt;&gt; assert isinstance(info, SessionInfo)\n    \"\"\"\n    if isinstance(session, SessionInfo):\n        session = session.id\n    tracked_sessions = set(\n        _get_session_info_from_file(),\n    )\n    tracked_sessions.update(_get_session_info_from_data_repo())\n    if session is None:\n        filtered_sessions = (\n            s\n            for s in tracked_sessions\n            if all(getattr(s, k) == v for k, v in bool_filter_kwargs.items())\n        )\n        return tuple(sorted(filtered_sessions, key=lambda s: s.id.date, reverse=True))\n    with contextlib.suppress(StopIteration):\n        return next(\n            s\n            for s in tracked_sessions\n            if s.id == (record := npc_session.SessionRecord(session))\n        )\n    raise exceptions.NoSessionInfo(f\"{record} not found in tracked sessions\")\n</code></pre>"},{"location":"reference/npc_lims/exceptions/#npc_lims.exceptions.get_session_issues","title":"get_session_issues","text":"<pre><code>get_session_issues(session: str | npc_session.SessionRecord | None = None) -&gt; list[str] | list | dict[npc_session.SessionRecord, list[str]]\n</code></pre> <p>Get a dictionary of all sessions with issues mapped to their issue url.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; issues = get_session_issues()\n&gt;&gt;&gt; issues                                                              # doctest: +SKIP\n{\n    '644867_2023-02-21': ['https://github.com/AllenInstitute/npc_sessions/issues/28'],\n    '660023_2023-08-08': ['https://github.com/AllenInstitute/npc_sessions/issues/26'],\n}\n\n&gt;&gt;&gt; single_session_issues = get_session_issues(\"DRPilot_644867_20230221\")\n&gt;&gt;&gt; assert isinstance(single_session_issues, typing.Sequence)\n&gt;&gt;&gt; single_session_issues                                               # doctest: +SKIP\n['https://github.com/AllenInstitute/npc_sessions/issues/28']\n</code></pre> Source code in <code>npc_lims/status/tracked_sessions.py</code> <pre><code>def get_session_issues(\n    session: str | npc_session.SessionRecord | None = None,\n) -&gt; list[str] | list | dict[npc_session.SessionRecord, list[str]]:\n    \"\"\"Get a dictionary of all sessions with issues mapped to their issue url.\n\n    Examples:\n\n        &gt;&gt;&gt; issues = get_session_issues()\n        &gt;&gt;&gt; issues                                                              # doctest: +SKIP\n        {\n            '644867_2023-02-21': ['https://github.com/AllenInstitute/npc_sessions/issues/28'],\n            '660023_2023-08-08': ['https://github.com/AllenInstitute/npc_sessions/issues/26'],\n        }\n\n        &gt;&gt;&gt; single_session_issues = get_session_issues(\"DRPilot_644867_20230221\")\n        &gt;&gt;&gt; assert isinstance(single_session_issues, typing.Sequence)\n        &gt;&gt;&gt; single_session_issues                                               # doctest: +SKIP\n        ['https://github.com/AllenInstitute/npc_sessions/issues/28']\n    \"\"\"\n    if session:\n        try:\n            return get_session_info(session).issues\n        except exceptions.NoSessionInfo:\n            return []\n    return {\n        session.id: session.issues for session in get_session_info() if session.issues\n    }\n</code></pre>"},{"location":"reference/npc_lims/exceptions/#npc_lims.exceptions.get_session_kwargs","title":"get_session_kwargs","text":"<pre><code>get_session_kwargs(session: str | npc_session.SessionRecord | None = None) -&gt; dict[str, str] | dict | dict[npc_session.SessionRecord, dict[str, str]]\n</code></pre> <p>Get a dictionary of all sessions mapped to their config kwargs. kwargs will be an empty dict if no kwargs have been specified.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; kwargs = get_session_kwargs()\n&gt;&gt;&gt; kwargs                                                          # doctest: +SKIP\n{   '670248_2023-08-02': {\n        'is_task': False,\n    },\n    '667252_2023-09-25': {\n        'invalid_times': [\n            {'start_time': 4996, 'stop_time': -1, 'reason': 'auditory stimulus not presented (amplifier power issue)'}\n        ]\n    },\n}\n&gt;&gt;&gt; single_session_kwargs = get_session_kwargs(\"DRpilot_670248_20230802\")\n&gt;&gt;&gt; assert isinstance(single_session_kwargs, dict)\n&gt;&gt;&gt; single_session_kwargs                                           # doctest: +SKIP\n{'is_task': False}\n</code></pre> Source code in <code>npc_lims/status/tracked_sessions.py</code> <pre><code>def get_session_kwargs(\n    session: str | npc_session.SessionRecord | None = None,\n) -&gt; dict[str, str] | dict | dict[npc_session.SessionRecord, dict[str, str]]:\n    \"\"\"Get a dictionary of all sessions mapped to their config kwargs. kwargs will\n    be an empty dict if no kwargs have been specified.\n\n    Examples:\n\n        &gt;&gt;&gt; kwargs = get_session_kwargs()\n        &gt;&gt;&gt; kwargs                                                          # doctest: +SKIP\n        {   '670248_2023-08-02': {\n                'is_task': False,\n            },\n            '667252_2023-09-25': {\n                'invalid_times': [\n                    {'start_time': 4996, 'stop_time': -1, 'reason': 'auditory stimulus not presented (amplifier power issue)'}\n                ]\n            },\n        }\n        &gt;&gt;&gt; single_session_kwargs = get_session_kwargs(\"DRpilot_670248_20230802\")\n        &gt;&gt;&gt; assert isinstance(single_session_kwargs, dict)\n        &gt;&gt;&gt; single_session_kwargs                                           # doctest: +SKIP\n        {'is_task': False}\n    \"\"\"\n    if session:\n        try:\n            return get_session_info(session).session_kwargs\n        except exceptions.NoSessionInfo:\n            return {}\n    return {session.id: session.session_kwargs for session in get_session_info()}\n</code></pre>"},{"location":"reference/npc_lims/exceptions/#npc_lims.exceptions.get_session_raw_data_asset","title":"get_session_raw_data_asset","text":"<pre><code>get_session_raw_data_asset(session: str | npc_session.SessionRecord) -&gt; DataAssetAPI\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; get_session_raw_data_asset('668759_20230711')[\"id\"]\n'83636983-f80d-42d6-a075-09b60c6abd5e'\n</code></pre> Source code in <code>npc_lims/metadata/codeocean.py</code> <pre><code>def get_session_raw_data_asset(\n    session: str | npc_session.SessionRecord,\n) -&gt; DataAssetAPI:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; get_session_raw_data_asset('668759_20230711')[\"id\"]\n        '83636983-f80d-42d6-a075-09b60c6abd5e'\n    \"\"\"\n    session = npc_session.SessionRecord(session)\n    raw_assets = tuple(\n        asset for asset in get_session_data_assets(session) if is_raw_data_asset(asset)\n    )\n\n    if not raw_assets:\n        raise ValueError(f\"Session {session} has no raw data assets\")\n\n    return get_single_data_asset(session, raw_assets, \"raw\")\n</code></pre>"},{"location":"reference/npc_lims/exceptions/#npc_lims.exceptions.get_session_result_data_assets","title":"get_session_result_data_assets","text":"<pre><code>get_session_result_data_assets(session: str | npc_session.SessionRecord) -&gt; tuple[DataAssetAPI, ...]\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; result_data_assets = get_session_result_data_assets('668759_20230711')\n&gt;&gt;&gt; assert len(result_data_assets) &gt; 0\n</code></pre> Source code in <code>npc_lims/metadata/codeocean.py</code> <pre><code>def get_session_result_data_assets(\n    session: str | npc_session.SessionRecord,\n) -&gt; tuple[DataAssetAPI, ...]:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; result_data_assets = get_session_result_data_assets('668759_20230711')\n        &gt;&gt;&gt; assert len(result_data_assets) &gt; 0\n    \"\"\"\n    session_data_assets = get_session_data_assets(session)\n    result_data_assets = tuple(\n        data_asset\n        for data_asset in session_data_assets\n        if data_asset[\"type\"] == \"result\"\n    )\n\n    return result_data_assets\n</code></pre>"},{"location":"reference/npc_lims/exceptions/#npc_lims.exceptions.get_session_sorted_data_asset","title":"get_session_sorted_data_asset","text":"<pre><code>get_session_sorted_data_asset(session: str | npc_session.SessionRecord) -&gt; DataAssetAPI\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sorted_data_asset = get_session_sorted_data_asset('668759_20230711')\n&gt;&gt;&gt; assert isinstance(sorted_data_asset, dict)\n</code></pre> Source code in <code>npc_lims/metadata/codeocean.py</code> <pre><code>def get_session_sorted_data_asset(\n    session: str | npc_session.SessionRecord,\n) -&gt; DataAssetAPI:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; sorted_data_asset = get_session_sorted_data_asset('668759_20230711')\n        &gt;&gt;&gt; assert isinstance(sorted_data_asset, dict)\n    \"\"\"\n    session_result_data_assets = get_session_data_assets(session)\n    sorted_data_assets = tuple(\n        data_asset\n        for data_asset in session_result_data_assets\n        if is_sorted_data_asset(data_asset) and data_asset[\"files\"] &gt; 2\n    )\n\n    if not sorted_data_assets:\n        raise ValueError(f\"Session {session} has no sorted data assets\")\n\n    return get_single_data_asset(session, sorted_data_assets, \"sorted\")\n</code></pre>"},{"location":"reference/npc_lims/exceptions/#npc_lims.exceptions.get_session_units_data_asset","title":"get_session_units_data_asset  <code>cached</code>","text":"<pre><code>get_session_units_data_asset(session_id: str | npc_session.SessionRecord) -&gt; DataAssetAPI\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; units_data_asset = get_session_units_data_asset('668759_20230711')\n&gt;&gt;&gt; assert units_data_asset is not None\n</code></pre> Source code in <code>npc_lims/metadata/codeocean.py</code> <pre><code>@functools.cache\ndef get_session_units_data_asset(\n    session_id: str | npc_session.SessionRecord,\n) -&gt; DataAssetAPI:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; units_data_asset = get_session_units_data_asset('668759_20230711')\n        &gt;&gt;&gt; assert units_data_asset is not None\n    \"\"\"\n    session = npc_session.SessionRecord(session_id)\n    session_data_assets = get_session_data_assets(session)\n    session_units_data_assets = tuple(\n        data_asset\n        for data_asset in session_data_assets\n        if \"units\" in data_asset[\"name\"] and \"peak\" not in data_asset[\"name\"]\n    )\n    session_units_data_asset = get_single_data_asset(\n        session, session_units_data_assets, \"units\"\n    )\n\n    return session_units_data_asset\n</code></pre>"},{"location":"reference/npc_lims/exceptions/#npc_lims.exceptions.get_session_units_spikes_with_peak_channels_data_asset","title":"get_session_units_spikes_with_peak_channels_data_asset  <code>cached</code>","text":"<pre><code>get_session_units_spikes_with_peak_channels_data_asset(session_id: str | npc_session.SessionRecord) -&gt; DataAssetAPI\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; units_peak_channel_data_asset = get_session_units_spikes_with_peak_channels_data_asset('668759_20230711')\n&gt;&gt;&gt; assert units_peak_channel_data_asset is not None\n</code></pre> Source code in <code>npc_lims/metadata/codeocean.py</code> <pre><code>@functools.cache\ndef get_session_units_spikes_with_peak_channels_data_asset(\n    session_id: str | npc_session.SessionRecord,\n) -&gt; DataAssetAPI:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; units_peak_channel_data_asset = get_session_units_spikes_with_peak_channels_data_asset('668759_20230711')\n        &gt;&gt;&gt; assert units_peak_channel_data_asset is not None\n    \"\"\"\n    session = npc_session.SessionRecord(session_id)\n    session_data_assets = get_session_data_assets(session)\n    session_units_spikes_peak_channel_data_assets = tuple(\n        data_asset\n        for data_asset in session_data_assets\n        if \"units_with_peak_channels\" in data_asset[\"name\"]\n    )\n\n    session_units_spikes_peak_channel_data_asset = get_single_data_asset(\n        session, session_units_spikes_peak_channel_data_assets, \"units\"\n    )\n\n    return session_units_spikes_peak_channel_data_asset\n</code></pre>"},{"location":"reference/npc_lims/exceptions/#npc_lims.exceptions.get_sessions_from_data_repo","title":"get_sessions_from_data_repo  <code>cached</code>","text":"<pre><code>get_sessions_from_data_repo(subject: int | str | None = None) -&gt; tuple[npc_session.SessionRecord, ...] | dict[npc_session.SubjectRecord, tuple[npc_session.SessionRecord, ...]]\n</code></pre> <p>Globs synced behavior data repo for sessions.</p> <p>Examples:</p> <p>get a dict of all subjects mapped to their sessions:</p> <pre><code>&gt;&gt;&gt; all_subjects_sessions = get_sessions_from_data_repo()\n&gt;&gt;&gt; len(all_subjects_sessions)\n93\n</code></pre> <pre><code>&gt;&gt;&gt; len(tuple(all_subjects_sessions.values())[0])\n45\n</code></pre> <p>get a specific subject's sessions as a sequence:</p> <pre><code>&gt;&gt;&gt; get_sessions_from_data_repo(366122)[0]\n'366122_2023-01-30'\n</code></pre> Source code in <code>npc_lims/status/behavior_sessions.py</code> <pre><code>@functools.cache\ndef get_sessions_from_data_repo(\n    subject: int | str | None = None,\n) -&gt; (\n    tuple[npc_session.SessionRecord, ...]\n    | dict[npc_session.SubjectRecord, tuple[npc_session.SessionRecord, ...]]\n):\n    \"\"\"\n    Globs synced behavior data repo for sessions.\n\n    Examples:\n        get a dict of all subjects mapped to their sessions:\n        &gt;&gt;&gt; all_subjects_sessions = get_sessions_from_data_repo()\n        &gt;&gt;&gt; len(all_subjects_sessions)                      # doctest: +SKIP\n        93\n\n        &gt;&gt;&gt; len(tuple(all_subjects_sessions.values())[0])   # doctest: +SKIP\n        45\n\n        get a specific subject's sessions as a sequence:\n        &gt;&gt;&gt; get_sessions_from_data_repo(366122)[0]\n        '366122_2023-01-30'\n\n    \"\"\"\n\n    def _get_sessions_from_subfolders(\n        folder: upath.UPath,\n    ) -&gt; tuple[npc_session.SessionRecord, ...]:\n        sessions = set()\n        for path in folder.iterdir():\n            try:\n                session = npc_session.SessionRecord(path.as_posix())\n            except ValueError:\n                continue\n            sessions.add(session)\n        return tuple(sorted(sessions))\n\n    if subject is not None:\n        return _get_sessions_from_subfolders(\n            get_subject_folders_from_data_repo(subject)\n        )\n\n    subject_to_sessions: dict[\n        npc_session.SubjectRecord, tuple[npc_session.SessionRecord, ...]\n    ] = {}\n    for _subject, folder in get_subject_folders_from_data_repo().items():\n        subject_to_sessions.setdefault(_subject, _get_sessions_from_subfolders(folder))\n    return subject_to_sessions\n</code></pre>"},{"location":"reference/npc_lims/exceptions/#npc_lims.exceptions.get_sessions_from_training_db","title":"get_sessions_from_training_db  <code>cached</code>","text":"<pre><code>get_sessions_from_training_db() -&gt; dict[int, tuple[dict[str, Any], ...]]\n</code></pre> <p>Includes NSB sessions.</p> <p>{subject: ({spreadsheet row}, ... )}</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sessions = get_sessions_from_training_db()\n&gt;&gt;&gt; assert len(sessions) &gt; 0\n&gt;&gt;&gt; sessions[659250][0]\n{'ID': 1, 'start_time': '2023-03-07 12:56:27', 'rig_name': 'B2', 'task_version': 'stage 0 moving', 'hits': '0', 'dprime_same_modality': '', 'dprime_other_modality_go_stim': '', 'pass': '1', 'ignore': '0'}\n</code></pre> Source code in <code>npc_lims/status/behavior_sessions.py</code> <pre><code>@functools.cache\ndef get_sessions_from_training_db() -&gt; dict[int, tuple[dict[str, Any], ...]]:\n    \"\"\"\n    Includes NSB sessions.\n\n    {subject: ({spreadsheet row}, ... )}\n\n    Examples:\n        &gt;&gt;&gt; sessions = get_sessions_from_training_db()\n        &gt;&gt;&gt; assert len(sessions) &gt; 0\n        &gt;&gt;&gt; sessions[659250][0]                         # doctest: +SKIP\n        {'ID': 1, 'start_time': '2023-03-07 12:56:27', 'rig_name': 'B2', 'task_version': 'stage 0 moving', 'hits': '0', 'dprime_same_modality': '', 'dprime_other_modality_go_stim': '', 'pass': '1', 'ignore': '0'}\n    \"\"\"\n    sessions: dict[int, tuple[dict[str, Any], ...]] = {}\n    for nsb in (False, True):\n        db = npc_lims.metadata.get_training_db(nsb)\n        ## using tables other than `all_mice`\n        subjects = tuple(\n            npc_session.SubjectRecord(table[\"name\"])\n            for table in db.execute(\n                \"SELECT name FROM sqlite_master WHERE type='table'\"\n            ).fetchall()\n            if table[\"name\"] not in (\"sqlite_sequence\", \"all_mice\")\n        )\n        for subject in subjects:\n            sessions[subject] = tuple(\n                row | {\"nsb\": nsb}\n                for row in db.execute(\n                    f\"SELECT * FROM '{subject}' WHERE ignore != 1\"\n                ).fetchall()\n            )\n    return sessions\n</code></pre>"},{"location":"reference/npc_lims/exceptions/#npc_lims.exceptions.get_sessions_with_data_assets","title":"get_sessions_with_data_assets  <code>cached</code>","text":"<pre><code>get_sessions_with_data_assets(subject: str | int) -&gt; tuple[npc_session.SessionRecord, ...]\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sessions = get_sessions_with_data_assets(668759)\n&gt;&gt;&gt; assert len(sessions) &gt; 0\n</code></pre> Source code in <code>npc_lims/metadata/codeocean.py</code> <pre><code>@functools.cache\ndef get_sessions_with_data_assets(\n    subject: str | int,\n) -&gt; tuple[npc_session.SessionRecord, ...]:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; sessions = get_sessions_with_data_assets(668759)\n        &gt;&gt;&gt; assert len(sessions) &gt; 0\n    \"\"\"\n    assets = get_subject_data_assets(subject)\n    sessions = set()\n    for asset in assets:\n        try:\n            session = npc_session.SessionRecord(asset[\"name\"])\n        except ValueError:\n            continue\n        sessions.add(session)\n    return tuple(sessions)\n</code></pre>"},{"location":"reference/npc_lims/exceptions/#npc_lims.exceptions.get_settings_xml_path_from_s3","title":"get_settings_xml_path_from_s3  <code>cached</code>","text":"<pre><code>get_settings_xml_path_from_s3(session: str | npc_session.SessionRecord) -&gt; upath.UPath\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; settings_xml_path = get_settings_xml_path_from_s3('670180-2023-07-26')\n&gt;&gt;&gt; assert settings_xml_path.exists()\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_settings_xml_path_from_s3(\n    session: str | npc_session.SessionRecord,\n) -&gt; upath.UPath:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; settings_xml_path = get_settings_xml_path_from_s3('670180-2023-07-26')\n        &gt;&gt;&gt; assert settings_xml_path.exists()\n    \"\"\"\n    raw_data_paths_s3 = get_raw_data_paths_from_s3(session)\n\n    directories = (\n        raw_path\n        for raw_path in raw_data_paths_s3\n        if raw_path.is_dir() and \".zarr\" not in raw_path.suffix\n    )\n    return tuple(raw_path / \"settings.xml\" for raw_path in directories)[0]\n</code></pre>"},{"location":"reference/npc_lims/exceptions/#npc_lims.exceptions.get_sorted_data_paths_from_s3","title":"get_sorted_data_paths_from_s3  <code>cached</code>","text":"<pre><code>get_sorted_data_paths_from_s3(session: str | npc_session.SessionRecord | None = None, sorted_data_asset_id: str | None = None) -&gt; tuple[upath.UPath, ...]\n</code></pre> <p>Gets the top level files/folders for the sorted data    </p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sorted_data_s3_paths = get_sorted_data_paths_from_s3('668759_20230711')\n&gt;&gt;&gt; assert len(sorted_data_s3_paths) &gt; 0\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_sorted_data_paths_from_s3(\n    session: str | npc_session.SessionRecord | None = None,\n    sorted_data_asset_id: str | None = None,\n) -&gt; tuple[upath.UPath, ...]:\n    \"\"\"\n    Gets the top level files/folders for the sorted data    \n\n    Examples:\n        &gt;&gt;&gt; sorted_data_s3_paths = get_sorted_data_paths_from_s3('668759_20230711')\n        &gt;&gt;&gt; assert len(sorted_data_s3_paths) &gt; 0\n    \"\"\"\n    if sorted_data_asset_id is not None:\n        sorted_data_asset = codeocean.get_data_asset(sorted_data_asset_id)\n    elif session is not None:\n        sorted_data_asset = codeocean.get_session_sorted_data_asset(session)\n    else:\n        raise ValueError(\"Must provide either session or sorted_data_asset_id\")\n    return tuple(get_data_asset_s3_path(sorted_data_asset).iterdir())\n</code></pre>"},{"location":"reference/npc_lims/exceptions/#npc_lims.exceptions.get_sorted_precurated_paths_from_s3","title":"get_sorted_precurated_paths_from_s3  <code>cached</code>","text":"<pre><code>get_sorted_precurated_paths_from_s3(session: str | npc_session.SessionRecord) -&gt; tuple[upath.UPath, ...]\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sorted_precurated_paths = get_sorted_precurated_paths_from_s3('662892_2023-08-21')\n&gt;&gt;&gt; assert len(sorted_precurated_paths) &gt; 0\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_sorted_precurated_paths_from_s3(\n    session: str | npc_session.SessionRecord,\n) -&gt; tuple[upath.UPath, ...]:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; sorted_precurated_paths = get_sorted_precurated_paths_from_s3('662892_2023-08-21')\n        &gt;&gt;&gt; assert len(sorted_precurated_paths) &gt; 0\n    \"\"\"\n    sorted_paths = get_sorted_data_paths_from_s3(session)\n    sorted_precurated_dirs = tuple(\n        next(\n            path for path in sorted_paths if \"sorting_precurated\" in str(path)\n        ).iterdir()\n    )\n\n    return sorted_precurated_dirs\n</code></pre>"},{"location":"reference/npc_lims/exceptions/#npc_lims.exceptions.get_spike_sorted_paths_from_s3","title":"get_spike_sorted_paths_from_s3  <code>cached</code>","text":"<pre><code>get_spike_sorted_paths_from_s3(session: str | npc_session.SessionRecord) -&gt; tuple[upath.UPath, ...]\n</code></pre> <p>spike_sorted_paths = get_spike_sorted_paths_from_s3('662892_20230821') assert spike_sorted_paths[0].exists()</p> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_spike_sorted_paths_from_s3(\n    session: str | npc_session.SessionRecord,\n) -&gt; tuple[upath.UPath, ...]:\n    \"\"\"\n        &gt;&gt;&gt; spike_sorted_paths = get_spike_sorted_paths_from_s3('662892_20230821')\n        &gt;&gt;&gt; assert spike_sorted_paths[0].exists()\n    \"\"\"\n    sorted_data_paths = get_sorted_data_paths_from_s3(session)\n    return tuple(\n        next(path for path in sorted_data_paths if \"spike\" in str(path)).iterdir()\n    )\n</code></pre>"},{"location":"reference/npc_lims/exceptions/#npc_lims.exceptions.get_spike_sorting_device_path_from_s3","title":"get_spike_sorting_device_path_from_s3  <code>cached</code>","text":"<pre><code>get_spike_sorting_device_path_from_s3(session: str | npc_session.SessionRecord, device_name: str) -&gt; upath.UPath\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; get_spike_sorting_device_path_from_s3('662892_20230821', 'ProbeA')\nS3Path('s3://codeocean-s3datasetsbucket-1u41qdg42ur9/d527db85-39b7-4c4f-a465-9ca499b0ca47/spikesorted/experiment1_Record Node 102#Neuropix-PXI-100.ProbeA-AP_recording1/sorting_cached.npz')\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_spike_sorting_device_path_from_s3(\n    session: str | npc_session.SessionRecord, device_name: str\n) -&gt; upath.UPath:\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; get_spike_sorting_device_path_from_s3('662892_20230821', 'ProbeA')\n        S3Path('s3://codeocean-s3datasetsbucket-1u41qdg42ur9/d527db85-39b7-4c4f-a465-9ca499b0ca47/spikesorted/experiment1_Record Node 102#Neuropix-PXI-100.ProbeA-AP_recording1/sorting_cached.npz')\n    \"\"\"\n    spike_sorted_paths = get_spike_sorted_paths_from_s3(session)\n    spike_probe_paths = next(\n        path for path in spike_sorted_paths if device_name in str(path)\n    ).iterdir()\n    sorting_cached_path = next(\n        path for path in spike_probe_paths if \"sorting_cached\" in str(path)\n    )\n\n    return sorting_cached_path\n</code></pre>"},{"location":"reference/npc_lims/exceptions/#npc_lims.exceptions.get_spike_times_codeocean_kilosort_path_from_s3","title":"get_spike_times_codeocean_kilosort_path_from_s3  <code>cached</code>","text":"<pre><code>get_spike_times_codeocean_kilosort_path_from_s3(session: str | npc_session.SessionRecord) -&gt; upath.UPath\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; path = get_spike_times_codeocean_kilosort_path_from_s3('668759_20230711')\n&gt;&gt;&gt; assert path\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_spike_times_codeocean_kilosort_path_from_s3(\n    session: str | npc_session.SessionRecord,\n) -&gt; upath.UPath:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; path = get_spike_times_codeocean_kilosort_path_from_s3('668759_20230711')\n        &gt;&gt;&gt; assert path\n    \"\"\"\n    files = get_units_spikes_codeocean_kilosort_top_level_files(session)\n    spike_times_path = next(path for path in files if \"spike\" in str(path))\n\n    return spike_times_path\n</code></pre>"},{"location":"reference/npc_lims/exceptions/#npc_lims.exceptions.get_spikesorted_cache_paths_from_s3","title":"get_spikesorted_cache_paths_from_s3  <code>cached</code>","text":"<pre><code>get_spikesorted_cache_paths_from_s3(session: str | npc_session.SessionRecord) -&gt; tuple[upath.UPath, ...]\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; spike_sorted_cache_paths = get_spikesorted_cache_paths_from_s3('662892_20230821')\n&gt;&gt;&gt; assert len(spike_sorted_cache_paths) &gt; 0\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_spikesorted_cache_paths_from_s3(\n    session: str | npc_session.SessionRecord,\n) -&gt; tuple[upath.UPath, ...]:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; spike_sorted_cache_paths = get_spikesorted_cache_paths_from_s3('662892_20230821')\n        &gt;&gt;&gt; assert len(spike_sorted_cache_paths) &gt; 0\n    \"\"\"\n    spike_sorted_paths = get_spike_sorted_paths_from_s3(session)\n    spike_sorted_cache_files = tuple(\n        next(path.glob(\"sorting_cached.npz\")) for path in spike_sorted_paths\n    )\n\n    return spike_sorted_cache_files\n</code></pre>"},{"location":"reference/npc_lims/exceptions/#npc_lims.exceptions.get_subject_data_assets","title":"get_subject_data_assets  <code>cached</code>","text":"<pre><code>get_subject_data_assets(subject: str | int) -&gt; tuple[DataAssetAPI, ...]\n</code></pre> <p>All assets associated with a subject ID.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; assets = get_subject_data_assets(668759)\n&gt;&gt;&gt; assert len(assets) &gt; 0\n</code></pre> Source code in <code>npc_lims/metadata/codeocean.py</code> <pre><code>@functools.cache\ndef get_subject_data_assets(subject: str | int) -&gt; tuple[DataAssetAPI, ...]:\n    \"\"\"\n    All assets associated with a subject ID.\n\n    Examples:\n        &gt;&gt;&gt; assets = get_subject_data_assets(668759)\n        &gt;&gt;&gt; assert len(assets) &gt; 0\n    \"\"\"\n    response = get_codeocean_client().search_all_data_assets(\n        query=f\"subject id: {npc_session.SubjectRecord(subject)}\"\n    )\n    response.raise_for_status()\n    return response.json()[\"results\"]\n</code></pre>"},{"location":"reference/npc_lims/exceptions/#npc_lims.exceptions.get_subject_folders_from_data_repo","title":"get_subject_folders_from_data_repo  <code>cached</code>","text":"<pre><code>get_subject_folders_from_data_repo(subject: int | str | None = None) -&gt; dict[npc_session.SubjectRecord, upath.UPath] | upath.UPath\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; all_subjects = get_subject_folders_from_data_repo()\n&gt;&gt;&gt; len(all_subjects)\n93\n</code></pre> <pre><code>&gt;&gt;&gt; get_subject_folders_from_data_repo(366122).name\n'366122'\n</code></pre> Source code in <code>npc_lims/status/behavior_sessions.py</code> <pre><code>@functools.cache\ndef get_subject_folders_from_data_repo(\n    subject: int | str | None = None,\n) -&gt; dict[npc_session.SubjectRecord, upath.UPath] | upath.UPath:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; all_subjects = get_subject_folders_from_data_repo()\n        &gt;&gt;&gt; len(all_subjects)                               # doctest: +SKIP\n        93\n\n        &gt;&gt;&gt; get_subject_folders_from_data_repo(366122).name\n        '366122'\n    \"\"\"\n    if subject is not None:\n        if not (\n            path := npc_lims.paths.DR_DATA_REPO\n            / str(npc_session.SubjectRecord(subject))\n        ).exists():\n            raise FileNotFoundError(f\"{path=} does not exist\")\n        return path\n    subject_to_folder: dict[npc_session.SubjectRecord, upath.UPath] = {}\n    for path in npc_lims.paths.DR_DATA_REPO.iterdir():\n        if path.is_file():\n            continue\n        if any(invalid_key in path.name for invalid_key in INVALID_SUBJECT_KEYS):\n            continue\n        try:\n            _subject = npc_session.SubjectRecord(path.name)\n        except ValueError:\n            continue\n        if _subject in subject_to_folder:\n            raise ValueError(f\"Duplicate path for {_subject=}: {path}\")\n        subject_to_folder[_subject] = path\n    return subject_to_folder\n</code></pre>"},{"location":"reference/npc_lims/exceptions/#npc_lims.exceptions.get_subjects_from_training_db","title":"get_subjects_from_training_db","text":"<pre><code>get_subjects_from_training_db(nsb: bool = False) -&gt; dict[npc_session.SubjectRecord, dict[str, Any]]\n</code></pre> <p>Dynamic Routing training spreadsheet info.</p> <p>{subject: ({spreadsheet row}, ... )}</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; subjects = get_subjects_from_training_db(nsb=True)\n&gt;&gt;&gt; assert len(subjects) &gt; 0\n&gt;&gt;&gt; subjects[659250]\n{'ID': 50, 'mouse_id': '659250', 'alive': 'False', 'genotype': 'PV Cre x Ai32', 'sex': 'male', 'birthdate': '2022-11-21 00:00:00', 'surgery_week': '2023-01-30 00:00:00', 'craniotomy': 'True', 'trainer': 'Sam', 'regimen': '7', 'wheel_fixed': 'False', 'timeouts': 'True', 'next_task_version': 'dead'}\n</code></pre> Source code in <code>npc_lims/status/behavior_sessions.py</code> <pre><code>def get_subjects_from_training_db(\n    nsb: bool = False,\n) -&gt; dict[npc_session.SubjectRecord, dict[str, Any]]:\n    \"\"\"\n    Dynamic Routing training spreadsheet info.\n\n    {subject: ({spreadsheet row}, ... )}\n\n    Examples:\n        &gt;&gt;&gt; subjects = get_subjects_from_training_db(nsb=True)\n        &gt;&gt;&gt; assert len(subjects) &gt; 0\n        &gt;&gt;&gt; subjects[659250]                       # doctest: +SKIP\n        {'ID': 50, 'mouse_id': '659250', 'alive': 'False', 'genotype': 'PV Cre x Ai32', 'sex': 'male', 'birthdate': '2022-11-21 00:00:00', 'surgery_week': '2023-01-30 00:00:00', 'craniotomy': 'True', 'trainer': 'Sam', 'regimen': '7', 'wheel_fixed': 'False', 'timeouts': 'True', 'next_task_version': 'dead'}\n    \"\"\"\n    db = npc_lims.metadata.get_training_db(nsb)\n\n    # use entries in `all_mice` table\n    subjects = tuple(\n        {\n            npc_session.SubjectRecord(result[\"mouse_id\"])\n            for result in db.execute(\"SELECT * FROM all_mice\").fetchall()\n        }\n    )\n\n    return {\n        subject: db.execute(\n            \"SELECT * FROM 'all_mice' WHERE mouse_id=?\", (subject,)\n        ).fetchone()\n        for subject in subjects\n    }\n</code></pre>"},{"location":"reference/npc_lims/exceptions/#npc_lims.exceptions.get_surface_channel_root","title":"get_surface_channel_root","text":"<pre><code>get_surface_channel_root(session: str | npc_session.SessionRecord) -&gt; upath.UPath\n</code></pre> <p>Reconstruct path to surface channel data in bucket (e.g. on s3) using data-asset info from Code Ocean.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; get_surface_channel_root('660023_20230808')\nS3Path('s3://aind-ephys-data/ecephys_660023_2023-08-08_15-11-14')\n&gt;&gt;&gt; assert get_surface_channel_root('660023_20230808') != get_raw_data_root('660023_20230808')\n&gt;&gt;&gt; get_surface_channel_root('649943_20230216')\nTraceback (most recent call last):\n...\nFileNotFoundError: 649943_20230216 has no surface channel data assets\n</code></pre> Source code in <code>npc_lims/metadata/codeocean.py</code> <pre><code>def get_surface_channel_root(session: str | npc_session.SessionRecord) -&gt; upath.UPath:\n    \"\"\"Reconstruct path to surface channel data in bucket (e.g. on s3) using data-asset\n    info from Code Ocean.\n\n    Examples:\n        &gt;&gt;&gt; get_surface_channel_root('660023_20230808')\n        S3Path('s3://aind-ephys-data/ecephys_660023_2023-08-08_15-11-14')\n        &gt;&gt;&gt; assert get_surface_channel_root('660023_20230808') != get_raw_data_root('660023_20230808')\n        &gt;&gt;&gt; get_surface_channel_root('649943_20230216')\n        Traceback (most recent call last):\n        ...\n        FileNotFoundError: 649943_20230216 has no surface channel data assets\n    \"\"\"\n    session = npc_session.SessionRecord(session)\n    raw_assets = tuple(\n        asset for asset in get_session_data_assets(session) if is_raw_data_asset(asset)\n    )\n    try:\n        raw_asset = get_single_data_asset(session.with_idx(1), raw_assets, \"raw\")\n    except SessionIndexError:\n        raise FileNotFoundError(\n            f\"{session} has no surface channel data assets\"\n        ) from None\n    return get_path_from_data_asset(raw_asset)\n</code></pre>"},{"location":"reference/npc_lims/exceptions/#npc_lims.exceptions.get_template_metrics_paths_from_s3","title":"get_template_metrics_paths_from_s3  <code>cached</code>","text":"<pre><code>get_template_metrics_paths_from_s3(session: str | npc_session.SessionRecord) -&gt; tuple[upath.UPath, ...]\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; template_metrics_paths = get_template_metrics_paths_from_s3('662892_2023-08-21')\n&gt;&gt;&gt; assert len(template_metrics_paths) &gt; 0\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_template_metrics_paths_from_s3(\n    session: str | npc_session.SessionRecord,\n) -&gt; tuple[upath.UPath, ...]:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; template_metrics_paths = get_template_metrics_paths_from_s3('662892_2023-08-21')\n        &gt;&gt;&gt; assert len(template_metrics_paths) &gt; 0\n    \"\"\"\n    sorted_paths = get_sorted_data_paths_from_s3(session)\n    postprocessed_files = next(\n        path for path in sorted_paths if \"postprocessed\" in str(path)\n    ).iterdir()\n    template_metrics_paths = tuple(\n        next(path.glob(\"template_metrics/metrics.csv\")) for path in postprocessed_files\n    )\n\n    return template_metrics_paths\n</code></pre>"},{"location":"reference/npc_lims/exceptions/#npc_lims.exceptions.get_tissuecyte_annotation_files_from_s3","title":"get_tissuecyte_annotation_files_from_s3  <code>cached</code>","text":"<pre><code>get_tissuecyte_annotation_files_from_s3(session: str | npc_session.SessionRecord) -&gt; tuple[upath.UPath, ...]\n</code></pre> <p>For each probe inserted, get a csv file containing CCF coordinates for each electrode (channel) on the probe.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; electrode_files = get_tissuecyte_annotation_files_from_s3('626791_2022-08-16')\n&gt;&gt;&gt; assert len(electrode_files) &gt; 0\n&gt;&gt;&gt; electrode_files[0].name\n'Probe_A2_channels_626791_warped_processed.csv'\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_tissuecyte_annotation_files_from_s3(\n    session: str | npc_session.SessionRecord,\n) -&gt; tuple[upath.UPath, ...]:\n    \"\"\"For each probe inserted, get a csv file containing CCF coordinates for each\n    electrode (channel) on the probe.\n\n    Examples:\n        &gt;&gt;&gt; electrode_files = get_tissuecyte_annotation_files_from_s3('626791_2022-08-16')\n        &gt;&gt;&gt; assert len(electrode_files) &gt; 0\n        &gt;&gt;&gt; electrode_files[0].name\n        'Probe_A2_channels_626791_warped_processed.csv'\n    \"\"\"\n    session = npc_session.SessionRecord(session)\n    day = tracked_sessions.get_session_info(session).experiment_day\n    subject_electrode_network_path = TISSUECYTE_REPO / str(session.subject.id)\n\n    if not subject_electrode_network_path.exists():\n        raise FileNotFoundError(\n            f\"CCF annotations for {session} have not been uploaded to s3\"\n        )\n\n    electrode_files = tuple(\n        subject_electrode_network_path.glob(\n            f\"Probe_*{day}_channels_{str(session.subject.id)}_warped_processed.csv\"\n        )\n    )\n    if not electrode_files:\n        raise FileNotFoundError(\n            f\"{subject_electrode_network_path} exists, but no CCF annotation files found matching {day} and {session.subject.id} - check session day\"\n        )\n\n    return electrode_files\n</code></pre>"},{"location":"reference/npc_lims/exceptions/#npc_lims.exceptions.get_training_db","title":"get_training_db  <code>cached</code>","text":"<pre><code>get_training_db(nsb: bool = False) -&gt; sqlite3.Connection\n</code></pre> <p>Download db to tempdir, open connection, return connection.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; assert get_training_db()\n</code></pre> Source code in <code>npc_lims/metadata/spreadsheets.py</code> <pre><code>@functools.cache\ndef get_training_db(nsb: bool = False) -&gt; sqlite3.Connection:\n    \"\"\"\n    Download db to tempdir, open connection, return connection.\n\n    Examples:\n        &gt;&gt;&gt; assert get_training_db()\n    \"\"\"\n    db_path = upath.UPath(tempfile.mkstemp(suffix=\".db\")[1])\n    s3_path = next(\n        path for path in get_training_sqlite_paths() if (\"NSB\" in path.name) == nsb\n    )\n    db_path.write_bytes(s3_path.read_bytes())\n    con = sqlite3.connect(db_path)\n\n    def dict_factory(cursor, row):\n        d = {}\n        for idx, col in enumerate(cursor.description):\n            d[col[0]] = row[idx]\n        return d\n\n    con.row_factory = dict_factory\n    return con\n</code></pre>"},{"location":"reference/npc_lims/exceptions/#npc_lims.exceptions.get_training_spreadsheet_paths","title":"get_training_spreadsheet_paths","text":"<pre><code>get_training_spreadsheet_paths() -&gt; tuple[upath.UPath, ...]\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; assert len(get_training_spreadsheet_paths()) &gt; 0\n</code></pre> Source code in <code>npc_lims/metadata/spreadsheets.py</code> <pre><code>def get_training_spreadsheet_paths() -&gt; tuple[upath.UPath, ...]:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; assert len(get_training_spreadsheet_paths()) &gt; 0\n    \"\"\"\n    return tuple(npc_lims.DR_DATA_REPO.parent.glob(\"DynamicRoutingTraining*.xlsx\"))\n</code></pre>"},{"location":"reference/npc_lims/exceptions/#npc_lims.exceptions.get_training_sqlite_paths","title":"get_training_sqlite_paths","text":"<pre><code>get_training_sqlite_paths() -&gt; tuple[upath.UPath, ...]\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; assert len(get_training_sqlite_paths()) == len(get_training_spreadsheet_paths())\n</code></pre> Source code in <code>npc_lims/metadata/spreadsheets.py</code> <pre><code>def get_training_sqlite_paths() -&gt; tuple[upath.UPath, ...]:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; assert len(get_training_sqlite_paths()) == len(get_training_spreadsheet_paths())\n    \"\"\"\n    return tuple(\n        path.with_suffix(\".sqlite\") for path in get_training_spreadsheet_paths()\n    )\n</code></pre>"},{"location":"reference/npc_lims/exceptions/#npc_lims.exceptions.get_unit_locations_paths_from_s3","title":"get_unit_locations_paths_from_s3  <code>cached</code>","text":"<pre><code>get_unit_locations_paths_from_s3(session: str | npc_session.SessionRecord) -&gt; tuple[upath.UPath, ...]\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; unit_locations_paths = get_unit_locations_paths_from_s3('662892_2023-08-21')\n&gt;&gt;&gt; assert len(unit_locations_paths) &gt; 0\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_unit_locations_paths_from_s3(\n    session: str | npc_session.SessionRecord,\n) -&gt; tuple[upath.UPath, ...]:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; unit_locations_paths = get_unit_locations_paths_from_s3('662892_2023-08-21')\n        &gt;&gt;&gt; assert len(unit_locations_paths) &gt; 0\n    \"\"\"\n    sorted_paths = get_sorted_data_paths_from_s3(session)\n    postprocessed_files = next(\n        path for path in sorted_paths if \"postprocessed\" in str(path)\n    ).iterdir()\n    unit_locations_paths = tuple(\n        next(path.glob(\"unit_locations/unit_locations.npy\"))\n        for path in postprocessed_files\n    )\n\n    return unit_locations_paths\n</code></pre>"},{"location":"reference/npc_lims/exceptions/#npc_lims.exceptions.get_units_codeoean_kilosort_path_from_s3","title":"get_units_codeoean_kilosort_path_from_s3  <code>cached</code>","text":"<pre><code>get_units_codeoean_kilosort_path_from_s3(session: str | npc_session.SessionRecord) -&gt; upath.UPath\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; path = get_units_codeoean_kilosort_path_from_s3('668759_20230711')\n&gt;&gt;&gt; assert path\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_units_codeoean_kilosort_path_from_s3(\n    session: str | npc_session.SessionRecord,\n) -&gt; upath.UPath:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; path = get_units_codeoean_kilosort_path_from_s3('668759_20230711')\n        &gt;&gt;&gt; assert path\n    \"\"\"\n    files = get_units_spikes_codeocean_kilosort_top_level_files(session)\n    units_path = next(path for path in files if \"csv\" in str(path))\n\n    return units_path\n</code></pre>"},{"location":"reference/npc_lims/exceptions/#npc_lims.exceptions.get_units_spikes_codeocean_kilosort_top_level_files","title":"get_units_spikes_codeocean_kilosort_top_level_files  <code>cached</code>","text":"<pre><code>get_units_spikes_codeocean_kilosort_top_level_files(session: str | npc_session.SessionRecord) -&gt; tuple[upath.UPath, ...]\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; paths = get_units_spikes_codeocean_kilosort_top_level_files('668759_20230711')\n&gt;&gt;&gt; assert paths\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_units_spikes_codeocean_kilosort_top_level_files(\n    session: str | npc_session.SessionRecord,\n) -&gt; tuple[upath.UPath, ...]:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; paths = get_units_spikes_codeocean_kilosort_top_level_files('668759_20230711')\n        &gt;&gt;&gt; assert paths\n    \"\"\"\n    units_spikes_data_asset = (\n        codeocean.get_session_units_spikes_with_peak_channels_data_asset(session)\n    )\n\n    units_directory = next(\n        unit_path\n        for unit_path in get_data_asset_s3_path(units_spikes_data_asset).iterdir()\n        if unit_path.is_dir()\n    )\n\n    return tuple(units_directory.iterdir())\n</code></pre>"},{"location":"reference/npc_lims/exceptions/#npc_lims.exceptions.is_raw_data_asset","title":"is_raw_data_asset","text":"<pre><code>is_raw_data_asset(asset: str | DataAssetAPI) -&gt; bool\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; is_raw_data_asset('83636983-f80d-42d6-a075-09b60c6abd5e')\nTrue\n&gt;&gt;&gt; is_raw_data_asset('173e2fdc-0ca3-4a4e-9886-b74207a91a9a')\nFalse\n</code></pre> Source code in <code>npc_lims/metadata/codeocean.py</code> <pre><code>def is_raw_data_asset(asset: str | DataAssetAPI) -&gt; bool:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; is_raw_data_asset('83636983-f80d-42d6-a075-09b60c6abd5e')\n        True\n        &gt;&gt;&gt; is_raw_data_asset('173e2fdc-0ca3-4a4e-9886-b74207a91a9a')\n        False\n    \"\"\"\n    asset = get_data_asset(asset)\n    if is_sorted_data_asset(asset):\n        return False\n    return asset.get(\"custom_metadata\", {}).get(\n        \"data level\"\n    ) == \"raw data\" or \"raw\" in asset.get(\"tags\", [])\n</code></pre>"},{"location":"reference/npc_lims/exceptions/#npc_lims.exceptions.is_sorted_data_asset","title":"is_sorted_data_asset","text":"<pre><code>is_sorted_data_asset(asset: str | DataAssetAPI) -&gt; bool\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; is_sorted_data_asset('173e2fdc-0ca3-4a4e-9886-b74207a91a9a')\nTrue\n&gt;&gt;&gt; is_sorted_data_asset('83636983-f80d-42d6-a075-09b60c6abd5e')\nFalse\n</code></pre> Source code in <code>npc_lims/metadata/codeocean.py</code> <pre><code>def is_sorted_data_asset(asset: str | DataAssetAPI) -&gt; bool:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; is_sorted_data_asset('173e2fdc-0ca3-4a4e-9886-b74207a91a9a')\n        True\n        &gt;&gt;&gt; is_sorted_data_asset('83636983-f80d-42d6-a075-09b60c6abd5e')\n        False\n    \"\"\"\n    asset = get_data_asset(asset)\n    if \"ecephys\" not in asset[\"name\"]:\n        return False\n    return \"sorted\" in asset[\"name\"]\n</code></pre>"},{"location":"reference/npc_lims/exceptions/#npc_lims.exceptions.update_training_dbs","title":"update_training_dbs","text":"<pre><code>update_training_dbs() -&gt; None\n</code></pre> <p>Read spreadsheets from the data repo and write them to corresponding databases, currently sqlite files in the same directory.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; update_training_dbs()\n</code></pre> Source code in <code>npc_lims/metadata/spreadsheets.py</code> <pre><code>def update_training_dbs() -&gt; None:\n    \"\"\"\n    Read spreadsheets from the data repo and write them to corresponding\n    databases, currently sqlite files in the same directory.\n\n    Examples:\n        &gt;&gt;&gt; update_training_dbs()\n    \"\"\"\n    for spreadsheet, sqlite in zip(\n        get_training_spreadsheet_paths(), get_training_sqlite_paths()\n    ):\n        excel_to_sqlite(spreadsheet, sqlite)\n</code></pre>"},{"location":"reference/npc_lims/jobs/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> jobs","text":""},{"location":"reference/npc_lims/jobs/#npc_lims.jobs","title":"jobs","text":""},{"location":"reference/npc_lims/metadata/","title":"Index","text":""},{"location":"reference/npc_lims/metadata/#npc_lims.metadata","title":"metadata","text":""},{"location":"reference/npc_lims/metadata/codeocean/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> codeocean","text":""},{"location":"reference/npc_lims/metadata/codeocean/#npc_lims.metadata.codeocean","title":"codeocean","text":""},{"location":"reference/npc_lims/metadata/codeocean/#npc_lims.metadata.codeocean.DataAssetAPI","title":"DataAssetAPI  <code>module-attribute</code>","text":"<pre><code>DataAssetAPI: TypeAlias = dict[Literal['created', 'custom_metadata', 'description', 'files', 'id', 'last_used', 'name', 'size', 'sourceBucket', 'state', 'tags', 'type'], Any]\n</code></pre> <p>Result from CodeOcean API when querying data assets.</p>"},{"location":"reference/npc_lims/metadata/codeocean/#npc_lims.metadata.codeocean.get_data_asset","title":"get_data_asset","text":"<pre><code>get_data_asset(asset: str | uuid.UUID | DataAssetAPI) -&gt; DataAssetAPI\n</code></pre> <p>Converts an asset uuid to dict of info from CodeOcean API.</p> Source code in <code>npc_lims/metadata/codeocean.py</code> <pre><code>def get_data_asset(asset: str | uuid.UUID | DataAssetAPI) -&gt; DataAssetAPI:\n    \"\"\"Converts an asset uuid to dict of info from CodeOcean API.\"\"\"\n    if not isinstance(asset, Mapping):\n        response = get_codeocean_client().get_data_asset(str(asset))\n        response.raise_for_status()\n        asset = response.json()\n    assert isinstance(asset, Mapping), f\"Unexpected {type(asset) = }, {asset = }\"\n    return asset\n</code></pre>"},{"location":"reference/npc_lims/metadata/codeocean/#npc_lims.metadata.codeocean.get_path_from_data_asset","title":"get_path_from_data_asset","text":"<pre><code>get_path_from_data_asset(asset: DataAssetAPI) -&gt; upath.UPath\n</code></pre> <p>Reconstruct path to raw data in bucket (e.g. on s3) using data asset uuid or dict of info from Code Ocean API.</p> Source code in <code>npc_lims/metadata/codeocean.py</code> <pre><code>def get_path_from_data_asset(asset: DataAssetAPI) -&gt; upath.UPath:\n    \"\"\"Reconstruct path to raw data in bucket (e.g. on s3) using data asset\n    uuid or dict of info from Code Ocean API.\"\"\"\n    if \"sourceBucket\" not in asset:\n        raise ValueError(\n            f\"Asset {asset['id']} has no `sourceBucket` info - not sure how to create UPath:\\n{asset!r}\"\n        )\n    bucket_info = asset[\"sourceBucket\"]\n    roots = {\"aws\": \"s3\", \"gcs\": \"gs\"}\n    if bucket_info[\"origin\"] not in roots:\n        raise RuntimeError(\n            f\"Unknown bucket origin - not sure how to create UPath: {bucket_info = }\"\n        )\n    return upath.UPath(\n        f\"{roots[bucket_info['origin']]}://{bucket_info['bucket']}/{bucket_info['prefix']}\"\n    )\n</code></pre>"},{"location":"reference/npc_lims/metadata/codeocean/#npc_lims.metadata.codeocean.get_raw_data_root","title":"get_raw_data_root  <code>cached</code>","text":"<pre><code>get_raw_data_root(session: str | npc_session.SessionRecord) -&gt; upath.UPath\n</code></pre> <p>Reconstruct path to raw data in bucket (e.g. on s3) using data-asset info from Code Ocean.</p> <pre><code>&gt;&gt;&gt; get_raw_data_root('668759_20230711')\nS3Path('s3://aind-ephys-data/ecephys_668759_2023-07-11_13-07-32')\n</code></pre> Source code in <code>npc_lims/metadata/codeocean.py</code> <pre><code>@functools.cache\ndef get_raw_data_root(session: str | npc_session.SessionRecord) -&gt; upath.UPath:\n    \"\"\"Reconstruct path to raw data in bucket (e.g. on s3) using data-asset\n    info from Code Ocean.\n\n        &gt;&gt;&gt; get_raw_data_root('668759_20230711')\n        S3Path('s3://aind-ephys-data/ecephys_668759_2023-07-11_13-07-32')\n    \"\"\"\n    session = npc_session.SessionRecord(session)\n    raw_assets = tuple(\n        asset for asset in get_session_data_assets(session) if is_raw_data_asset(asset)\n    )\n    raw_asset = get_single_data_asset(session, raw_assets, \"raw\")\n\n    return get_path_from_data_asset(raw_asset)\n</code></pre>"},{"location":"reference/npc_lims/metadata/codeocean/#npc_lims.metadata.codeocean.get_session_raw_data_asset","title":"get_session_raw_data_asset","text":"<pre><code>get_session_raw_data_asset(session: str | npc_session.SessionRecord) -&gt; DataAssetAPI\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; get_session_raw_data_asset('668759_20230711')[\"id\"]\n'83636983-f80d-42d6-a075-09b60c6abd5e'\n</code></pre> Source code in <code>npc_lims/metadata/codeocean.py</code> <pre><code>def get_session_raw_data_asset(\n    session: str | npc_session.SessionRecord,\n) -&gt; DataAssetAPI:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; get_session_raw_data_asset('668759_20230711')[\"id\"]\n        '83636983-f80d-42d6-a075-09b60c6abd5e'\n    \"\"\"\n    session = npc_session.SessionRecord(session)\n    raw_assets = tuple(\n        asset for asset in get_session_data_assets(session) if is_raw_data_asset(asset)\n    )\n\n    if not raw_assets:\n        raise ValueError(f\"Session {session} has no raw data assets\")\n\n    return get_single_data_asset(session, raw_assets, \"raw\")\n</code></pre>"},{"location":"reference/npc_lims/metadata/codeocean/#npc_lims.metadata.codeocean.get_session_result_data_assets","title":"get_session_result_data_assets","text":"<pre><code>get_session_result_data_assets(session: str | npc_session.SessionRecord) -&gt; tuple[DataAssetAPI, ...]\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; result_data_assets = get_session_result_data_assets('668759_20230711')\n&gt;&gt;&gt; assert len(result_data_assets) &gt; 0\n</code></pre> Source code in <code>npc_lims/metadata/codeocean.py</code> <pre><code>def get_session_result_data_assets(\n    session: str | npc_session.SessionRecord,\n) -&gt; tuple[DataAssetAPI, ...]:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; result_data_assets = get_session_result_data_assets('668759_20230711')\n        &gt;&gt;&gt; assert len(result_data_assets) &gt; 0\n    \"\"\"\n    session_data_assets = get_session_data_assets(session)\n    result_data_assets = tuple(\n        data_asset\n        for data_asset in session_data_assets\n        if data_asset[\"type\"] == \"result\"\n    )\n\n    return result_data_assets\n</code></pre>"},{"location":"reference/npc_lims/metadata/codeocean/#npc_lims.metadata.codeocean.get_session_sorted_data_asset","title":"get_session_sorted_data_asset","text":"<pre><code>get_session_sorted_data_asset(session: str | npc_session.SessionRecord) -&gt; DataAssetAPI\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sorted_data_asset = get_session_sorted_data_asset('668759_20230711')\n&gt;&gt;&gt; assert isinstance(sorted_data_asset, dict)\n</code></pre> Source code in <code>npc_lims/metadata/codeocean.py</code> <pre><code>def get_session_sorted_data_asset(\n    session: str | npc_session.SessionRecord,\n) -&gt; DataAssetAPI:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; sorted_data_asset = get_session_sorted_data_asset('668759_20230711')\n        &gt;&gt;&gt; assert isinstance(sorted_data_asset, dict)\n    \"\"\"\n    session_result_data_assets = get_session_data_assets(session)\n    sorted_data_assets = tuple(\n        data_asset\n        for data_asset in session_result_data_assets\n        if is_sorted_data_asset(data_asset) and data_asset[\"files\"] &gt; 2\n    )\n\n    if not sorted_data_assets:\n        raise ValueError(f\"Session {session} has no sorted data assets\")\n\n    return get_single_data_asset(session, sorted_data_assets, \"sorted\")\n</code></pre>"},{"location":"reference/npc_lims/metadata/codeocean/#npc_lims.metadata.codeocean.get_session_units_data_asset","title":"get_session_units_data_asset  <code>cached</code>","text":"<pre><code>get_session_units_data_asset(session_id: str | npc_session.SessionRecord) -&gt; DataAssetAPI\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; units_data_asset = get_session_units_data_asset('668759_20230711')\n&gt;&gt;&gt; assert units_data_asset is not None\n</code></pre> Source code in <code>npc_lims/metadata/codeocean.py</code> <pre><code>@functools.cache\ndef get_session_units_data_asset(\n    session_id: str | npc_session.SessionRecord,\n) -&gt; DataAssetAPI:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; units_data_asset = get_session_units_data_asset('668759_20230711')\n        &gt;&gt;&gt; assert units_data_asset is not None\n    \"\"\"\n    session = npc_session.SessionRecord(session_id)\n    session_data_assets = get_session_data_assets(session)\n    session_units_data_assets = tuple(\n        data_asset\n        for data_asset in session_data_assets\n        if \"units\" in data_asset[\"name\"] and \"peak\" not in data_asset[\"name\"]\n    )\n    session_units_data_asset = get_single_data_asset(\n        session, session_units_data_assets, \"units\"\n    )\n\n    return session_units_data_asset\n</code></pre>"},{"location":"reference/npc_lims/metadata/codeocean/#npc_lims.metadata.codeocean.get_session_units_spikes_with_peak_channels_data_asset","title":"get_session_units_spikes_with_peak_channels_data_asset  <code>cached</code>","text":"<pre><code>get_session_units_spikes_with_peak_channels_data_asset(session_id: str | npc_session.SessionRecord) -&gt; DataAssetAPI\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; units_peak_channel_data_asset = get_session_units_spikes_with_peak_channels_data_asset('668759_20230711')\n&gt;&gt;&gt; assert units_peak_channel_data_asset is not None\n</code></pre> Source code in <code>npc_lims/metadata/codeocean.py</code> <pre><code>@functools.cache\ndef get_session_units_spikes_with_peak_channels_data_asset(\n    session_id: str | npc_session.SessionRecord,\n) -&gt; DataAssetAPI:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; units_peak_channel_data_asset = get_session_units_spikes_with_peak_channels_data_asset('668759_20230711')\n        &gt;&gt;&gt; assert units_peak_channel_data_asset is not None\n    \"\"\"\n    session = npc_session.SessionRecord(session_id)\n    session_data_assets = get_session_data_assets(session)\n    session_units_spikes_peak_channel_data_assets = tuple(\n        data_asset\n        for data_asset in session_data_assets\n        if \"units_with_peak_channels\" in data_asset[\"name\"]\n    )\n\n    session_units_spikes_peak_channel_data_asset = get_single_data_asset(\n        session, session_units_spikes_peak_channel_data_assets, \"units\"\n    )\n\n    return session_units_spikes_peak_channel_data_asset\n</code></pre>"},{"location":"reference/npc_lims/metadata/codeocean/#npc_lims.metadata.codeocean.get_sessions_with_data_assets","title":"get_sessions_with_data_assets  <code>cached</code>","text":"<pre><code>get_sessions_with_data_assets(subject: str | int) -&gt; tuple[npc_session.SessionRecord, ...]\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sessions = get_sessions_with_data_assets(668759)\n&gt;&gt;&gt; assert len(sessions) &gt; 0\n</code></pre> Source code in <code>npc_lims/metadata/codeocean.py</code> <pre><code>@functools.cache\ndef get_sessions_with_data_assets(\n    subject: str | int,\n) -&gt; tuple[npc_session.SessionRecord, ...]:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; sessions = get_sessions_with_data_assets(668759)\n        &gt;&gt;&gt; assert len(sessions) &gt; 0\n    \"\"\"\n    assets = get_subject_data_assets(subject)\n    sessions = set()\n    for asset in assets:\n        try:\n            session = npc_session.SessionRecord(asset[\"name\"])\n        except ValueError:\n            continue\n        sessions.add(session)\n    return tuple(sessions)\n</code></pre>"},{"location":"reference/npc_lims/metadata/codeocean/#npc_lims.metadata.codeocean.get_subject_data_assets","title":"get_subject_data_assets  <code>cached</code>","text":"<pre><code>get_subject_data_assets(subject: str | int) -&gt; tuple[DataAssetAPI, ...]\n</code></pre> <p>All assets associated with a subject ID.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; assets = get_subject_data_assets(668759)\n&gt;&gt;&gt; assert len(assets) &gt; 0\n</code></pre> Source code in <code>npc_lims/metadata/codeocean.py</code> <pre><code>@functools.cache\ndef get_subject_data_assets(subject: str | int) -&gt; tuple[DataAssetAPI, ...]:\n    \"\"\"\n    All assets associated with a subject ID.\n\n    Examples:\n        &gt;&gt;&gt; assets = get_subject_data_assets(668759)\n        &gt;&gt;&gt; assert len(assets) &gt; 0\n    \"\"\"\n    response = get_codeocean_client().search_all_data_assets(\n        query=f\"subject id: {npc_session.SubjectRecord(subject)}\"\n    )\n    response.raise_for_status()\n    return response.json()[\"results\"]\n</code></pre>"},{"location":"reference/npc_lims/metadata/codeocean/#npc_lims.metadata.codeocean.get_surface_channel_root","title":"get_surface_channel_root","text":"<pre><code>get_surface_channel_root(session: str | npc_session.SessionRecord) -&gt; upath.UPath\n</code></pre> <p>Reconstruct path to surface channel data in bucket (e.g. on s3) using data-asset info from Code Ocean.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; get_surface_channel_root('660023_20230808')\nS3Path('s3://aind-ephys-data/ecephys_660023_2023-08-08_15-11-14')\n&gt;&gt;&gt; assert get_surface_channel_root('660023_20230808') != get_raw_data_root('660023_20230808')\n&gt;&gt;&gt; get_surface_channel_root('649943_20230216')\nTraceback (most recent call last):\n...\nFileNotFoundError: 649943_20230216 has no surface channel data assets\n</code></pre> Source code in <code>npc_lims/metadata/codeocean.py</code> <pre><code>def get_surface_channel_root(session: str | npc_session.SessionRecord) -&gt; upath.UPath:\n    \"\"\"Reconstruct path to surface channel data in bucket (e.g. on s3) using data-asset\n    info from Code Ocean.\n\n    Examples:\n        &gt;&gt;&gt; get_surface_channel_root('660023_20230808')\n        S3Path('s3://aind-ephys-data/ecephys_660023_2023-08-08_15-11-14')\n        &gt;&gt;&gt; assert get_surface_channel_root('660023_20230808') != get_raw_data_root('660023_20230808')\n        &gt;&gt;&gt; get_surface_channel_root('649943_20230216')\n        Traceback (most recent call last):\n        ...\n        FileNotFoundError: 649943_20230216 has no surface channel data assets\n    \"\"\"\n    session = npc_session.SessionRecord(session)\n    raw_assets = tuple(\n        asset for asset in get_session_data_assets(session) if is_raw_data_asset(asset)\n    )\n    try:\n        raw_asset = get_single_data_asset(session.with_idx(1), raw_assets, \"raw\")\n    except SessionIndexError:\n        raise FileNotFoundError(\n            f\"{session} has no surface channel data assets\"\n        ) from None\n    return get_path_from_data_asset(raw_asset)\n</code></pre>"},{"location":"reference/npc_lims/metadata/codeocean/#npc_lims.metadata.codeocean.is_raw_data_asset","title":"is_raw_data_asset","text":"<pre><code>is_raw_data_asset(asset: str | DataAssetAPI) -&gt; bool\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; is_raw_data_asset('83636983-f80d-42d6-a075-09b60c6abd5e')\nTrue\n&gt;&gt;&gt; is_raw_data_asset('173e2fdc-0ca3-4a4e-9886-b74207a91a9a')\nFalse\n</code></pre> Source code in <code>npc_lims/metadata/codeocean.py</code> <pre><code>def is_raw_data_asset(asset: str | DataAssetAPI) -&gt; bool:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; is_raw_data_asset('83636983-f80d-42d6-a075-09b60c6abd5e')\n        True\n        &gt;&gt;&gt; is_raw_data_asset('173e2fdc-0ca3-4a4e-9886-b74207a91a9a')\n        False\n    \"\"\"\n    asset = get_data_asset(asset)\n    if is_sorted_data_asset(asset):\n        return False\n    return asset.get(\"custom_metadata\", {}).get(\n        \"data level\"\n    ) == \"raw data\" or \"raw\" in asset.get(\"tags\", [])\n</code></pre>"},{"location":"reference/npc_lims/metadata/codeocean/#npc_lims.metadata.codeocean.is_sorted_data_asset","title":"is_sorted_data_asset","text":"<pre><code>is_sorted_data_asset(asset: str | DataAssetAPI) -&gt; bool\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; is_sorted_data_asset('173e2fdc-0ca3-4a4e-9886-b74207a91a9a')\nTrue\n&gt;&gt;&gt; is_sorted_data_asset('83636983-f80d-42d6-a075-09b60c6abd5e')\nFalse\n</code></pre> Source code in <code>npc_lims/metadata/codeocean.py</code> <pre><code>def is_sorted_data_asset(asset: str | DataAssetAPI) -&gt; bool:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; is_sorted_data_asset('173e2fdc-0ca3-4a4e-9886-b74207a91a9a')\n        True\n        &gt;&gt;&gt; is_sorted_data_asset('83636983-f80d-42d6-a075-09b60c6abd5e')\n        False\n    \"\"\"\n    asset = get_data_asset(asset)\n    if \"ecephys\" not in asset[\"name\"]:\n        return False\n    return \"sorted\" in asset[\"name\"]\n</code></pre>"},{"location":"reference/npc_lims/metadata/spreadsheets/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> spreadsheets","text":""},{"location":"reference/npc_lims/metadata/spreadsheets/#npc_lims.metadata.spreadsheets","title":"spreadsheets","text":""},{"location":"reference/npc_lims/metadata/spreadsheets/#npc_lims.metadata.spreadsheets.excel_to_sqlite","title":"excel_to_sqlite","text":"<pre><code>excel_to_sqlite(spreadsheet: str | upath.UPath, save_path: str | upath.UPath) -&gt; upath.UPath\n</code></pre> <p>This code uses the openpyxl package for playing around with excel using Python code to convert complete excel workbook (all sheets) to an SQLite database The code assumes that the first row of every sheet is the column name Every sheet is stored in a separate table The sheet name is assigned as the table name for every sheet.</p> <p>From https://stackoverflow.com/questions/17439885/export-data-from-excel-to-sqlite-database</p> Source code in <code>npc_lims/metadata/spreadsheets.py</code> <pre><code>def excel_to_sqlite(\n    spreadsheet: str | upath.UPath,\n    save_path: str | upath.UPath,\n) -&gt; upath.UPath:\n    \"\"\"\n    This code uses the openpyxl package for playing around with excel using Python code\n    to convert complete excel workbook (all sheets) to an SQLite database\n    The code assumes that the first row of every sheet is the column name\n    Every sheet is stored in a separate table\n    The sheet name is assigned as the table name for every sheet.\n\n    From\n    https://stackoverflow.com/questions/17439885/export-data-from-excel-to-sqlite-database\n    \"\"\"\n    spreadsheet = upath.UPath(spreadsheet)\n    save_path = upath.UPath(save_path)\n\n    db_path = tempfile.mkstemp(suffix=\".sqlite\")[1]\n    xls_path = tempfile.mkstemp(suffix=spreadsheet.suffix)[1]\n    upath.UPath(xls_path).write_bytes(spreadsheet.read_bytes())\n\n    # Replace with a database name\n    con = sqlite3.connect(db_path)\n\n    # replace with the complete path to your excel workbook\n    wb = openpyxl.load_workbook(filename=xls_path)\n\n    def slugify(text: str, lower=1) -&gt; str:\n        if lower == 1:\n            text = text.strip().lower()\n        text = text.replace(\"d'\", \"dprime\")\n        text = re.sub(r\"[^\\w _-]+\", \"\", text)\n        text = re.sub(r\"[- ]+\", \"_\", text)\n        return text\n\n    for sheet in wb.sheetnames:\n        ws = wb[sheet]\n        columns = []\n        duplicate_column_idx = []\n        query = (\n            \"CREATE TABLE \"\n            + repr(str(slugify(sheet)))\n            + \"(ID INTEGER PRIMARY KEY AUTOINCREMENT\"\n        )\n        for row in ws.rows:\n            for idx, col in enumerate(row):\n                column_name = slugify(col.value)\n                if column_name not in columns:\n                    query += \", \" + column_name + \" TEXT\"\n                    columns.append(column_name)\n                else:\n                    duplicate_column_idx.append(idx)\n            break  # only want column names from first row\n        query += \");\"\n        if not columns:\n            continue\n\n        con.execute(query)\n\n        tup = []\n        for i, col in enumerate(ws):\n            tuprow = []\n            if i == 0:\n                continue\n            for idx, col in enumerate(col):\n                if idx in duplicate_column_idx:\n                    continue\n                tuprow.append(str(col.value).strip()) if str(\n                    col.value\n                ).strip() != \"None\" else tuprow.append(\"\")\n            tup.append(tuple(tuprow))\n\n        insQuery1 = \"INSERT INTO \" + repr(str(slugify(sheet))) + \"(\"\n        insQuery2 = \"\"\n        for col in columns:\n            insQuery1 += col + \", \"\n            insQuery2 += \"?, \"\n        insQuery1 = insQuery1[:-2] + \") VALUES(\"\n        insQuery2 = insQuery2[:-2] + \")\"\n        insQuery = insQuery1 + insQuery2\n\n        con.executemany(insQuery, tup)\n        con.commit()\n\n    con.close()\n    save_path.write_bytes(upath.UPath(db_path).read_bytes())\n    return save_path\n</code></pre>"},{"location":"reference/npc_lims/metadata/spreadsheets/#npc_lims.metadata.spreadsheets.get_training_db","title":"get_training_db  <code>cached</code>","text":"<pre><code>get_training_db(nsb: bool = False) -&gt; sqlite3.Connection\n</code></pre> <p>Download db to tempdir, open connection, return connection.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; assert get_training_db()\n</code></pre> Source code in <code>npc_lims/metadata/spreadsheets.py</code> <pre><code>@functools.cache\ndef get_training_db(nsb: bool = False) -&gt; sqlite3.Connection:\n    \"\"\"\n    Download db to tempdir, open connection, return connection.\n\n    Examples:\n        &gt;&gt;&gt; assert get_training_db()\n    \"\"\"\n    db_path = upath.UPath(tempfile.mkstemp(suffix=\".db\")[1])\n    s3_path = next(\n        path for path in get_training_sqlite_paths() if (\"NSB\" in path.name) == nsb\n    )\n    db_path.write_bytes(s3_path.read_bytes())\n    con = sqlite3.connect(db_path)\n\n    def dict_factory(cursor, row):\n        d = {}\n        for idx, col in enumerate(cursor.description):\n            d[col[0]] = row[idx]\n        return d\n\n    con.row_factory = dict_factory\n    return con\n</code></pre>"},{"location":"reference/npc_lims/metadata/spreadsheets/#npc_lims.metadata.spreadsheets.get_training_spreadsheet_paths","title":"get_training_spreadsheet_paths","text":"<pre><code>get_training_spreadsheet_paths() -&gt; tuple[upath.UPath, ...]\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; assert len(get_training_spreadsheet_paths()) &gt; 0\n</code></pre> Source code in <code>npc_lims/metadata/spreadsheets.py</code> <pre><code>def get_training_spreadsheet_paths() -&gt; tuple[upath.UPath, ...]:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; assert len(get_training_spreadsheet_paths()) &gt; 0\n    \"\"\"\n    return tuple(npc_lims.DR_DATA_REPO.parent.glob(\"DynamicRoutingTraining*.xlsx\"))\n</code></pre>"},{"location":"reference/npc_lims/metadata/spreadsheets/#npc_lims.metadata.spreadsheets.get_training_sqlite_paths","title":"get_training_sqlite_paths","text":"<pre><code>get_training_sqlite_paths() -&gt; tuple[upath.UPath, ...]\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; assert len(get_training_sqlite_paths()) == len(get_training_spreadsheet_paths())\n</code></pre> Source code in <code>npc_lims/metadata/spreadsheets.py</code> <pre><code>def get_training_sqlite_paths() -&gt; tuple[upath.UPath, ...]:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; assert len(get_training_sqlite_paths()) == len(get_training_spreadsheet_paths())\n    \"\"\"\n    return tuple(\n        path.with_suffix(\".sqlite\") for path in get_training_spreadsheet_paths()\n    )\n</code></pre>"},{"location":"reference/npc_lims/metadata/spreadsheets/#npc_lims.metadata.spreadsheets.update_training_dbs","title":"update_training_dbs","text":"<pre><code>update_training_dbs() -&gt; None\n</code></pre> <p>Read spreadsheets from the data repo and write them to corresponding databases, currently sqlite files in the same directory.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; update_training_dbs()\n</code></pre> Source code in <code>npc_lims/metadata/spreadsheets.py</code> <pre><code>def update_training_dbs() -&gt; None:\n    \"\"\"\n    Read spreadsheets from the data repo and write them to corresponding\n    databases, currently sqlite files in the same directory.\n\n    Examples:\n        &gt;&gt;&gt; update_training_dbs()\n    \"\"\"\n    for spreadsheet, sqlite in zip(\n        get_training_spreadsheet_paths(), get_training_sqlite_paths()\n    ):\n        excel_to_sqlite(spreadsheet, sqlite)\n</code></pre>"},{"location":"reference/npc_lims/metadata/types/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> types","text":""},{"location":"reference/npc_lims/metadata/types/#npc_lims.metadata.types","title":"types","text":""},{"location":"reference/npc_lims/paths/","title":"Index","text":""},{"location":"reference/npc_lims/paths/#npc_lims.paths","title":"paths","text":""},{"location":"reference/npc_lims/paths/codeocean/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> codeocean","text":""},{"location":"reference/npc_lims/paths/codeocean/#npc_lims.paths.codeocean","title":"codeocean","text":""},{"location":"reference/npc_lims/paths/codeocean/#npc_lims.paths.codeocean.DataAssetAPI","title":"DataAssetAPI  <code>module-attribute</code>","text":"<pre><code>DataAssetAPI: TypeAlias = dict[Literal['created', 'custom_metadata', 'description', 'files', 'id', 'last_used', 'name', 'size', 'sourceBucket', 'state', 'tags', 'type'], Any]\n</code></pre> <p>Result from CodeOcean API when querying data assets.</p>"},{"location":"reference/npc_lims/paths/codeocean/#npc_lims.paths.codeocean.MissingCredentials","title":"MissingCredentials","text":"<p>             Bases: <code>KeyError</code></p> <p>Raised when a required credential is not found in environment variables.</p>"},{"location":"reference/npc_lims/paths/codeocean/#npc_lims.paths.codeocean.NoSessionInfo","title":"NoSessionInfo","text":"<p>             Bases: <code>ValueError</code></p> <p>Raised when a session is not found in the tracked-sessions database.</p>"},{"location":"reference/npc_lims/paths/codeocean/#npc_lims.paths.codeocean.SessionInfo","title":"SessionInfo  <code>dataclass</code>","text":"<p>Minimal session metadata obtained quickly from a database.</p> <p>Currently using: https://raw.githubusercontent.com/AllenInstitute/npc_lims/main/tracked_sessions.yaml and training spreadsheets.</p>"},{"location":"reference/npc_lims/paths/codeocean/#npc_lims.paths.codeocean.SessionInfo.date","title":"date  <code>property</code>","text":"<pre><code>date: npc_session.DateRecord\n</code></pre> <p>YY-MM-DD</p>"},{"location":"reference/npc_lims/paths/codeocean/#npc_lims.paths.codeocean.SessionInfo.experiment_day","title":"experiment_day  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>experiment_day: int | None = None\n</code></pre> <p>Experiment day (ephys recording, or opto experiment), starting from 1 for each subject. <code>None</code> for training behavior-only sessions.</p>"},{"location":"reference/npc_lims/paths/codeocean/#npc_lims.paths.codeocean.SessionInfo.idx","title":"idx  <code>property</code>","text":"<pre><code>idx: int\n</code></pre> <p>Session index, starting from 0 for each subject on each day. Currently one session per day, so index isn't specified - implicitly equal to 0.</p>"},{"location":"reference/npc_lims/paths/codeocean/#npc_lims.paths.codeocean.SessionInfo.is_annotated","title":"is_annotated  <code>cached</code> <code>property</code>","text":"<pre><code>is_annotated: bool\n</code></pre> <p>The subject associated with the sessions has CCF annotation data for probes available on S3.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; next(session.is_annotated for session in get_session_info() if session.is_annotated)\nTrue\n</code></pre>"},{"location":"reference/npc_lims/paths/codeocean/#npc_lims.paths.codeocean.SessionInfo.is_sorted","title":"is_sorted  <code>cached</code> <code>property</code>","text":"<pre><code>is_sorted: bool\n</code></pre> <p>The AIND sorting pipeline has yielded a Result asset for this session.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; next(session.is_sorted for session in get_session_info() if session.is_sorted)\nTrue\n</code></pre>"},{"location":"reference/npc_lims/paths/codeocean/#npc_lims.paths.codeocean.SessionInfo.is_surface_channels","title":"is_surface_channels  <code>cached</code> <code>property</code>","text":"<pre><code>is_surface_channels: bool\n</code></pre> <p>The session has ephys data collected separately to record surface channel.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; get_session_info(\"DRpilot_660023_20230808\").is_surface_channels\nTrue\n</code></pre>"},{"location":"reference/npc_lims/paths/codeocean/#npc_lims.paths.codeocean.SessionInfo.is_sync","title":"is_sync  <code>instance-attribute</code>","text":"<pre><code>is_sync: bool\n</code></pre> <p>The session has sync data, implying more than a behavior-box.</p>"},{"location":"reference/npc_lims/paths/codeocean/#npc_lims.paths.codeocean.SessionInfo.is_templeton","title":"is_templeton  <code>cached</code> <code>property</code>","text":"<pre><code>is_templeton: bool\n</code></pre> <p>Uses project in <code>tracked_sessions.yaml</code> if available, then infers from whether the session is in Sam's DR training database.</p>"},{"location":"reference/npc_lims/paths/codeocean/#npc_lims.paths.codeocean.SessionInfo.is_uploaded","title":"is_uploaded  <code>cached</code> <code>property</code>","text":"<pre><code>is_uploaded: bool\n</code></pre> <p>All of the session's raw data has been uploaded to S3 and can be found in CodeOcean. Not the same as <code>cloud_path</code> being non-None: this property indicates a proper session upload via aind tools, with metadata etc.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; next(session.is_uploaded for session in get_session_info() if session.is_uploaded)\nTrue\n</code></pre>"},{"location":"reference/npc_lims/paths/codeocean/#npc_lims.paths.codeocean.SessionInfo.rig","title":"rig  <code>property</code>","text":"<pre><code>rig: str\n</code></pre> <p>From DR training spreadsheet (<code>NP2</code>, <code>B2</code>, 'BEH.E`).</p> <ul> <li>does not necessarily match <code>AIBS_RIG_ID</code> on computer</li> <li><code>unknown</code> if not available (for Templeton sessions)</li> </ul>"},{"location":"reference/npc_lims/paths/codeocean/#npc_lims.paths.codeocean.SessionInfo.task_version","title":"task_version  <code>property</code>","text":"<pre><code>task_version: str\n</code></pre> <p>From DR training spreadsheet (<code>stage 5 ori AMN moving timeouts repeats</code>). - <code>unknown</code> if not available (for Templeton sessions)</p>"},{"location":"reference/npc_lims/paths/codeocean/#npc_lims.paths.codeocean.SessionInfo.training_info","title":"training_info  <code>cached</code> <code>property</code>","text":"<pre><code>training_info: dict[str, Any]\n</code></pre> <p>Session metadata from Sam's DR training database. - empty dict for Templeton sessions</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; next(get_session_info()).session_info                       # doctest: +SKIP\n{'ID': 1, 'start_time': '2023-03-07 12:56:27', 'rig_name': 'B2', 'task_version': 'stage 0 moving', 'hits': '0', 'dprime_same_modality': '', 'dprime_other_modality_go_stim': '', 'pass': '1', 'ignore': '0'}\n&gt;&gt;&gt; assert next(session.training_info for session in get_session_info() if session.training_info)\n</code></pre>"},{"location":"reference/npc_lims/paths/codeocean/#npc_lims.paths.codeocean.excel_to_sqlite","title":"excel_to_sqlite","text":"<pre><code>excel_to_sqlite(spreadsheet: str | upath.UPath, save_path: str | upath.UPath) -&gt; upath.UPath\n</code></pre> <p>This code uses the openpyxl package for playing around with excel using Python code to convert complete excel workbook (all sheets) to an SQLite database The code assumes that the first row of every sheet is the column name Every sheet is stored in a separate table The sheet name is assigned as the table name for every sheet.</p> <p>From https://stackoverflow.com/questions/17439885/export-data-from-excel-to-sqlite-database</p> Source code in <code>npc_lims/metadata/spreadsheets.py</code> <pre><code>def excel_to_sqlite(\n    spreadsheet: str | upath.UPath,\n    save_path: str | upath.UPath,\n) -&gt; upath.UPath:\n    \"\"\"\n    This code uses the openpyxl package for playing around with excel using Python code\n    to convert complete excel workbook (all sheets) to an SQLite database\n    The code assumes that the first row of every sheet is the column name\n    Every sheet is stored in a separate table\n    The sheet name is assigned as the table name for every sheet.\n\n    From\n    https://stackoverflow.com/questions/17439885/export-data-from-excel-to-sqlite-database\n    \"\"\"\n    spreadsheet = upath.UPath(spreadsheet)\n    save_path = upath.UPath(save_path)\n\n    db_path = tempfile.mkstemp(suffix=\".sqlite\")[1]\n    xls_path = tempfile.mkstemp(suffix=spreadsheet.suffix)[1]\n    upath.UPath(xls_path).write_bytes(spreadsheet.read_bytes())\n\n    # Replace with a database name\n    con = sqlite3.connect(db_path)\n\n    # replace with the complete path to your excel workbook\n    wb = openpyxl.load_workbook(filename=xls_path)\n\n    def slugify(text: str, lower=1) -&gt; str:\n        if lower == 1:\n            text = text.strip().lower()\n        text = text.replace(\"d'\", \"dprime\")\n        text = re.sub(r\"[^\\w _-]+\", \"\", text)\n        text = re.sub(r\"[- ]+\", \"_\", text)\n        return text\n\n    for sheet in wb.sheetnames:\n        ws = wb[sheet]\n        columns = []\n        duplicate_column_idx = []\n        query = (\n            \"CREATE TABLE \"\n            + repr(str(slugify(sheet)))\n            + \"(ID INTEGER PRIMARY KEY AUTOINCREMENT\"\n        )\n        for row in ws.rows:\n            for idx, col in enumerate(row):\n                column_name = slugify(col.value)\n                if column_name not in columns:\n                    query += \", \" + column_name + \" TEXT\"\n                    columns.append(column_name)\n                else:\n                    duplicate_column_idx.append(idx)\n            break  # only want column names from first row\n        query += \");\"\n        if not columns:\n            continue\n\n        con.execute(query)\n\n        tup = []\n        for i, col in enumerate(ws):\n            tuprow = []\n            if i == 0:\n                continue\n            for idx, col in enumerate(col):\n                if idx in duplicate_column_idx:\n                    continue\n                tuprow.append(str(col.value).strip()) if str(\n                    col.value\n                ).strip() != \"None\" else tuprow.append(\"\")\n            tup.append(tuple(tuprow))\n\n        insQuery1 = \"INSERT INTO \" + repr(str(slugify(sheet))) + \"(\"\n        insQuery2 = \"\"\n        for col in columns:\n            insQuery1 += col + \", \"\n            insQuery2 += \"?, \"\n        insQuery1 = insQuery1[:-2] + \") VALUES(\"\n        insQuery2 = insQuery2[:-2] + \")\"\n        insQuery = insQuery1 + insQuery2\n\n        con.executemany(insQuery, tup)\n        con.commit()\n\n    con.close()\n    save_path.write_bytes(upath.UPath(db_path).read_bytes())\n    return save_path\n</code></pre>"},{"location":"reference/npc_lims/paths/codeocean/#npc_lims.paths.codeocean.get_data_asset","title":"get_data_asset","text":"<pre><code>get_data_asset(asset: str | uuid.UUID | DataAssetAPI) -&gt; DataAssetAPI\n</code></pre> <p>Converts an asset uuid to dict of info from CodeOcean API.</p> Source code in <code>npc_lims/metadata/codeocean.py</code> <pre><code>def get_data_asset(asset: str | uuid.UUID | DataAssetAPI) -&gt; DataAssetAPI:\n    \"\"\"Converts an asset uuid to dict of info from CodeOcean API.\"\"\"\n    if not isinstance(asset, Mapping):\n        response = get_codeocean_client().get_data_asset(str(asset))\n        response.raise_for_status()\n        asset = response.json()\n    assert isinstance(asset, Mapping), f\"Unexpected {type(asset) = }, {asset = }\"\n    return asset\n</code></pre>"},{"location":"reference/npc_lims/paths/codeocean/#npc_lims.paths.codeocean.get_data_asset_s3_path","title":"get_data_asset_s3_path","text":"<pre><code>get_data_asset_s3_path(asset_id: str | codeocean.DataAssetAPI) -&gt; upath.UPath\n</code></pre> <p>Path on s3 that contains actual data for CodeOcean data asset.</p> <ul> <li>asset <code>id</code> is a UUID</li> <li>accept anything with an \"id\" attribute or key, or a string Assumes that the data asset has data on s3, which may not be true, and we can't tell from asset info.</li> </ul> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>def get_data_asset_s3_path(asset_id: str | codeocean.DataAssetAPI) -&gt; upath.UPath:\n    \"\"\"Path on s3 that contains actual data for CodeOcean data asset.\n\n    - asset `id` is a UUID\n    - accept anything with an \"id\" attribute or key, or a string\n    Assumes that the data asset has data on s3, which may not be true, and we can't tell from asset info.\n    \"\"\"\n    bucket = CODE_OCEAN_DATA_BUCKET\n    with contextlib.suppress(AttributeError, KeyError):\n        bucket = upath.UPath(upath.UPath(f's3://{asset_id[\"sourceBucket\"]}'))  # type: ignore[index]\n    with contextlib.suppress(AttributeError, KeyError):\n        return bucket / asset_id.get(\"id\")  # type: ignore[union-attr, operator]\n    with contextlib.suppress(AttributeError):\n        return bucket / asset_id.id  # type: ignore[union-attr]\n    return bucket / str(asset_id)\n</code></pre>"},{"location":"reference/npc_lims/paths/codeocean/#npc_lims.paths.codeocean.get_h5_sync_from_s3","title":"get_h5_sync_from_s3  <code>cached</code>","text":"<pre><code>get_h5_sync_from_s3(session: str | npc_session.SessionRecord) -&gt; upath.UPath\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; get_h5_sync_from_s3('662892_20230821')\nS3Path('s3://aind-ephys-data/ecephys_662892_2023-08-21_12-43-45/behavior/20230821T124345.h5')\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_h5_sync_from_s3(session: str | npc_session.SessionRecord) -&gt; upath.UPath:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; get_h5_sync_from_s3('662892_20230821')\n        S3Path('s3://aind-ephys-data/ecephys_662892_2023-08-21_12-43-45/behavior/20230821T124345.h5')\n    \"\"\"\n    raw_data_paths_s3 = get_raw_data_paths_from_s3(session)\n    sync_path = tuple(path for path in raw_data_paths_s3 if \".h5\" in path.suffix)\n\n    if not sync_path:\n        raise FileNotFoundError(f\"No sync file found in {raw_data_paths_s3!r}\")\n\n    return sync_path[0]\n</code></pre>"},{"location":"reference/npc_lims/paths/codeocean/#npc_lims.paths.codeocean.get_hdf5_stim_files_from_s3","title":"get_hdf5_stim_files_from_s3  <code>cached</code>","text":"<pre><code>get_hdf5_stim_files_from_s3(session: str | npc_session.SessionRecord) -&gt; tuple[StimFile, ...]\n</code></pre> <p>All the stim files for a session, from the synced <code>DynamicRoutingTask/Data</code> folder on s3.</p> <ul> <li>filters out files that are obviously wrong</li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; files = get_hdf5_stim_files_from_s3('668759_20230711')\n&gt;&gt;&gt; assert len(files) &gt; 0\n&gt;&gt;&gt; files[0].name, files[0].time\n('DynamicRouting1', '13:25:00')\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_hdf5_stim_files_from_s3(\n    session: str | npc_session.SessionRecord,\n) -&gt; tuple[StimFile, ...]:\n    \"\"\"All the stim files for a session, from the synced\n    `DynamicRoutingTask/Data` folder on s3.\n\n    - filters out files that are obviously wrong\n\n    Examples:\n        &gt;&gt;&gt; files = get_hdf5_stim_files_from_s3('668759_20230711')\n        &gt;&gt;&gt; assert len(files) &gt; 0\n        &gt;&gt;&gt; files[0].name, files[0].time\n        ('DynamicRouting1', '13:25:00')\n    \"\"\"\n    session = npc_session.SessionRecord(session)\n    root = DR_DATA_REPO / str(session.subject)\n    if not root.exists():\n        if not DR_DATA_REPO.exists():\n            raise FileNotFoundError(f\"{DR_DATA_REPO = } does not exist\")\n        raise FileNotFoundError(\n            f\"Subject {session.subject} hdf5s not on s3: may have been run by NSB, in which case they are on lims2\"\n        )\n    file_glob = f\"*_{session.subject}_{session.date.replace('-', '')}_??????.hdf5\"\n    files = [StimFile(path, session) for path in root.glob(file_glob)]\n\n    test_glob = file_glob.replace(str(session.subject), \"test\")\n    files += [\n        StimFile(path, session)\n        for path in root.glob(test_glob)\n        if str(session.subject) in path.as_posix()\n    ]\n\n    # no empty files:\n    files = [f for f in files if f.size &gt; 0]\n\n    # single behavior task:\n    behavior_tasks = tuple(f for f in files if \"DynamicRouting\" in f.name)\n    if len(behavior_tasks) &gt; 1:\n        largest = max(behavior_tasks, key=lambda f: f.size)\n        for f in behavior_tasks:\n            if f.path != largest.path:\n                files.remove(f)\n\n    return tuple(files)\n</code></pre>"},{"location":"reference/npc_lims/paths/codeocean/#npc_lims.paths.codeocean.get_mean_waveform_codeocean_kilosort_path_from_s3","title":"get_mean_waveform_codeocean_kilosort_path_from_s3  <code>cached</code>","text":"<pre><code>get_mean_waveform_codeocean_kilosort_path_from_s3(session: str | npc_session.SessionRecord) -&gt; upath.UPath\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; path = get_spike_times_codeocean_kilosort_path_from_s3('668759_20230711')\n&gt;&gt;&gt; assert path\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_mean_waveform_codeocean_kilosort_path_from_s3(\n    session: str | npc_session.SessionRecord,\n) -&gt; upath.UPath:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; path = get_spike_times_codeocean_kilosort_path_from_s3('668759_20230711')\n        &gt;&gt;&gt; assert path\n    \"\"\"\n    files = get_units_spikes_codeocean_kilosort_top_level_files(session)\n    mean_waveforms_path = next(path for path in files if \"mean\" in str(path))\n\n    return mean_waveforms_path\n</code></pre>"},{"location":"reference/npc_lims/paths/codeocean/#npc_lims.paths.codeocean.get_nwb_file_from_s3","title":"get_nwb_file_from_s3  <code>cached</code>","text":"<pre><code>get_nwb_file_from_s3(session: str | npc_session.SessionRecord) -&gt; upath.UPath\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; get_nwb_file_from_s3('636766_20230125')\nS3Path('s3://aind-scratch-data/ben.hardcastle/nwb/nwb/DRpilot_636766_20230125.nwb')\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_nwb_file_from_s3(\n    session: str | npc_session.SessionRecord,\n) -&gt; upath.UPath:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; get_nwb_file_from_s3('636766_20230125')\n        S3Path('s3://aind-scratch-data/ben.hardcastle/nwb/nwb/DRpilot_636766_20230125.nwb')\n    \"\"\"\n    session = npc_session.SessionRecord(session)\n    root = NWB_REPO\n    glob = \"*.nwb*\"\n    result = next(\n        (\n            path\n            for path in root.glob(glob)\n            if session == npc_session.SessionRecord(path.name)\n        ),\n        None,\n    )\n    if not result:\n        raise FileNotFoundError(f\"No NWB file found at {root}/{glob}\")\n    return result\n</code></pre>"},{"location":"reference/npc_lims/paths/codeocean/#npc_lims.paths.codeocean.get_path_from_data_asset","title":"get_path_from_data_asset","text":"<pre><code>get_path_from_data_asset(asset: DataAssetAPI) -&gt; upath.UPath\n</code></pre> <p>Reconstruct path to raw data in bucket (e.g. on s3) using data asset uuid or dict of info from Code Ocean API.</p> Source code in <code>npc_lims/metadata/codeocean.py</code> <pre><code>def get_path_from_data_asset(asset: DataAssetAPI) -&gt; upath.UPath:\n    \"\"\"Reconstruct path to raw data in bucket (e.g. on s3) using data asset\n    uuid or dict of info from Code Ocean API.\"\"\"\n    if \"sourceBucket\" not in asset:\n        raise ValueError(\n            f\"Asset {asset['id']} has no `sourceBucket` info - not sure how to create UPath:\\n{asset!r}\"\n        )\n    bucket_info = asset[\"sourceBucket\"]\n    roots = {\"aws\": \"s3\", \"gcs\": \"gs\"}\n    if bucket_info[\"origin\"] not in roots:\n        raise RuntimeError(\n            f\"Unknown bucket origin - not sure how to create UPath: {bucket_info = }\"\n        )\n    return upath.UPath(\n        f\"{roots[bucket_info['origin']]}://{bucket_info['bucket']}/{bucket_info['prefix']}\"\n    )\n</code></pre>"},{"location":"reference/npc_lims/paths/codeocean/#npc_lims.paths.codeocean.get_quality_metrics_paths_from_s3","title":"get_quality_metrics_paths_from_s3  <code>cached</code>","text":"<pre><code>get_quality_metrics_paths_from_s3(session: str | npc_session.SessionRecord) -&gt; tuple[upath.UPath, ...]\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; quality_metrics_paths = get_quality_metrics_paths_from_s3('662892_2023-08-21')\n&gt;&gt;&gt; assert len(quality_metrics_paths) &gt; 0\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_quality_metrics_paths_from_s3(\n    session: str | npc_session.SessionRecord,\n) -&gt; tuple[upath.UPath, ...]:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; quality_metrics_paths = get_quality_metrics_paths_from_s3('662892_2023-08-21')\n        &gt;&gt;&gt; assert len(quality_metrics_paths) &gt; 0\n    \"\"\"\n    sorted_paths = get_sorted_data_paths_from_s3(session)\n    postprocessed_files = next(\n        path for path in sorted_paths if \"postprocessed\" in str(path)\n    ).iterdir()\n    quality_metrics_paths = tuple(\n        next(path.glob(\"quality_metrics/metrics.csv\")) for path in postprocessed_files\n    )\n\n    return quality_metrics_paths\n</code></pre>"},{"location":"reference/npc_lims/paths/codeocean/#npc_lims.paths.codeocean.get_raw_data_paths_from_s3","title":"get_raw_data_paths_from_s3  <code>cached</code>","text":"<pre><code>get_raw_data_paths_from_s3(session: str | npc_session.SessionRecord) -&gt; tuple[upath.UPath, ...]\n</code></pre> <p>All top-level files and folders from the <code>ephys</code> &amp; <code>behavior</code> subdirectories in a session's raw data folder on s3.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; files = get_raw_data_paths_from_s3 ('668759_20230711')\n&gt;&gt;&gt; assert len(files) &gt; 0\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_raw_data_paths_from_s3(\n    session: str | npc_session.SessionRecord,\n) -&gt; tuple[upath.UPath, ...]:\n    \"\"\"All top-level files and folders from the `ephys` &amp; `behavior`\n    subdirectories in a session's raw data folder on s3.\n\n    Examples:\n        &gt;&gt;&gt; files = get_raw_data_paths_from_s3 ('668759_20230711')\n        &gt;&gt;&gt; assert len(files) &gt; 0\n    \"\"\"\n    raw_data_root = codeocean.get_raw_data_root(session)\n    directories: Iterator[upath.UPath] = (\n        directory for directory in raw_data_root.iterdir() if directory.is_dir()\n    )\n    first_level_files_directories: Iterator = (\n        tuple(directory.iterdir()) for directory in directories\n    )\n\n    paths = functools.reduce(operator.add, first_level_files_directories)\n\n    if not paths:\n        raise FileNotFoundError(\n            f\"Raw data paths empty for {session} on s3. Looks like an upload was started, but no files have been transferred.\"\n        )\n    return paths\n</code></pre>"},{"location":"reference/npc_lims/paths/codeocean/#npc_lims.paths.codeocean.get_raw_data_root","title":"get_raw_data_root  <code>cached</code>","text":"<pre><code>get_raw_data_root(session: str | npc_session.SessionRecord) -&gt; upath.UPath\n</code></pre> <p>Reconstruct path to raw data in bucket (e.g. on s3) using data-asset info from Code Ocean.</p> <pre><code>&gt;&gt;&gt; get_raw_data_root('668759_20230711')\nS3Path('s3://aind-ephys-data/ecephys_668759_2023-07-11_13-07-32')\n</code></pre> Source code in <code>npc_lims/metadata/codeocean.py</code> <pre><code>@functools.cache\ndef get_raw_data_root(session: str | npc_session.SessionRecord) -&gt; upath.UPath:\n    \"\"\"Reconstruct path to raw data in bucket (e.g. on s3) using data-asset\n    info from Code Ocean.\n\n        &gt;&gt;&gt; get_raw_data_root('668759_20230711')\n        S3Path('s3://aind-ephys-data/ecephys_668759_2023-07-11_13-07-32')\n    \"\"\"\n    session = npc_session.SessionRecord(session)\n    raw_assets = tuple(\n        asset for asset in get_session_data_assets(session) if is_raw_data_asset(asset)\n    )\n    raw_asset = get_single_data_asset(session, raw_assets, \"raw\")\n\n    return get_path_from_data_asset(raw_asset)\n</code></pre>"},{"location":"reference/npc_lims/paths/codeocean/#npc_lims.paths.codeocean.get_recording_dirs_experiment_path_from_s3","title":"get_recording_dirs_experiment_path_from_s3  <code>cached</code>","text":"<pre><code>get_recording_dirs_experiment_path_from_s3(session: str | npc_session.SessionRecord) -&gt; tuple[upath.UPath, ...]\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; recording_dirs = get_recording_dirs_experiment_path_from_s3('662892_20230821')\n&gt;&gt;&gt; assert len(recording_dirs) &gt; 0\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_recording_dirs_experiment_path_from_s3(\n    session: str | npc_session.SessionRecord,\n) -&gt; tuple[upath.UPath, ...]:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; recording_dirs = get_recording_dirs_experiment_path_from_s3('662892_20230821')\n        &gt;&gt;&gt; assert len(recording_dirs) &gt; 0\n    \"\"\"\n    raw_data_paths = get_raw_data_paths_from_s3(session)\n    recording_dirs = (\n        path\n        for path in raw_data_paths\n        if \"Record Node\" in str(path) and \"zarr\" not in str(path)\n    )\n    recording_dirs_experiment = tuple(\n        next(path.glob(\"*/recording*\")) for path in recording_dirs\n    )\n\n    return recording_dirs_experiment\n</code></pre>"},{"location":"reference/npc_lims/paths/codeocean/#npc_lims.paths.codeocean.get_session_id_from_db_row","title":"get_session_id_from_db_row","text":"<pre><code>get_session_id_from_db_row(subject: int | str, row: dict[str, Any]) -&gt; npc_session.SessionRecord\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; get_session_id_from_db_row(366122, {'start_time': '2023-01-30 12:56:27'})\n'366122_2023-01-30'\n</code></pre> Source code in <code>npc_lims/status/behavior_sessions.py</code> <pre><code>def get_session_id_from_db_row(\n    subject: int | str, row: dict[str, Any]\n) -&gt; npc_session.SessionRecord:\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; get_session_id_from_db_row(366122, {'start_time': '2023-01-30 12:56:27'})\n        '366122_2023-01-30'\n    \"\"\"\n    return npc_session.SessionRecord(\n        f\"{subject} {row[next(k for k in row.keys() if 'start' in k and any(t in k for t in ('date', 'time')))]}\"\n    )\n</code></pre>"},{"location":"reference/npc_lims/paths/codeocean/#npc_lims.paths.codeocean.get_session_info","title":"get_session_info","text":"<pre><code>get_session_info(session: str | npc_session.SessionRecord | SessionInfo | None = None, **bool_filter_kwargs: bool) -&gt; tuple[SessionInfo, ...] | SessionInfo\n</code></pre> <p>Quickly get a sequence of all tracked sessions.</p> <p>Examples:</p> <pre><code>Each object in the sequence has info about one session:\n&gt;&gt;&gt; sessions = get_session_info()\n&gt;&gt;&gt; sessions[0].__class__.__name__\n'SessionInfo'\n&gt;&gt;&gt; sessions[0].is_ephys                    # doctest: +SKIP\nTrue\n&gt;&gt;&gt; any(s for s in sessions if s.date.year &lt; 2021)\nFalse\n\nPass a session str or SessionRecord to get the info for that session:\n&gt;&gt;&gt; info = get_session_info(\"DRpilot_667252_20230927\")\n&gt;&gt;&gt; assert isinstance(info, SessionInfo)\n</code></pre> Source code in <code>npc_lims/status/tracked_sessions.py</code> <pre><code>def get_session_info(\n    session: str | npc_session.SessionRecord | SessionInfo | None = None,\n    **bool_filter_kwargs: bool,\n) -&gt; tuple[SessionInfo, ...] | SessionInfo:\n    \"\"\"Quickly get a sequence of all tracked sessions.\n\n    Examples:\n\n        Each object in the sequence has info about one session:\n        &gt;&gt;&gt; sessions = get_session_info()\n        &gt;&gt;&gt; sessions[0].__class__.__name__\n        'SessionInfo'\n        &gt;&gt;&gt; sessions[0].is_ephys                    # doctest: +SKIP\n        True\n        &gt;&gt;&gt; any(s for s in sessions if s.date.year &lt; 2021)\n        False\n\n        Pass a session str or SessionRecord to get the info for that session:\n        &gt;&gt;&gt; info = get_session_info(\"DRpilot_667252_20230927\")\n        &gt;&gt;&gt; assert isinstance(info, SessionInfo)\n    \"\"\"\n    if isinstance(session, SessionInfo):\n        session = session.id\n    tracked_sessions = set(\n        _get_session_info_from_file(),\n    )\n    tracked_sessions.update(_get_session_info_from_data_repo())\n    if session is None:\n        filtered_sessions = (\n            s\n            for s in tracked_sessions\n            if all(getattr(s, k) == v for k, v in bool_filter_kwargs.items())\n        )\n        return tuple(sorted(filtered_sessions, key=lambda s: s.id.date, reverse=True))\n    with contextlib.suppress(StopIteration):\n        return next(\n            s\n            for s in tracked_sessions\n            if s.id == (record := npc_session.SessionRecord(session))\n        )\n    raise exceptions.NoSessionInfo(f\"{record} not found in tracked sessions\")\n</code></pre>"},{"location":"reference/npc_lims/paths/codeocean/#npc_lims.paths.codeocean.get_session_issues","title":"get_session_issues","text":"<pre><code>get_session_issues(session: str | npc_session.SessionRecord | None = None) -&gt; list[str] | list | dict[npc_session.SessionRecord, list[str]]\n</code></pre> <p>Get a dictionary of all sessions with issues mapped to their issue url.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; issues = get_session_issues()\n&gt;&gt;&gt; issues                                                              # doctest: +SKIP\n{\n    '644867_2023-02-21': ['https://github.com/AllenInstitute/npc_sessions/issues/28'],\n    '660023_2023-08-08': ['https://github.com/AllenInstitute/npc_sessions/issues/26'],\n}\n\n&gt;&gt;&gt; single_session_issues = get_session_issues(\"DRPilot_644867_20230221\")\n&gt;&gt;&gt; assert isinstance(single_session_issues, typing.Sequence)\n&gt;&gt;&gt; single_session_issues                                               # doctest: +SKIP\n['https://github.com/AllenInstitute/npc_sessions/issues/28']\n</code></pre> Source code in <code>npc_lims/status/tracked_sessions.py</code> <pre><code>def get_session_issues(\n    session: str | npc_session.SessionRecord | None = None,\n) -&gt; list[str] | list | dict[npc_session.SessionRecord, list[str]]:\n    \"\"\"Get a dictionary of all sessions with issues mapped to their issue url.\n\n    Examples:\n\n        &gt;&gt;&gt; issues = get_session_issues()\n        &gt;&gt;&gt; issues                                                              # doctest: +SKIP\n        {\n            '644867_2023-02-21': ['https://github.com/AllenInstitute/npc_sessions/issues/28'],\n            '660023_2023-08-08': ['https://github.com/AllenInstitute/npc_sessions/issues/26'],\n        }\n\n        &gt;&gt;&gt; single_session_issues = get_session_issues(\"DRPilot_644867_20230221\")\n        &gt;&gt;&gt; assert isinstance(single_session_issues, typing.Sequence)\n        &gt;&gt;&gt; single_session_issues                                               # doctest: +SKIP\n        ['https://github.com/AllenInstitute/npc_sessions/issues/28']\n    \"\"\"\n    if session:\n        try:\n            return get_session_info(session).issues\n        except exceptions.NoSessionInfo:\n            return []\n    return {\n        session.id: session.issues for session in get_session_info() if session.issues\n    }\n</code></pre>"},{"location":"reference/npc_lims/paths/codeocean/#npc_lims.paths.codeocean.get_session_kwargs","title":"get_session_kwargs","text":"<pre><code>get_session_kwargs(session: str | npc_session.SessionRecord | None = None) -&gt; dict[str, str] | dict | dict[npc_session.SessionRecord, dict[str, str]]\n</code></pre> <p>Get a dictionary of all sessions mapped to their config kwargs. kwargs will be an empty dict if no kwargs have been specified.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; kwargs = get_session_kwargs()\n&gt;&gt;&gt; kwargs                                                          # doctest: +SKIP\n{   '670248_2023-08-02': {\n        'is_task': False,\n    },\n    '667252_2023-09-25': {\n        'invalid_times': [\n            {'start_time': 4996, 'stop_time': -1, 'reason': 'auditory stimulus not presented (amplifier power issue)'}\n        ]\n    },\n}\n&gt;&gt;&gt; single_session_kwargs = get_session_kwargs(\"DRpilot_670248_20230802\")\n&gt;&gt;&gt; assert isinstance(single_session_kwargs, dict)\n&gt;&gt;&gt; single_session_kwargs                                           # doctest: +SKIP\n{'is_task': False}\n</code></pre> Source code in <code>npc_lims/status/tracked_sessions.py</code> <pre><code>def get_session_kwargs(\n    session: str | npc_session.SessionRecord | None = None,\n) -&gt; dict[str, str] | dict | dict[npc_session.SessionRecord, dict[str, str]]:\n    \"\"\"Get a dictionary of all sessions mapped to their config kwargs. kwargs will\n    be an empty dict if no kwargs have been specified.\n\n    Examples:\n\n        &gt;&gt;&gt; kwargs = get_session_kwargs()\n        &gt;&gt;&gt; kwargs                                                          # doctest: +SKIP\n        {   '670248_2023-08-02': {\n                'is_task': False,\n            },\n            '667252_2023-09-25': {\n                'invalid_times': [\n                    {'start_time': 4996, 'stop_time': -1, 'reason': 'auditory stimulus not presented (amplifier power issue)'}\n                ]\n            },\n        }\n        &gt;&gt;&gt; single_session_kwargs = get_session_kwargs(\"DRpilot_670248_20230802\")\n        &gt;&gt;&gt; assert isinstance(single_session_kwargs, dict)\n        &gt;&gt;&gt; single_session_kwargs                                           # doctest: +SKIP\n        {'is_task': False}\n    \"\"\"\n    if session:\n        try:\n            return get_session_info(session).session_kwargs\n        except exceptions.NoSessionInfo:\n            return {}\n    return {session.id: session.session_kwargs for session in get_session_info()}\n</code></pre>"},{"location":"reference/npc_lims/paths/codeocean/#npc_lims.paths.codeocean.get_session_raw_data_asset","title":"get_session_raw_data_asset","text":"<pre><code>get_session_raw_data_asset(session: str | npc_session.SessionRecord) -&gt; DataAssetAPI\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; get_session_raw_data_asset('668759_20230711')[\"id\"]\n'83636983-f80d-42d6-a075-09b60c6abd5e'\n</code></pre> Source code in <code>npc_lims/metadata/codeocean.py</code> <pre><code>def get_session_raw_data_asset(\n    session: str | npc_session.SessionRecord,\n) -&gt; DataAssetAPI:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; get_session_raw_data_asset('668759_20230711')[\"id\"]\n        '83636983-f80d-42d6-a075-09b60c6abd5e'\n    \"\"\"\n    session = npc_session.SessionRecord(session)\n    raw_assets = tuple(\n        asset for asset in get_session_data_assets(session) if is_raw_data_asset(asset)\n    )\n\n    if not raw_assets:\n        raise ValueError(f\"Session {session} has no raw data assets\")\n\n    return get_single_data_asset(session, raw_assets, \"raw\")\n</code></pre>"},{"location":"reference/npc_lims/paths/codeocean/#npc_lims.paths.codeocean.get_session_result_data_assets","title":"get_session_result_data_assets","text":"<pre><code>get_session_result_data_assets(session: str | npc_session.SessionRecord) -&gt; tuple[DataAssetAPI, ...]\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; result_data_assets = get_session_result_data_assets('668759_20230711')\n&gt;&gt;&gt; assert len(result_data_assets) &gt; 0\n</code></pre> Source code in <code>npc_lims/metadata/codeocean.py</code> <pre><code>def get_session_result_data_assets(\n    session: str | npc_session.SessionRecord,\n) -&gt; tuple[DataAssetAPI, ...]:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; result_data_assets = get_session_result_data_assets('668759_20230711')\n        &gt;&gt;&gt; assert len(result_data_assets) &gt; 0\n    \"\"\"\n    session_data_assets = get_session_data_assets(session)\n    result_data_assets = tuple(\n        data_asset\n        for data_asset in session_data_assets\n        if data_asset[\"type\"] == \"result\"\n    )\n\n    return result_data_assets\n</code></pre>"},{"location":"reference/npc_lims/paths/codeocean/#npc_lims.paths.codeocean.get_session_sorted_data_asset","title":"get_session_sorted_data_asset","text":"<pre><code>get_session_sorted_data_asset(session: str | npc_session.SessionRecord) -&gt; DataAssetAPI\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sorted_data_asset = get_session_sorted_data_asset('668759_20230711')\n&gt;&gt;&gt; assert isinstance(sorted_data_asset, dict)\n</code></pre> Source code in <code>npc_lims/metadata/codeocean.py</code> <pre><code>def get_session_sorted_data_asset(\n    session: str | npc_session.SessionRecord,\n) -&gt; DataAssetAPI:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; sorted_data_asset = get_session_sorted_data_asset('668759_20230711')\n        &gt;&gt;&gt; assert isinstance(sorted_data_asset, dict)\n    \"\"\"\n    session_result_data_assets = get_session_data_assets(session)\n    sorted_data_assets = tuple(\n        data_asset\n        for data_asset in session_result_data_assets\n        if is_sorted_data_asset(data_asset) and data_asset[\"files\"] &gt; 2\n    )\n\n    if not sorted_data_assets:\n        raise ValueError(f\"Session {session} has no sorted data assets\")\n\n    return get_single_data_asset(session, sorted_data_assets, \"sorted\")\n</code></pre>"},{"location":"reference/npc_lims/paths/codeocean/#npc_lims.paths.codeocean.get_session_units_data_asset","title":"get_session_units_data_asset  <code>cached</code>","text":"<pre><code>get_session_units_data_asset(session_id: str | npc_session.SessionRecord) -&gt; DataAssetAPI\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; units_data_asset = get_session_units_data_asset('668759_20230711')\n&gt;&gt;&gt; assert units_data_asset is not None\n</code></pre> Source code in <code>npc_lims/metadata/codeocean.py</code> <pre><code>@functools.cache\ndef get_session_units_data_asset(\n    session_id: str | npc_session.SessionRecord,\n) -&gt; DataAssetAPI:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; units_data_asset = get_session_units_data_asset('668759_20230711')\n        &gt;&gt;&gt; assert units_data_asset is not None\n    \"\"\"\n    session = npc_session.SessionRecord(session_id)\n    session_data_assets = get_session_data_assets(session)\n    session_units_data_assets = tuple(\n        data_asset\n        for data_asset in session_data_assets\n        if \"units\" in data_asset[\"name\"] and \"peak\" not in data_asset[\"name\"]\n    )\n    session_units_data_asset = get_single_data_asset(\n        session, session_units_data_assets, \"units\"\n    )\n\n    return session_units_data_asset\n</code></pre>"},{"location":"reference/npc_lims/paths/codeocean/#npc_lims.paths.codeocean.get_session_units_spikes_with_peak_channels_data_asset","title":"get_session_units_spikes_with_peak_channels_data_asset  <code>cached</code>","text":"<pre><code>get_session_units_spikes_with_peak_channels_data_asset(session_id: str | npc_session.SessionRecord) -&gt; DataAssetAPI\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; units_peak_channel_data_asset = get_session_units_spikes_with_peak_channels_data_asset('668759_20230711')\n&gt;&gt;&gt; assert units_peak_channel_data_asset is not None\n</code></pre> Source code in <code>npc_lims/metadata/codeocean.py</code> <pre><code>@functools.cache\ndef get_session_units_spikes_with_peak_channels_data_asset(\n    session_id: str | npc_session.SessionRecord,\n) -&gt; DataAssetAPI:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; units_peak_channel_data_asset = get_session_units_spikes_with_peak_channels_data_asset('668759_20230711')\n        &gt;&gt;&gt; assert units_peak_channel_data_asset is not None\n    \"\"\"\n    session = npc_session.SessionRecord(session_id)\n    session_data_assets = get_session_data_assets(session)\n    session_units_spikes_peak_channel_data_assets = tuple(\n        data_asset\n        for data_asset in session_data_assets\n        if \"units_with_peak_channels\" in data_asset[\"name\"]\n    )\n\n    session_units_spikes_peak_channel_data_asset = get_single_data_asset(\n        session, session_units_spikes_peak_channel_data_assets, \"units\"\n    )\n\n    return session_units_spikes_peak_channel_data_asset\n</code></pre>"},{"location":"reference/npc_lims/paths/codeocean/#npc_lims.paths.codeocean.get_sessions_from_data_repo","title":"get_sessions_from_data_repo  <code>cached</code>","text":"<pre><code>get_sessions_from_data_repo(subject: int | str | None = None) -&gt; tuple[npc_session.SessionRecord, ...] | dict[npc_session.SubjectRecord, tuple[npc_session.SessionRecord, ...]]\n</code></pre> <p>Globs synced behavior data repo for sessions.</p> <p>Examples:</p> <p>get a dict of all subjects mapped to their sessions:</p> <pre><code>&gt;&gt;&gt; all_subjects_sessions = get_sessions_from_data_repo()\n&gt;&gt;&gt; len(all_subjects_sessions)\n93\n</code></pre> <pre><code>&gt;&gt;&gt; len(tuple(all_subjects_sessions.values())[0])\n45\n</code></pre> <p>get a specific subject's sessions as a sequence:</p> <pre><code>&gt;&gt;&gt; get_sessions_from_data_repo(366122)[0]\n'366122_2023-01-30'\n</code></pre> Source code in <code>npc_lims/status/behavior_sessions.py</code> <pre><code>@functools.cache\ndef get_sessions_from_data_repo(\n    subject: int | str | None = None,\n) -&gt; (\n    tuple[npc_session.SessionRecord, ...]\n    | dict[npc_session.SubjectRecord, tuple[npc_session.SessionRecord, ...]]\n):\n    \"\"\"\n    Globs synced behavior data repo for sessions.\n\n    Examples:\n        get a dict of all subjects mapped to their sessions:\n        &gt;&gt;&gt; all_subjects_sessions = get_sessions_from_data_repo()\n        &gt;&gt;&gt; len(all_subjects_sessions)                      # doctest: +SKIP\n        93\n\n        &gt;&gt;&gt; len(tuple(all_subjects_sessions.values())[0])   # doctest: +SKIP\n        45\n\n        get a specific subject's sessions as a sequence:\n        &gt;&gt;&gt; get_sessions_from_data_repo(366122)[0]\n        '366122_2023-01-30'\n\n    \"\"\"\n\n    def _get_sessions_from_subfolders(\n        folder: upath.UPath,\n    ) -&gt; tuple[npc_session.SessionRecord, ...]:\n        sessions = set()\n        for path in folder.iterdir():\n            try:\n                session = npc_session.SessionRecord(path.as_posix())\n            except ValueError:\n                continue\n            sessions.add(session)\n        return tuple(sorted(sessions))\n\n    if subject is not None:\n        return _get_sessions_from_subfolders(\n            get_subject_folders_from_data_repo(subject)\n        )\n\n    subject_to_sessions: dict[\n        npc_session.SubjectRecord, tuple[npc_session.SessionRecord, ...]\n    ] = {}\n    for _subject, folder in get_subject_folders_from_data_repo().items():\n        subject_to_sessions.setdefault(_subject, _get_sessions_from_subfolders(folder))\n    return subject_to_sessions\n</code></pre>"},{"location":"reference/npc_lims/paths/codeocean/#npc_lims.paths.codeocean.get_sessions_from_training_db","title":"get_sessions_from_training_db  <code>cached</code>","text":"<pre><code>get_sessions_from_training_db() -&gt; dict[int, tuple[dict[str, Any], ...]]\n</code></pre> <p>Includes NSB sessions.</p> <p>{subject: ({spreadsheet row}, ... )}</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sessions = get_sessions_from_training_db()\n&gt;&gt;&gt; assert len(sessions) &gt; 0\n&gt;&gt;&gt; sessions[659250][0]\n{'ID': 1, 'start_time': '2023-03-07 12:56:27', 'rig_name': 'B2', 'task_version': 'stage 0 moving', 'hits': '0', 'dprime_same_modality': '', 'dprime_other_modality_go_stim': '', 'pass': '1', 'ignore': '0'}\n</code></pre> Source code in <code>npc_lims/status/behavior_sessions.py</code> <pre><code>@functools.cache\ndef get_sessions_from_training_db() -&gt; dict[int, tuple[dict[str, Any], ...]]:\n    \"\"\"\n    Includes NSB sessions.\n\n    {subject: ({spreadsheet row}, ... )}\n\n    Examples:\n        &gt;&gt;&gt; sessions = get_sessions_from_training_db()\n        &gt;&gt;&gt; assert len(sessions) &gt; 0\n        &gt;&gt;&gt; sessions[659250][0]                         # doctest: +SKIP\n        {'ID': 1, 'start_time': '2023-03-07 12:56:27', 'rig_name': 'B2', 'task_version': 'stage 0 moving', 'hits': '0', 'dprime_same_modality': '', 'dprime_other_modality_go_stim': '', 'pass': '1', 'ignore': '0'}\n    \"\"\"\n    sessions: dict[int, tuple[dict[str, Any], ...]] = {}\n    for nsb in (False, True):\n        db = npc_lims.metadata.get_training_db(nsb)\n        ## using tables other than `all_mice`\n        subjects = tuple(\n            npc_session.SubjectRecord(table[\"name\"])\n            for table in db.execute(\n                \"SELECT name FROM sqlite_master WHERE type='table'\"\n            ).fetchall()\n            if table[\"name\"] not in (\"sqlite_sequence\", \"all_mice\")\n        )\n        for subject in subjects:\n            sessions[subject] = tuple(\n                row | {\"nsb\": nsb}\n                for row in db.execute(\n                    f\"SELECT * FROM '{subject}' WHERE ignore != 1\"\n                ).fetchall()\n            )\n    return sessions\n</code></pre>"},{"location":"reference/npc_lims/paths/codeocean/#npc_lims.paths.codeocean.get_sessions_with_data_assets","title":"get_sessions_with_data_assets  <code>cached</code>","text":"<pre><code>get_sessions_with_data_assets(subject: str | int) -&gt; tuple[npc_session.SessionRecord, ...]\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sessions = get_sessions_with_data_assets(668759)\n&gt;&gt;&gt; assert len(sessions) &gt; 0\n</code></pre> Source code in <code>npc_lims/metadata/codeocean.py</code> <pre><code>@functools.cache\ndef get_sessions_with_data_assets(\n    subject: str | int,\n) -&gt; tuple[npc_session.SessionRecord, ...]:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; sessions = get_sessions_with_data_assets(668759)\n        &gt;&gt;&gt; assert len(sessions) &gt; 0\n    \"\"\"\n    assets = get_subject_data_assets(subject)\n    sessions = set()\n    for asset in assets:\n        try:\n            session = npc_session.SessionRecord(asset[\"name\"])\n        except ValueError:\n            continue\n        sessions.add(session)\n    return tuple(sessions)\n</code></pre>"},{"location":"reference/npc_lims/paths/codeocean/#npc_lims.paths.codeocean.get_settings_xml_path_from_s3","title":"get_settings_xml_path_from_s3  <code>cached</code>","text":"<pre><code>get_settings_xml_path_from_s3(session: str | npc_session.SessionRecord) -&gt; upath.UPath\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; settings_xml_path = get_settings_xml_path_from_s3('670180-2023-07-26')\n&gt;&gt;&gt; assert settings_xml_path.exists()\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_settings_xml_path_from_s3(\n    session: str | npc_session.SessionRecord,\n) -&gt; upath.UPath:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; settings_xml_path = get_settings_xml_path_from_s3('670180-2023-07-26')\n        &gt;&gt;&gt; assert settings_xml_path.exists()\n    \"\"\"\n    raw_data_paths_s3 = get_raw_data_paths_from_s3(session)\n\n    directories = (\n        raw_path\n        for raw_path in raw_data_paths_s3\n        if raw_path.is_dir() and \".zarr\" not in raw_path.suffix\n    )\n    return tuple(raw_path / \"settings.xml\" for raw_path in directories)[0]\n</code></pre>"},{"location":"reference/npc_lims/paths/codeocean/#npc_lims.paths.codeocean.get_sorted_data_paths_from_s3","title":"get_sorted_data_paths_from_s3  <code>cached</code>","text":"<pre><code>get_sorted_data_paths_from_s3(session: str | npc_session.SessionRecord | None = None, sorted_data_asset_id: str | None = None) -&gt; tuple[upath.UPath, ...]\n</code></pre> <p>Gets the top level files/folders for the sorted data    </p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sorted_data_s3_paths = get_sorted_data_paths_from_s3('668759_20230711')\n&gt;&gt;&gt; assert len(sorted_data_s3_paths) &gt; 0\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_sorted_data_paths_from_s3(\n    session: str | npc_session.SessionRecord | None = None,\n    sorted_data_asset_id: str | None = None,\n) -&gt; tuple[upath.UPath, ...]:\n    \"\"\"\n    Gets the top level files/folders for the sorted data    \n\n    Examples:\n        &gt;&gt;&gt; sorted_data_s3_paths = get_sorted_data_paths_from_s3('668759_20230711')\n        &gt;&gt;&gt; assert len(sorted_data_s3_paths) &gt; 0\n    \"\"\"\n    if sorted_data_asset_id is not None:\n        sorted_data_asset = codeocean.get_data_asset(sorted_data_asset_id)\n    elif session is not None:\n        sorted_data_asset = codeocean.get_session_sorted_data_asset(session)\n    else:\n        raise ValueError(\"Must provide either session or sorted_data_asset_id\")\n    return tuple(get_data_asset_s3_path(sorted_data_asset).iterdir())\n</code></pre>"},{"location":"reference/npc_lims/paths/codeocean/#npc_lims.paths.codeocean.get_sorted_precurated_paths_from_s3","title":"get_sorted_precurated_paths_from_s3  <code>cached</code>","text":"<pre><code>get_sorted_precurated_paths_from_s3(session: str | npc_session.SessionRecord) -&gt; tuple[upath.UPath, ...]\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sorted_precurated_paths = get_sorted_precurated_paths_from_s3('662892_2023-08-21')\n&gt;&gt;&gt; assert len(sorted_precurated_paths) &gt; 0\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_sorted_precurated_paths_from_s3(\n    session: str | npc_session.SessionRecord,\n) -&gt; tuple[upath.UPath, ...]:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; sorted_precurated_paths = get_sorted_precurated_paths_from_s3('662892_2023-08-21')\n        &gt;&gt;&gt; assert len(sorted_precurated_paths) &gt; 0\n    \"\"\"\n    sorted_paths = get_sorted_data_paths_from_s3(session)\n    sorted_precurated_dirs = tuple(\n        next(\n            path for path in sorted_paths if \"sorting_precurated\" in str(path)\n        ).iterdir()\n    )\n\n    return sorted_precurated_dirs\n</code></pre>"},{"location":"reference/npc_lims/paths/codeocean/#npc_lims.paths.codeocean.get_spike_sorted_paths_from_s3","title":"get_spike_sorted_paths_from_s3  <code>cached</code>","text":"<pre><code>get_spike_sorted_paths_from_s3(session: str | npc_session.SessionRecord) -&gt; tuple[upath.UPath, ...]\n</code></pre> <p>spike_sorted_paths = get_spike_sorted_paths_from_s3('662892_20230821') assert spike_sorted_paths[0].exists()</p> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_spike_sorted_paths_from_s3(\n    session: str | npc_session.SessionRecord,\n) -&gt; tuple[upath.UPath, ...]:\n    \"\"\"\n        &gt;&gt;&gt; spike_sorted_paths = get_spike_sorted_paths_from_s3('662892_20230821')\n        &gt;&gt;&gt; assert spike_sorted_paths[0].exists()\n    \"\"\"\n    sorted_data_paths = get_sorted_data_paths_from_s3(session)\n    return tuple(\n        next(path for path in sorted_data_paths if \"spike\" in str(path)).iterdir()\n    )\n</code></pre>"},{"location":"reference/npc_lims/paths/codeocean/#npc_lims.paths.codeocean.get_spike_sorting_device_path_from_s3","title":"get_spike_sorting_device_path_from_s3  <code>cached</code>","text":"<pre><code>get_spike_sorting_device_path_from_s3(session: str | npc_session.SessionRecord, device_name: str) -&gt; upath.UPath\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; get_spike_sorting_device_path_from_s3('662892_20230821', 'ProbeA')\nS3Path('s3://codeocean-s3datasetsbucket-1u41qdg42ur9/d527db85-39b7-4c4f-a465-9ca499b0ca47/spikesorted/experiment1_Record Node 102#Neuropix-PXI-100.ProbeA-AP_recording1/sorting_cached.npz')\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_spike_sorting_device_path_from_s3(\n    session: str | npc_session.SessionRecord, device_name: str\n) -&gt; upath.UPath:\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; get_spike_sorting_device_path_from_s3('662892_20230821', 'ProbeA')\n        S3Path('s3://codeocean-s3datasetsbucket-1u41qdg42ur9/d527db85-39b7-4c4f-a465-9ca499b0ca47/spikesorted/experiment1_Record Node 102#Neuropix-PXI-100.ProbeA-AP_recording1/sorting_cached.npz')\n    \"\"\"\n    spike_sorted_paths = get_spike_sorted_paths_from_s3(session)\n    spike_probe_paths = next(\n        path for path in spike_sorted_paths if device_name in str(path)\n    ).iterdir()\n    sorting_cached_path = next(\n        path for path in spike_probe_paths if \"sorting_cached\" in str(path)\n    )\n\n    return sorting_cached_path\n</code></pre>"},{"location":"reference/npc_lims/paths/codeocean/#npc_lims.paths.codeocean.get_spike_times_codeocean_kilosort_path_from_s3","title":"get_spike_times_codeocean_kilosort_path_from_s3  <code>cached</code>","text":"<pre><code>get_spike_times_codeocean_kilosort_path_from_s3(session: str | npc_session.SessionRecord) -&gt; upath.UPath\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; path = get_spike_times_codeocean_kilosort_path_from_s3('668759_20230711')\n&gt;&gt;&gt; assert path\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_spike_times_codeocean_kilosort_path_from_s3(\n    session: str | npc_session.SessionRecord,\n) -&gt; upath.UPath:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; path = get_spike_times_codeocean_kilosort_path_from_s3('668759_20230711')\n        &gt;&gt;&gt; assert path\n    \"\"\"\n    files = get_units_spikes_codeocean_kilosort_top_level_files(session)\n    spike_times_path = next(path for path in files if \"spike\" in str(path))\n\n    return spike_times_path\n</code></pre>"},{"location":"reference/npc_lims/paths/codeocean/#npc_lims.paths.codeocean.get_spikesorted_cache_paths_from_s3","title":"get_spikesorted_cache_paths_from_s3  <code>cached</code>","text":"<pre><code>get_spikesorted_cache_paths_from_s3(session: str | npc_session.SessionRecord) -&gt; tuple[upath.UPath, ...]\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; spike_sorted_cache_paths = get_spikesorted_cache_paths_from_s3('662892_20230821')\n&gt;&gt;&gt; assert len(spike_sorted_cache_paths) &gt; 0\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_spikesorted_cache_paths_from_s3(\n    session: str | npc_session.SessionRecord,\n) -&gt; tuple[upath.UPath, ...]:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; spike_sorted_cache_paths = get_spikesorted_cache_paths_from_s3('662892_20230821')\n        &gt;&gt;&gt; assert len(spike_sorted_cache_paths) &gt; 0\n    \"\"\"\n    spike_sorted_paths = get_spike_sorted_paths_from_s3(session)\n    spike_sorted_cache_files = tuple(\n        next(path.glob(\"sorting_cached.npz\")) for path in spike_sorted_paths\n    )\n\n    return spike_sorted_cache_files\n</code></pre>"},{"location":"reference/npc_lims/paths/codeocean/#npc_lims.paths.codeocean.get_subject_data_assets","title":"get_subject_data_assets  <code>cached</code>","text":"<pre><code>get_subject_data_assets(subject: str | int) -&gt; tuple[DataAssetAPI, ...]\n</code></pre> <p>All assets associated with a subject ID.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; assets = get_subject_data_assets(668759)\n&gt;&gt;&gt; assert len(assets) &gt; 0\n</code></pre> Source code in <code>npc_lims/metadata/codeocean.py</code> <pre><code>@functools.cache\ndef get_subject_data_assets(subject: str | int) -&gt; tuple[DataAssetAPI, ...]:\n    \"\"\"\n    All assets associated with a subject ID.\n\n    Examples:\n        &gt;&gt;&gt; assets = get_subject_data_assets(668759)\n        &gt;&gt;&gt; assert len(assets) &gt; 0\n    \"\"\"\n    response = get_codeocean_client().search_all_data_assets(\n        query=f\"subject id: {npc_session.SubjectRecord(subject)}\"\n    )\n    response.raise_for_status()\n    return response.json()[\"results\"]\n</code></pre>"},{"location":"reference/npc_lims/paths/codeocean/#npc_lims.paths.codeocean.get_subject_folders_from_data_repo","title":"get_subject_folders_from_data_repo  <code>cached</code>","text":"<pre><code>get_subject_folders_from_data_repo(subject: int | str | None = None) -&gt; dict[npc_session.SubjectRecord, upath.UPath] | upath.UPath\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; all_subjects = get_subject_folders_from_data_repo()\n&gt;&gt;&gt; len(all_subjects)\n93\n</code></pre> <pre><code>&gt;&gt;&gt; get_subject_folders_from_data_repo(366122).name\n'366122'\n</code></pre> Source code in <code>npc_lims/status/behavior_sessions.py</code> <pre><code>@functools.cache\ndef get_subject_folders_from_data_repo(\n    subject: int | str | None = None,\n) -&gt; dict[npc_session.SubjectRecord, upath.UPath] | upath.UPath:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; all_subjects = get_subject_folders_from_data_repo()\n        &gt;&gt;&gt; len(all_subjects)                               # doctest: +SKIP\n        93\n\n        &gt;&gt;&gt; get_subject_folders_from_data_repo(366122).name\n        '366122'\n    \"\"\"\n    if subject is not None:\n        if not (\n            path := npc_lims.paths.DR_DATA_REPO\n            / str(npc_session.SubjectRecord(subject))\n        ).exists():\n            raise FileNotFoundError(f\"{path=} does not exist\")\n        return path\n    subject_to_folder: dict[npc_session.SubjectRecord, upath.UPath] = {}\n    for path in npc_lims.paths.DR_DATA_REPO.iterdir():\n        if path.is_file():\n            continue\n        if any(invalid_key in path.name for invalid_key in INVALID_SUBJECT_KEYS):\n            continue\n        try:\n            _subject = npc_session.SubjectRecord(path.name)\n        except ValueError:\n            continue\n        if _subject in subject_to_folder:\n            raise ValueError(f\"Duplicate path for {_subject=}: {path}\")\n        subject_to_folder[_subject] = path\n    return subject_to_folder\n</code></pre>"},{"location":"reference/npc_lims/paths/codeocean/#npc_lims.paths.codeocean.get_subjects_from_training_db","title":"get_subjects_from_training_db","text":"<pre><code>get_subjects_from_training_db(nsb: bool = False) -&gt; dict[npc_session.SubjectRecord, dict[str, Any]]\n</code></pre> <p>Dynamic Routing training spreadsheet info.</p> <p>{subject: ({spreadsheet row}, ... )}</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; subjects = get_subjects_from_training_db(nsb=True)\n&gt;&gt;&gt; assert len(subjects) &gt; 0\n&gt;&gt;&gt; subjects[659250]\n{'ID': 50, 'mouse_id': '659250', 'alive': 'False', 'genotype': 'PV Cre x Ai32', 'sex': 'male', 'birthdate': '2022-11-21 00:00:00', 'surgery_week': '2023-01-30 00:00:00', 'craniotomy': 'True', 'trainer': 'Sam', 'regimen': '7', 'wheel_fixed': 'False', 'timeouts': 'True', 'next_task_version': 'dead'}\n</code></pre> Source code in <code>npc_lims/status/behavior_sessions.py</code> <pre><code>def get_subjects_from_training_db(\n    nsb: bool = False,\n) -&gt; dict[npc_session.SubjectRecord, dict[str, Any]]:\n    \"\"\"\n    Dynamic Routing training spreadsheet info.\n\n    {subject: ({spreadsheet row}, ... )}\n\n    Examples:\n        &gt;&gt;&gt; subjects = get_subjects_from_training_db(nsb=True)\n        &gt;&gt;&gt; assert len(subjects) &gt; 0\n        &gt;&gt;&gt; subjects[659250]                       # doctest: +SKIP\n        {'ID': 50, 'mouse_id': '659250', 'alive': 'False', 'genotype': 'PV Cre x Ai32', 'sex': 'male', 'birthdate': '2022-11-21 00:00:00', 'surgery_week': '2023-01-30 00:00:00', 'craniotomy': 'True', 'trainer': 'Sam', 'regimen': '7', 'wheel_fixed': 'False', 'timeouts': 'True', 'next_task_version': 'dead'}\n    \"\"\"\n    db = npc_lims.metadata.get_training_db(nsb)\n\n    # use entries in `all_mice` table\n    subjects = tuple(\n        {\n            npc_session.SubjectRecord(result[\"mouse_id\"])\n            for result in db.execute(\"SELECT * FROM all_mice\").fetchall()\n        }\n    )\n\n    return {\n        subject: db.execute(\n            \"SELECT * FROM 'all_mice' WHERE mouse_id=?\", (subject,)\n        ).fetchone()\n        for subject in subjects\n    }\n</code></pre>"},{"location":"reference/npc_lims/paths/codeocean/#npc_lims.paths.codeocean.get_surface_channel_root","title":"get_surface_channel_root","text":"<pre><code>get_surface_channel_root(session: str | npc_session.SessionRecord) -&gt; upath.UPath\n</code></pre> <p>Reconstruct path to surface channel data in bucket (e.g. on s3) using data-asset info from Code Ocean.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; get_surface_channel_root('660023_20230808')\nS3Path('s3://aind-ephys-data/ecephys_660023_2023-08-08_15-11-14')\n&gt;&gt;&gt; assert get_surface_channel_root('660023_20230808') != get_raw_data_root('660023_20230808')\n&gt;&gt;&gt; get_surface_channel_root('649943_20230216')\nTraceback (most recent call last):\n...\nFileNotFoundError: 649943_20230216 has no surface channel data assets\n</code></pre> Source code in <code>npc_lims/metadata/codeocean.py</code> <pre><code>def get_surface_channel_root(session: str | npc_session.SessionRecord) -&gt; upath.UPath:\n    \"\"\"Reconstruct path to surface channel data in bucket (e.g. on s3) using data-asset\n    info from Code Ocean.\n\n    Examples:\n        &gt;&gt;&gt; get_surface_channel_root('660023_20230808')\n        S3Path('s3://aind-ephys-data/ecephys_660023_2023-08-08_15-11-14')\n        &gt;&gt;&gt; assert get_surface_channel_root('660023_20230808') != get_raw_data_root('660023_20230808')\n        &gt;&gt;&gt; get_surface_channel_root('649943_20230216')\n        Traceback (most recent call last):\n        ...\n        FileNotFoundError: 649943_20230216 has no surface channel data assets\n    \"\"\"\n    session = npc_session.SessionRecord(session)\n    raw_assets = tuple(\n        asset for asset in get_session_data_assets(session) if is_raw_data_asset(asset)\n    )\n    try:\n        raw_asset = get_single_data_asset(session.with_idx(1), raw_assets, \"raw\")\n    except SessionIndexError:\n        raise FileNotFoundError(\n            f\"{session} has no surface channel data assets\"\n        ) from None\n    return get_path_from_data_asset(raw_asset)\n</code></pre>"},{"location":"reference/npc_lims/paths/codeocean/#npc_lims.paths.codeocean.get_template_metrics_paths_from_s3","title":"get_template_metrics_paths_from_s3  <code>cached</code>","text":"<pre><code>get_template_metrics_paths_from_s3(session: str | npc_session.SessionRecord) -&gt; tuple[upath.UPath, ...]\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; template_metrics_paths = get_template_metrics_paths_from_s3('662892_2023-08-21')\n&gt;&gt;&gt; assert len(template_metrics_paths) &gt; 0\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_template_metrics_paths_from_s3(\n    session: str | npc_session.SessionRecord,\n) -&gt; tuple[upath.UPath, ...]:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; template_metrics_paths = get_template_metrics_paths_from_s3('662892_2023-08-21')\n        &gt;&gt;&gt; assert len(template_metrics_paths) &gt; 0\n    \"\"\"\n    sorted_paths = get_sorted_data_paths_from_s3(session)\n    postprocessed_files = next(\n        path for path in sorted_paths if \"postprocessed\" in str(path)\n    ).iterdir()\n    template_metrics_paths = tuple(\n        next(path.glob(\"template_metrics/metrics.csv\")) for path in postprocessed_files\n    )\n\n    return template_metrics_paths\n</code></pre>"},{"location":"reference/npc_lims/paths/codeocean/#npc_lims.paths.codeocean.get_tissuecyte_annotation_files_from_s3","title":"get_tissuecyte_annotation_files_from_s3  <code>cached</code>","text":"<pre><code>get_tissuecyte_annotation_files_from_s3(session: str | npc_session.SessionRecord) -&gt; tuple[upath.UPath, ...]\n</code></pre> <p>For each probe inserted, get a csv file containing CCF coordinates for each electrode (channel) on the probe.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; electrode_files = get_tissuecyte_annotation_files_from_s3('626791_2022-08-16')\n&gt;&gt;&gt; assert len(electrode_files) &gt; 0\n&gt;&gt;&gt; electrode_files[0].name\n'Probe_A2_channels_626791_warped_processed.csv'\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_tissuecyte_annotation_files_from_s3(\n    session: str | npc_session.SessionRecord,\n) -&gt; tuple[upath.UPath, ...]:\n    \"\"\"For each probe inserted, get a csv file containing CCF coordinates for each\n    electrode (channel) on the probe.\n\n    Examples:\n        &gt;&gt;&gt; electrode_files = get_tissuecyte_annotation_files_from_s3('626791_2022-08-16')\n        &gt;&gt;&gt; assert len(electrode_files) &gt; 0\n        &gt;&gt;&gt; electrode_files[0].name\n        'Probe_A2_channels_626791_warped_processed.csv'\n    \"\"\"\n    session = npc_session.SessionRecord(session)\n    day = tracked_sessions.get_session_info(session).experiment_day\n    subject_electrode_network_path = TISSUECYTE_REPO / str(session.subject.id)\n\n    if not subject_electrode_network_path.exists():\n        raise FileNotFoundError(\n            f\"CCF annotations for {session} have not been uploaded to s3\"\n        )\n\n    electrode_files = tuple(\n        subject_electrode_network_path.glob(\n            f\"Probe_*{day}_channels_{str(session.subject.id)}_warped_processed.csv\"\n        )\n    )\n    if not electrode_files:\n        raise FileNotFoundError(\n            f\"{subject_electrode_network_path} exists, but no CCF annotation files found matching {day} and {session.subject.id} - check session day\"\n        )\n\n    return electrode_files\n</code></pre>"},{"location":"reference/npc_lims/paths/codeocean/#npc_lims.paths.codeocean.get_training_db","title":"get_training_db  <code>cached</code>","text":"<pre><code>get_training_db(nsb: bool = False) -&gt; sqlite3.Connection\n</code></pre> <p>Download db to tempdir, open connection, return connection.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; assert get_training_db()\n</code></pre> Source code in <code>npc_lims/metadata/spreadsheets.py</code> <pre><code>@functools.cache\ndef get_training_db(nsb: bool = False) -&gt; sqlite3.Connection:\n    \"\"\"\n    Download db to tempdir, open connection, return connection.\n\n    Examples:\n        &gt;&gt;&gt; assert get_training_db()\n    \"\"\"\n    db_path = upath.UPath(tempfile.mkstemp(suffix=\".db\")[1])\n    s3_path = next(\n        path for path in get_training_sqlite_paths() if (\"NSB\" in path.name) == nsb\n    )\n    db_path.write_bytes(s3_path.read_bytes())\n    con = sqlite3.connect(db_path)\n\n    def dict_factory(cursor, row):\n        d = {}\n        for idx, col in enumerate(cursor.description):\n            d[col[0]] = row[idx]\n        return d\n\n    con.row_factory = dict_factory\n    return con\n</code></pre>"},{"location":"reference/npc_lims/paths/codeocean/#npc_lims.paths.codeocean.get_training_spreadsheet_paths","title":"get_training_spreadsheet_paths","text":"<pre><code>get_training_spreadsheet_paths() -&gt; tuple[upath.UPath, ...]\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; assert len(get_training_spreadsheet_paths()) &gt; 0\n</code></pre> Source code in <code>npc_lims/metadata/spreadsheets.py</code> <pre><code>def get_training_spreadsheet_paths() -&gt; tuple[upath.UPath, ...]:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; assert len(get_training_spreadsheet_paths()) &gt; 0\n    \"\"\"\n    return tuple(npc_lims.DR_DATA_REPO.parent.glob(\"DynamicRoutingTraining*.xlsx\"))\n</code></pre>"},{"location":"reference/npc_lims/paths/codeocean/#npc_lims.paths.codeocean.get_training_sqlite_paths","title":"get_training_sqlite_paths","text":"<pre><code>get_training_sqlite_paths() -&gt; tuple[upath.UPath, ...]\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; assert len(get_training_sqlite_paths()) == len(get_training_spreadsheet_paths())\n</code></pre> Source code in <code>npc_lims/metadata/spreadsheets.py</code> <pre><code>def get_training_sqlite_paths() -&gt; tuple[upath.UPath, ...]:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; assert len(get_training_sqlite_paths()) == len(get_training_spreadsheet_paths())\n    \"\"\"\n    return tuple(\n        path.with_suffix(\".sqlite\") for path in get_training_spreadsheet_paths()\n    )\n</code></pre>"},{"location":"reference/npc_lims/paths/codeocean/#npc_lims.paths.codeocean.get_unit_locations_paths_from_s3","title":"get_unit_locations_paths_from_s3  <code>cached</code>","text":"<pre><code>get_unit_locations_paths_from_s3(session: str | npc_session.SessionRecord) -&gt; tuple[upath.UPath, ...]\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; unit_locations_paths = get_unit_locations_paths_from_s3('662892_2023-08-21')\n&gt;&gt;&gt; assert len(unit_locations_paths) &gt; 0\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_unit_locations_paths_from_s3(\n    session: str | npc_session.SessionRecord,\n) -&gt; tuple[upath.UPath, ...]:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; unit_locations_paths = get_unit_locations_paths_from_s3('662892_2023-08-21')\n        &gt;&gt;&gt; assert len(unit_locations_paths) &gt; 0\n    \"\"\"\n    sorted_paths = get_sorted_data_paths_from_s3(session)\n    postprocessed_files = next(\n        path for path in sorted_paths if \"postprocessed\" in str(path)\n    ).iterdir()\n    unit_locations_paths = tuple(\n        next(path.glob(\"unit_locations/unit_locations.npy\"))\n        for path in postprocessed_files\n    )\n\n    return unit_locations_paths\n</code></pre>"},{"location":"reference/npc_lims/paths/codeocean/#npc_lims.paths.codeocean.get_units_codeoean_kilosort_path_from_s3","title":"get_units_codeoean_kilosort_path_from_s3  <code>cached</code>","text":"<pre><code>get_units_codeoean_kilosort_path_from_s3(session: str | npc_session.SessionRecord) -&gt; upath.UPath\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; path = get_units_codeoean_kilosort_path_from_s3('668759_20230711')\n&gt;&gt;&gt; assert path\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_units_codeoean_kilosort_path_from_s3(\n    session: str | npc_session.SessionRecord,\n) -&gt; upath.UPath:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; path = get_units_codeoean_kilosort_path_from_s3('668759_20230711')\n        &gt;&gt;&gt; assert path\n    \"\"\"\n    files = get_units_spikes_codeocean_kilosort_top_level_files(session)\n    units_path = next(path for path in files if \"csv\" in str(path))\n\n    return units_path\n</code></pre>"},{"location":"reference/npc_lims/paths/codeocean/#npc_lims.paths.codeocean.get_units_spikes_codeocean_kilosort_top_level_files","title":"get_units_spikes_codeocean_kilosort_top_level_files  <code>cached</code>","text":"<pre><code>get_units_spikes_codeocean_kilosort_top_level_files(session: str | npc_session.SessionRecord) -&gt; tuple[upath.UPath, ...]\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; paths = get_units_spikes_codeocean_kilosort_top_level_files('668759_20230711')\n&gt;&gt;&gt; assert paths\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_units_spikes_codeocean_kilosort_top_level_files(\n    session: str | npc_session.SessionRecord,\n) -&gt; tuple[upath.UPath, ...]:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; paths = get_units_spikes_codeocean_kilosort_top_level_files('668759_20230711')\n        &gt;&gt;&gt; assert paths\n    \"\"\"\n    units_spikes_data_asset = (\n        codeocean.get_session_units_spikes_with_peak_channels_data_asset(session)\n    )\n\n    units_directory = next(\n        unit_path\n        for unit_path in get_data_asset_s3_path(units_spikes_data_asset).iterdir()\n        if unit_path.is_dir()\n    )\n\n    return tuple(units_directory.iterdir())\n</code></pre>"},{"location":"reference/npc_lims/paths/codeocean/#npc_lims.paths.codeocean.is_raw_data_asset","title":"is_raw_data_asset","text":"<pre><code>is_raw_data_asset(asset: str | DataAssetAPI) -&gt; bool\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; is_raw_data_asset('83636983-f80d-42d6-a075-09b60c6abd5e')\nTrue\n&gt;&gt;&gt; is_raw_data_asset('173e2fdc-0ca3-4a4e-9886-b74207a91a9a')\nFalse\n</code></pre> Source code in <code>npc_lims/metadata/codeocean.py</code> <pre><code>def is_raw_data_asset(asset: str | DataAssetAPI) -&gt; bool:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; is_raw_data_asset('83636983-f80d-42d6-a075-09b60c6abd5e')\n        True\n        &gt;&gt;&gt; is_raw_data_asset('173e2fdc-0ca3-4a4e-9886-b74207a91a9a')\n        False\n    \"\"\"\n    asset = get_data_asset(asset)\n    if is_sorted_data_asset(asset):\n        return False\n    return asset.get(\"custom_metadata\", {}).get(\n        \"data level\"\n    ) == \"raw data\" or \"raw\" in asset.get(\"tags\", [])\n</code></pre>"},{"location":"reference/npc_lims/paths/codeocean/#npc_lims.paths.codeocean.is_sorted_data_asset","title":"is_sorted_data_asset","text":"<pre><code>is_sorted_data_asset(asset: str | DataAssetAPI) -&gt; bool\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; is_sorted_data_asset('173e2fdc-0ca3-4a4e-9886-b74207a91a9a')\nTrue\n&gt;&gt;&gt; is_sorted_data_asset('83636983-f80d-42d6-a075-09b60c6abd5e')\nFalse\n</code></pre> Source code in <code>npc_lims/metadata/codeocean.py</code> <pre><code>def is_sorted_data_asset(asset: str | DataAssetAPI) -&gt; bool:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; is_sorted_data_asset('173e2fdc-0ca3-4a4e-9886-b74207a91a9a')\n        True\n        &gt;&gt;&gt; is_sorted_data_asset('83636983-f80d-42d6-a075-09b60c6abd5e')\n        False\n    \"\"\"\n    asset = get_data_asset(asset)\n    if \"ecephys\" not in asset[\"name\"]:\n        return False\n    return \"sorted\" in asset[\"name\"]\n</code></pre>"},{"location":"reference/npc_lims/paths/codeocean/#npc_lims.paths.codeocean.update_training_dbs","title":"update_training_dbs","text":"<pre><code>update_training_dbs() -&gt; None\n</code></pre> <p>Read spreadsheets from the data repo and write them to corresponding databases, currently sqlite files in the same directory.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; update_training_dbs()\n</code></pre> Source code in <code>npc_lims/metadata/spreadsheets.py</code> <pre><code>def update_training_dbs() -&gt; None:\n    \"\"\"\n    Read spreadsheets from the data repo and write them to corresponding\n    databases, currently sqlite files in the same directory.\n\n    Examples:\n        &gt;&gt;&gt; update_training_dbs()\n    \"\"\"\n    for spreadsheet, sqlite in zip(\n        get_training_spreadsheet_paths(), get_training_sqlite_paths()\n    ):\n        excel_to_sqlite(spreadsheet, sqlite)\n</code></pre>"},{"location":"reference/npc_lims/paths/s3/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> s3","text":""},{"location":"reference/npc_lims/paths/s3/#npc_lims.paths.s3","title":"s3","text":""},{"location":"reference/npc_lims/paths/s3/#npc_lims.paths.s3.get_data_asset_s3_path","title":"get_data_asset_s3_path","text":"<pre><code>get_data_asset_s3_path(asset_id: str | codeocean.DataAssetAPI) -&gt; upath.UPath\n</code></pre> <p>Path on s3 that contains actual data for CodeOcean data asset.</p> <ul> <li>asset <code>id</code> is a UUID</li> <li>accept anything with an \"id\" attribute or key, or a string Assumes that the data asset has data on s3, which may not be true, and we can't tell from asset info.</li> </ul> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>def get_data_asset_s3_path(asset_id: str | codeocean.DataAssetAPI) -&gt; upath.UPath:\n    \"\"\"Path on s3 that contains actual data for CodeOcean data asset.\n\n    - asset `id` is a UUID\n    - accept anything with an \"id\" attribute or key, or a string\n    Assumes that the data asset has data on s3, which may not be true, and we can't tell from asset info.\n    \"\"\"\n    bucket = CODE_OCEAN_DATA_BUCKET\n    with contextlib.suppress(AttributeError, KeyError):\n        bucket = upath.UPath(upath.UPath(f's3://{asset_id[\"sourceBucket\"]}'))  # type: ignore[index]\n    with contextlib.suppress(AttributeError, KeyError):\n        return bucket / asset_id.get(\"id\")  # type: ignore[union-attr, operator]\n    with contextlib.suppress(AttributeError):\n        return bucket / asset_id.id  # type: ignore[union-attr]\n    return bucket / str(asset_id)\n</code></pre>"},{"location":"reference/npc_lims/paths/s3/#npc_lims.paths.s3.get_h5_sync_from_s3","title":"get_h5_sync_from_s3  <code>cached</code>","text":"<pre><code>get_h5_sync_from_s3(session: str | npc_session.SessionRecord) -&gt; upath.UPath\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; get_h5_sync_from_s3('662892_20230821')\nS3Path('s3://aind-ephys-data/ecephys_662892_2023-08-21_12-43-45/behavior/20230821T124345.h5')\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_h5_sync_from_s3(session: str | npc_session.SessionRecord) -&gt; upath.UPath:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; get_h5_sync_from_s3('662892_20230821')\n        S3Path('s3://aind-ephys-data/ecephys_662892_2023-08-21_12-43-45/behavior/20230821T124345.h5')\n    \"\"\"\n    raw_data_paths_s3 = get_raw_data_paths_from_s3(session)\n    sync_path = tuple(path for path in raw_data_paths_s3 if \".h5\" in path.suffix)\n\n    if not sync_path:\n        raise FileNotFoundError(f\"No sync file found in {raw_data_paths_s3!r}\")\n\n    return sync_path[0]\n</code></pre>"},{"location":"reference/npc_lims/paths/s3/#npc_lims.paths.s3.get_hdf5_stim_files_from_s3","title":"get_hdf5_stim_files_from_s3  <code>cached</code>","text":"<pre><code>get_hdf5_stim_files_from_s3(session: str | npc_session.SessionRecord) -&gt; tuple[StimFile, ...]\n</code></pre> <p>All the stim files for a session, from the synced <code>DynamicRoutingTask/Data</code> folder on s3.</p> <ul> <li>filters out files that are obviously wrong</li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; files = get_hdf5_stim_files_from_s3('668759_20230711')\n&gt;&gt;&gt; assert len(files) &gt; 0\n&gt;&gt;&gt; files[0].name, files[0].time\n('DynamicRouting1', '13:25:00')\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_hdf5_stim_files_from_s3(\n    session: str | npc_session.SessionRecord,\n) -&gt; tuple[StimFile, ...]:\n    \"\"\"All the stim files for a session, from the synced\n    `DynamicRoutingTask/Data` folder on s3.\n\n    - filters out files that are obviously wrong\n\n    Examples:\n        &gt;&gt;&gt; files = get_hdf5_stim_files_from_s3('668759_20230711')\n        &gt;&gt;&gt; assert len(files) &gt; 0\n        &gt;&gt;&gt; files[0].name, files[0].time\n        ('DynamicRouting1', '13:25:00')\n    \"\"\"\n    session = npc_session.SessionRecord(session)\n    root = DR_DATA_REPO / str(session.subject)\n    if not root.exists():\n        if not DR_DATA_REPO.exists():\n            raise FileNotFoundError(f\"{DR_DATA_REPO = } does not exist\")\n        raise FileNotFoundError(\n            f\"Subject {session.subject} hdf5s not on s3: may have been run by NSB, in which case they are on lims2\"\n        )\n    file_glob = f\"*_{session.subject}_{session.date.replace('-', '')}_??????.hdf5\"\n    files = [StimFile(path, session) for path in root.glob(file_glob)]\n\n    test_glob = file_glob.replace(str(session.subject), \"test\")\n    files += [\n        StimFile(path, session)\n        for path in root.glob(test_glob)\n        if str(session.subject) in path.as_posix()\n    ]\n\n    # no empty files:\n    files = [f for f in files if f.size &gt; 0]\n\n    # single behavior task:\n    behavior_tasks = tuple(f for f in files if \"DynamicRouting\" in f.name)\n    if len(behavior_tasks) &gt; 1:\n        largest = max(behavior_tasks, key=lambda f: f.size)\n        for f in behavior_tasks:\n            if f.path != largest.path:\n                files.remove(f)\n\n    return tuple(files)\n</code></pre>"},{"location":"reference/npc_lims/paths/s3/#npc_lims.paths.s3.get_mean_waveform_codeocean_kilosort_path_from_s3","title":"get_mean_waveform_codeocean_kilosort_path_from_s3  <code>cached</code>","text":"<pre><code>get_mean_waveform_codeocean_kilosort_path_from_s3(session: str | npc_session.SessionRecord) -&gt; upath.UPath\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; path = get_spike_times_codeocean_kilosort_path_from_s3('668759_20230711')\n&gt;&gt;&gt; assert path\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_mean_waveform_codeocean_kilosort_path_from_s3(\n    session: str | npc_session.SessionRecord,\n) -&gt; upath.UPath:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; path = get_spike_times_codeocean_kilosort_path_from_s3('668759_20230711')\n        &gt;&gt;&gt; assert path\n    \"\"\"\n    files = get_units_spikes_codeocean_kilosort_top_level_files(session)\n    mean_waveforms_path = next(path for path in files if \"mean\" in str(path))\n\n    return mean_waveforms_path\n</code></pre>"},{"location":"reference/npc_lims/paths/s3/#npc_lims.paths.s3.get_nwb_file_from_s3","title":"get_nwb_file_from_s3  <code>cached</code>","text":"<pre><code>get_nwb_file_from_s3(session: str | npc_session.SessionRecord) -&gt; upath.UPath\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; get_nwb_file_from_s3('636766_20230125')\nS3Path('s3://aind-scratch-data/ben.hardcastle/nwb/nwb/DRpilot_636766_20230125.nwb')\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_nwb_file_from_s3(\n    session: str | npc_session.SessionRecord,\n) -&gt; upath.UPath:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; get_nwb_file_from_s3('636766_20230125')\n        S3Path('s3://aind-scratch-data/ben.hardcastle/nwb/nwb/DRpilot_636766_20230125.nwb')\n    \"\"\"\n    session = npc_session.SessionRecord(session)\n    root = NWB_REPO\n    glob = \"*.nwb*\"\n    result = next(\n        (\n            path\n            for path in root.glob(glob)\n            if session == npc_session.SessionRecord(path.name)\n        ),\n        None,\n    )\n    if not result:\n        raise FileNotFoundError(f\"No NWB file found at {root}/{glob}\")\n    return result\n</code></pre>"},{"location":"reference/npc_lims/paths/s3/#npc_lims.paths.s3.get_quality_metrics_paths_from_s3","title":"get_quality_metrics_paths_from_s3  <code>cached</code>","text":"<pre><code>get_quality_metrics_paths_from_s3(session: str | npc_session.SessionRecord) -&gt; tuple[upath.UPath, ...]\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; quality_metrics_paths = get_quality_metrics_paths_from_s3('662892_2023-08-21')\n&gt;&gt;&gt; assert len(quality_metrics_paths) &gt; 0\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_quality_metrics_paths_from_s3(\n    session: str | npc_session.SessionRecord,\n) -&gt; tuple[upath.UPath, ...]:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; quality_metrics_paths = get_quality_metrics_paths_from_s3('662892_2023-08-21')\n        &gt;&gt;&gt; assert len(quality_metrics_paths) &gt; 0\n    \"\"\"\n    sorted_paths = get_sorted_data_paths_from_s3(session)\n    postprocessed_files = next(\n        path for path in sorted_paths if \"postprocessed\" in str(path)\n    ).iterdir()\n    quality_metrics_paths = tuple(\n        next(path.glob(\"quality_metrics/metrics.csv\")) for path in postprocessed_files\n    )\n\n    return quality_metrics_paths\n</code></pre>"},{"location":"reference/npc_lims/paths/s3/#npc_lims.paths.s3.get_raw_data_paths_from_s3","title":"get_raw_data_paths_from_s3  <code>cached</code>","text":"<pre><code>get_raw_data_paths_from_s3(session: str | npc_session.SessionRecord) -&gt; tuple[upath.UPath, ...]\n</code></pre> <p>All top-level files and folders from the <code>ephys</code> &amp; <code>behavior</code> subdirectories in a session's raw data folder on s3.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; files = get_raw_data_paths_from_s3 ('668759_20230711')\n&gt;&gt;&gt; assert len(files) &gt; 0\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_raw_data_paths_from_s3(\n    session: str | npc_session.SessionRecord,\n) -&gt; tuple[upath.UPath, ...]:\n    \"\"\"All top-level files and folders from the `ephys` &amp; `behavior`\n    subdirectories in a session's raw data folder on s3.\n\n    Examples:\n        &gt;&gt;&gt; files = get_raw_data_paths_from_s3 ('668759_20230711')\n        &gt;&gt;&gt; assert len(files) &gt; 0\n    \"\"\"\n    raw_data_root = codeocean.get_raw_data_root(session)\n    directories: Iterator[upath.UPath] = (\n        directory for directory in raw_data_root.iterdir() if directory.is_dir()\n    )\n    first_level_files_directories: Iterator = (\n        tuple(directory.iterdir()) for directory in directories\n    )\n\n    paths = functools.reduce(operator.add, first_level_files_directories)\n\n    if not paths:\n        raise FileNotFoundError(\n            f\"Raw data paths empty for {session} on s3. Looks like an upload was started, but no files have been transferred.\"\n        )\n    return paths\n</code></pre>"},{"location":"reference/npc_lims/paths/s3/#npc_lims.paths.s3.get_recording_dirs_experiment_path_from_s3","title":"get_recording_dirs_experiment_path_from_s3  <code>cached</code>","text":"<pre><code>get_recording_dirs_experiment_path_from_s3(session: str | npc_session.SessionRecord) -&gt; tuple[upath.UPath, ...]\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; recording_dirs = get_recording_dirs_experiment_path_from_s3('662892_20230821')\n&gt;&gt;&gt; assert len(recording_dirs) &gt; 0\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_recording_dirs_experiment_path_from_s3(\n    session: str | npc_session.SessionRecord,\n) -&gt; tuple[upath.UPath, ...]:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; recording_dirs = get_recording_dirs_experiment_path_from_s3('662892_20230821')\n        &gt;&gt;&gt; assert len(recording_dirs) &gt; 0\n    \"\"\"\n    raw_data_paths = get_raw_data_paths_from_s3(session)\n    recording_dirs = (\n        path\n        for path in raw_data_paths\n        if \"Record Node\" in str(path) and \"zarr\" not in str(path)\n    )\n    recording_dirs_experiment = tuple(\n        next(path.glob(\"*/recording*\")) for path in recording_dirs\n    )\n\n    return recording_dirs_experiment\n</code></pre>"},{"location":"reference/npc_lims/paths/s3/#npc_lims.paths.s3.get_settings_xml_path_from_s3","title":"get_settings_xml_path_from_s3  <code>cached</code>","text":"<pre><code>get_settings_xml_path_from_s3(session: str | npc_session.SessionRecord) -&gt; upath.UPath\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; settings_xml_path = get_settings_xml_path_from_s3('670180-2023-07-26')\n&gt;&gt;&gt; assert settings_xml_path.exists()\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_settings_xml_path_from_s3(\n    session: str | npc_session.SessionRecord,\n) -&gt; upath.UPath:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; settings_xml_path = get_settings_xml_path_from_s3('670180-2023-07-26')\n        &gt;&gt;&gt; assert settings_xml_path.exists()\n    \"\"\"\n    raw_data_paths_s3 = get_raw_data_paths_from_s3(session)\n\n    directories = (\n        raw_path\n        for raw_path in raw_data_paths_s3\n        if raw_path.is_dir() and \".zarr\" not in raw_path.suffix\n    )\n    return tuple(raw_path / \"settings.xml\" for raw_path in directories)[0]\n</code></pre>"},{"location":"reference/npc_lims/paths/s3/#npc_lims.paths.s3.get_sorted_data_paths_from_s3","title":"get_sorted_data_paths_from_s3  <code>cached</code>","text":"<pre><code>get_sorted_data_paths_from_s3(session: str | npc_session.SessionRecord | None = None, sorted_data_asset_id: str | None = None) -&gt; tuple[upath.UPath, ...]\n</code></pre> <p>Gets the top level files/folders for the sorted data    </p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sorted_data_s3_paths = get_sorted_data_paths_from_s3('668759_20230711')\n&gt;&gt;&gt; assert len(sorted_data_s3_paths) &gt; 0\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_sorted_data_paths_from_s3(\n    session: str | npc_session.SessionRecord | None = None,\n    sorted_data_asset_id: str | None = None,\n) -&gt; tuple[upath.UPath, ...]:\n    \"\"\"\n    Gets the top level files/folders for the sorted data    \n\n    Examples:\n        &gt;&gt;&gt; sorted_data_s3_paths = get_sorted_data_paths_from_s3('668759_20230711')\n        &gt;&gt;&gt; assert len(sorted_data_s3_paths) &gt; 0\n    \"\"\"\n    if sorted_data_asset_id is not None:\n        sorted_data_asset = codeocean.get_data_asset(sorted_data_asset_id)\n    elif session is not None:\n        sorted_data_asset = codeocean.get_session_sorted_data_asset(session)\n    else:\n        raise ValueError(\"Must provide either session or sorted_data_asset_id\")\n    return tuple(get_data_asset_s3_path(sorted_data_asset).iterdir())\n</code></pre>"},{"location":"reference/npc_lims/paths/s3/#npc_lims.paths.s3.get_sorted_precurated_paths_from_s3","title":"get_sorted_precurated_paths_from_s3  <code>cached</code>","text":"<pre><code>get_sorted_precurated_paths_from_s3(session: str | npc_session.SessionRecord) -&gt; tuple[upath.UPath, ...]\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sorted_precurated_paths = get_sorted_precurated_paths_from_s3('662892_2023-08-21')\n&gt;&gt;&gt; assert len(sorted_precurated_paths) &gt; 0\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_sorted_precurated_paths_from_s3(\n    session: str | npc_session.SessionRecord,\n) -&gt; tuple[upath.UPath, ...]:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; sorted_precurated_paths = get_sorted_precurated_paths_from_s3('662892_2023-08-21')\n        &gt;&gt;&gt; assert len(sorted_precurated_paths) &gt; 0\n    \"\"\"\n    sorted_paths = get_sorted_data_paths_from_s3(session)\n    sorted_precurated_dirs = tuple(\n        next(\n            path for path in sorted_paths if \"sorting_precurated\" in str(path)\n        ).iterdir()\n    )\n\n    return sorted_precurated_dirs\n</code></pre>"},{"location":"reference/npc_lims/paths/s3/#npc_lims.paths.s3.get_spike_sorted_paths_from_s3","title":"get_spike_sorted_paths_from_s3  <code>cached</code>","text":"<pre><code>get_spike_sorted_paths_from_s3(session: str | npc_session.SessionRecord) -&gt; tuple[upath.UPath, ...]\n</code></pre> <p>spike_sorted_paths = get_spike_sorted_paths_from_s3('662892_20230821') assert spike_sorted_paths[0].exists()</p> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_spike_sorted_paths_from_s3(\n    session: str | npc_session.SessionRecord,\n) -&gt; tuple[upath.UPath, ...]:\n    \"\"\"\n        &gt;&gt;&gt; spike_sorted_paths = get_spike_sorted_paths_from_s3('662892_20230821')\n        &gt;&gt;&gt; assert spike_sorted_paths[0].exists()\n    \"\"\"\n    sorted_data_paths = get_sorted_data_paths_from_s3(session)\n    return tuple(\n        next(path for path in sorted_data_paths if \"spike\" in str(path)).iterdir()\n    )\n</code></pre>"},{"location":"reference/npc_lims/paths/s3/#npc_lims.paths.s3.get_spike_sorting_device_path_from_s3","title":"get_spike_sorting_device_path_from_s3  <code>cached</code>","text":"<pre><code>get_spike_sorting_device_path_from_s3(session: str | npc_session.SessionRecord, device_name: str) -&gt; upath.UPath\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; get_spike_sorting_device_path_from_s3('662892_20230821', 'ProbeA')\nS3Path('s3://codeocean-s3datasetsbucket-1u41qdg42ur9/d527db85-39b7-4c4f-a465-9ca499b0ca47/spikesorted/experiment1_Record Node 102#Neuropix-PXI-100.ProbeA-AP_recording1/sorting_cached.npz')\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_spike_sorting_device_path_from_s3(\n    session: str | npc_session.SessionRecord, device_name: str\n) -&gt; upath.UPath:\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; get_spike_sorting_device_path_from_s3('662892_20230821', 'ProbeA')\n        S3Path('s3://codeocean-s3datasetsbucket-1u41qdg42ur9/d527db85-39b7-4c4f-a465-9ca499b0ca47/spikesorted/experiment1_Record Node 102#Neuropix-PXI-100.ProbeA-AP_recording1/sorting_cached.npz')\n    \"\"\"\n    spike_sorted_paths = get_spike_sorted_paths_from_s3(session)\n    spike_probe_paths = next(\n        path for path in spike_sorted_paths if device_name in str(path)\n    ).iterdir()\n    sorting_cached_path = next(\n        path for path in spike_probe_paths if \"sorting_cached\" in str(path)\n    )\n\n    return sorting_cached_path\n</code></pre>"},{"location":"reference/npc_lims/paths/s3/#npc_lims.paths.s3.get_spike_times_codeocean_kilosort_path_from_s3","title":"get_spike_times_codeocean_kilosort_path_from_s3  <code>cached</code>","text":"<pre><code>get_spike_times_codeocean_kilosort_path_from_s3(session: str | npc_session.SessionRecord) -&gt; upath.UPath\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; path = get_spike_times_codeocean_kilosort_path_from_s3('668759_20230711')\n&gt;&gt;&gt; assert path\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_spike_times_codeocean_kilosort_path_from_s3(\n    session: str | npc_session.SessionRecord,\n) -&gt; upath.UPath:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; path = get_spike_times_codeocean_kilosort_path_from_s3('668759_20230711')\n        &gt;&gt;&gt; assert path\n    \"\"\"\n    files = get_units_spikes_codeocean_kilosort_top_level_files(session)\n    spike_times_path = next(path for path in files if \"spike\" in str(path))\n\n    return spike_times_path\n</code></pre>"},{"location":"reference/npc_lims/paths/s3/#npc_lims.paths.s3.get_spikesorted_cache_paths_from_s3","title":"get_spikesorted_cache_paths_from_s3  <code>cached</code>","text":"<pre><code>get_spikesorted_cache_paths_from_s3(session: str | npc_session.SessionRecord) -&gt; tuple[upath.UPath, ...]\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; spike_sorted_cache_paths = get_spikesorted_cache_paths_from_s3('662892_20230821')\n&gt;&gt;&gt; assert len(spike_sorted_cache_paths) &gt; 0\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_spikesorted_cache_paths_from_s3(\n    session: str | npc_session.SessionRecord,\n) -&gt; tuple[upath.UPath, ...]:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; spike_sorted_cache_paths = get_spikesorted_cache_paths_from_s3('662892_20230821')\n        &gt;&gt;&gt; assert len(spike_sorted_cache_paths) &gt; 0\n    \"\"\"\n    spike_sorted_paths = get_spike_sorted_paths_from_s3(session)\n    spike_sorted_cache_files = tuple(\n        next(path.glob(\"sorting_cached.npz\")) for path in spike_sorted_paths\n    )\n\n    return spike_sorted_cache_files\n</code></pre>"},{"location":"reference/npc_lims/paths/s3/#npc_lims.paths.s3.get_template_metrics_paths_from_s3","title":"get_template_metrics_paths_from_s3  <code>cached</code>","text":"<pre><code>get_template_metrics_paths_from_s3(session: str | npc_session.SessionRecord) -&gt; tuple[upath.UPath, ...]\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; template_metrics_paths = get_template_metrics_paths_from_s3('662892_2023-08-21')\n&gt;&gt;&gt; assert len(template_metrics_paths) &gt; 0\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_template_metrics_paths_from_s3(\n    session: str | npc_session.SessionRecord,\n) -&gt; tuple[upath.UPath, ...]:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; template_metrics_paths = get_template_metrics_paths_from_s3('662892_2023-08-21')\n        &gt;&gt;&gt; assert len(template_metrics_paths) &gt; 0\n    \"\"\"\n    sorted_paths = get_sorted_data_paths_from_s3(session)\n    postprocessed_files = next(\n        path for path in sorted_paths if \"postprocessed\" in str(path)\n    ).iterdir()\n    template_metrics_paths = tuple(\n        next(path.glob(\"template_metrics/metrics.csv\")) for path in postprocessed_files\n    )\n\n    return template_metrics_paths\n</code></pre>"},{"location":"reference/npc_lims/paths/s3/#npc_lims.paths.s3.get_tissuecyte_annotation_files_from_s3","title":"get_tissuecyte_annotation_files_from_s3  <code>cached</code>","text":"<pre><code>get_tissuecyte_annotation_files_from_s3(session: str | npc_session.SessionRecord) -&gt; tuple[upath.UPath, ...]\n</code></pre> <p>For each probe inserted, get a csv file containing CCF coordinates for each electrode (channel) on the probe.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; electrode_files = get_tissuecyte_annotation_files_from_s3('626791_2022-08-16')\n&gt;&gt;&gt; assert len(electrode_files) &gt; 0\n&gt;&gt;&gt; electrode_files[0].name\n'Probe_A2_channels_626791_warped_processed.csv'\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_tissuecyte_annotation_files_from_s3(\n    session: str | npc_session.SessionRecord,\n) -&gt; tuple[upath.UPath, ...]:\n    \"\"\"For each probe inserted, get a csv file containing CCF coordinates for each\n    electrode (channel) on the probe.\n\n    Examples:\n        &gt;&gt;&gt; electrode_files = get_tissuecyte_annotation_files_from_s3('626791_2022-08-16')\n        &gt;&gt;&gt; assert len(electrode_files) &gt; 0\n        &gt;&gt;&gt; electrode_files[0].name\n        'Probe_A2_channels_626791_warped_processed.csv'\n    \"\"\"\n    session = npc_session.SessionRecord(session)\n    day = tracked_sessions.get_session_info(session).experiment_day\n    subject_electrode_network_path = TISSUECYTE_REPO / str(session.subject.id)\n\n    if not subject_electrode_network_path.exists():\n        raise FileNotFoundError(\n            f\"CCF annotations for {session} have not been uploaded to s3\"\n        )\n\n    electrode_files = tuple(\n        subject_electrode_network_path.glob(\n            f\"Probe_*{day}_channels_{str(session.subject.id)}_warped_processed.csv\"\n        )\n    )\n    if not electrode_files:\n        raise FileNotFoundError(\n            f\"{subject_electrode_network_path} exists, but no CCF annotation files found matching {day} and {session.subject.id} - check session day\"\n        )\n\n    return electrode_files\n</code></pre>"},{"location":"reference/npc_lims/paths/s3/#npc_lims.paths.s3.get_unit_locations_paths_from_s3","title":"get_unit_locations_paths_from_s3  <code>cached</code>","text":"<pre><code>get_unit_locations_paths_from_s3(session: str | npc_session.SessionRecord) -&gt; tuple[upath.UPath, ...]\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; unit_locations_paths = get_unit_locations_paths_from_s3('662892_2023-08-21')\n&gt;&gt;&gt; assert len(unit_locations_paths) &gt; 0\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_unit_locations_paths_from_s3(\n    session: str | npc_session.SessionRecord,\n) -&gt; tuple[upath.UPath, ...]:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; unit_locations_paths = get_unit_locations_paths_from_s3('662892_2023-08-21')\n        &gt;&gt;&gt; assert len(unit_locations_paths) &gt; 0\n    \"\"\"\n    sorted_paths = get_sorted_data_paths_from_s3(session)\n    postprocessed_files = next(\n        path for path in sorted_paths if \"postprocessed\" in str(path)\n    ).iterdir()\n    unit_locations_paths = tuple(\n        next(path.glob(\"unit_locations/unit_locations.npy\"))\n        for path in postprocessed_files\n    )\n\n    return unit_locations_paths\n</code></pre>"},{"location":"reference/npc_lims/paths/s3/#npc_lims.paths.s3.get_units_codeoean_kilosort_path_from_s3","title":"get_units_codeoean_kilosort_path_from_s3  <code>cached</code>","text":"<pre><code>get_units_codeoean_kilosort_path_from_s3(session: str | npc_session.SessionRecord) -&gt; upath.UPath\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; path = get_units_codeoean_kilosort_path_from_s3('668759_20230711')\n&gt;&gt;&gt; assert path\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_units_codeoean_kilosort_path_from_s3(\n    session: str | npc_session.SessionRecord,\n) -&gt; upath.UPath:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; path = get_units_codeoean_kilosort_path_from_s3('668759_20230711')\n        &gt;&gt;&gt; assert path\n    \"\"\"\n    files = get_units_spikes_codeocean_kilosort_top_level_files(session)\n    units_path = next(path for path in files if \"csv\" in str(path))\n\n    return units_path\n</code></pre>"},{"location":"reference/npc_lims/paths/s3/#npc_lims.paths.s3.get_units_spikes_codeocean_kilosort_top_level_files","title":"get_units_spikes_codeocean_kilosort_top_level_files  <code>cached</code>","text":"<pre><code>get_units_spikes_codeocean_kilosort_top_level_files(session: str | npc_session.SessionRecord) -&gt; tuple[upath.UPath, ...]\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; paths = get_units_spikes_codeocean_kilosort_top_level_files('668759_20230711')\n&gt;&gt;&gt; assert paths\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_units_spikes_codeocean_kilosort_top_level_files(\n    session: str | npc_session.SessionRecord,\n) -&gt; tuple[upath.UPath, ...]:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; paths = get_units_spikes_codeocean_kilosort_top_level_files('668759_20230711')\n        &gt;&gt;&gt; assert paths\n    \"\"\"\n    units_spikes_data_asset = (\n        codeocean.get_session_units_spikes_with_peak_channels_data_asset(session)\n    )\n\n    units_directory = next(\n        unit_path\n        for unit_path in get_data_asset_s3_path(units_spikes_data_asset).iterdir()\n        if unit_path.is_dir()\n    )\n\n    return tuple(units_directory.iterdir())\n</code></pre>"},{"location":"reference/npc_lims/scripts/","title":"Index","text":""},{"location":"reference/npc_lims/scripts/#npc_lims.scripts","title":"scripts","text":""},{"location":"reference/npc_lims/scripts/regenerate_all_nwbs/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> regenerate_all_nwbs","text":""},{"location":"reference/npc_lims/scripts/regenerate_all_nwbs/#npc_lims.scripts.regenerate_all_nwbs","title":"regenerate_all_nwbs","text":""},{"location":"reference/npc_lims/scripts/regenerate_all_nwbs/#npc_lims.scripts.regenerate_all_nwbs.NWB_EXPORT_CAPSULE_ID","title":"NWB_EXPORT_CAPSULE_ID  <code>module-attribute</code>","text":"<pre><code>NWB_EXPORT_CAPSULE_ID = '43f661ab-b29b-4a64-bb70-2d59ac58a9af'\n</code></pre> <p>Uses <code>npc_sessions</code> to write nwb. Requires <code>session_id</code> as input else it will run with default test session.</p>"},{"location":"reference/npc_lims/scripts/update_session_status/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> update_session_status","text":""},{"location":"reference/npc_lims/scripts/update_session_status/#npc_lims.scripts.update_session_status","title":"update_session_status","text":""},{"location":"reference/npc_lims/status/","title":"Index","text":""},{"location":"reference/npc_lims/status/#npc_lims.status","title":"status","text":""},{"location":"reference/npc_lims/status/behavior_sessions/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> behavior_sessions","text":""},{"location":"reference/npc_lims/status/behavior_sessions/#npc_lims.status.behavior_sessions","title":"behavior_sessions","text":""},{"location":"reference/npc_lims/status/behavior_sessions/#npc_lims.status.behavior_sessions.DataAssetAPI","title":"DataAssetAPI  <code>module-attribute</code>","text":"<pre><code>DataAssetAPI: TypeAlias = dict[Literal['created', 'custom_metadata', 'description', 'files', 'id', 'last_used', 'name', 'size', 'sourceBucket', 'state', 'tags', 'type'], Any]\n</code></pre> <p>Result from CodeOcean API when querying data assets.</p>"},{"location":"reference/npc_lims/status/behavior_sessions/#npc_lims.status.behavior_sessions.MissingCredentials","title":"MissingCredentials","text":"<p>             Bases: <code>KeyError</code></p> <p>Raised when a required credential is not found in environment variables.</p>"},{"location":"reference/npc_lims/status/behavior_sessions/#npc_lims.status.behavior_sessions.NoSessionInfo","title":"NoSessionInfo","text":"<p>             Bases: <code>ValueError</code></p> <p>Raised when a session is not found in the tracked-sessions database.</p>"},{"location":"reference/npc_lims/status/behavior_sessions/#npc_lims.status.behavior_sessions.SessionInfo","title":"SessionInfo  <code>dataclass</code>","text":"<p>Minimal session metadata obtained quickly from a database.</p> <p>Currently using: https://raw.githubusercontent.com/AllenInstitute/npc_lims/main/tracked_sessions.yaml and training spreadsheets.</p>"},{"location":"reference/npc_lims/status/behavior_sessions/#npc_lims.status.behavior_sessions.SessionInfo.date","title":"date  <code>property</code>","text":"<pre><code>date: npc_session.DateRecord\n</code></pre> <p>YY-MM-DD</p>"},{"location":"reference/npc_lims/status/behavior_sessions/#npc_lims.status.behavior_sessions.SessionInfo.experiment_day","title":"experiment_day  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>experiment_day: int | None = None\n</code></pre> <p>Experiment day (ephys recording, or opto experiment), starting from 1 for each subject. <code>None</code> for training behavior-only sessions.</p>"},{"location":"reference/npc_lims/status/behavior_sessions/#npc_lims.status.behavior_sessions.SessionInfo.idx","title":"idx  <code>property</code>","text":"<pre><code>idx: int\n</code></pre> <p>Session index, starting from 0 for each subject on each day. Currently one session per day, so index isn't specified - implicitly equal to 0.</p>"},{"location":"reference/npc_lims/status/behavior_sessions/#npc_lims.status.behavior_sessions.SessionInfo.is_annotated","title":"is_annotated  <code>cached</code> <code>property</code>","text":"<pre><code>is_annotated: bool\n</code></pre> <p>The subject associated with the sessions has CCF annotation data for probes available on S3.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; next(session.is_annotated for session in get_session_info() if session.is_annotated)\nTrue\n</code></pre>"},{"location":"reference/npc_lims/status/behavior_sessions/#npc_lims.status.behavior_sessions.SessionInfo.is_sorted","title":"is_sorted  <code>cached</code> <code>property</code>","text":"<pre><code>is_sorted: bool\n</code></pre> <p>The AIND sorting pipeline has yielded a Result asset for this session.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; next(session.is_sorted for session in get_session_info() if session.is_sorted)\nTrue\n</code></pre>"},{"location":"reference/npc_lims/status/behavior_sessions/#npc_lims.status.behavior_sessions.SessionInfo.is_surface_channels","title":"is_surface_channels  <code>cached</code> <code>property</code>","text":"<pre><code>is_surface_channels: bool\n</code></pre> <p>The session has ephys data collected separately to record surface channel.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; get_session_info(\"DRpilot_660023_20230808\").is_surface_channels\nTrue\n</code></pre>"},{"location":"reference/npc_lims/status/behavior_sessions/#npc_lims.status.behavior_sessions.SessionInfo.is_sync","title":"is_sync  <code>instance-attribute</code>","text":"<pre><code>is_sync: bool\n</code></pre> <p>The session has sync data, implying more than a behavior-box.</p>"},{"location":"reference/npc_lims/status/behavior_sessions/#npc_lims.status.behavior_sessions.SessionInfo.is_templeton","title":"is_templeton  <code>cached</code> <code>property</code>","text":"<pre><code>is_templeton: bool\n</code></pre> <p>Uses project in <code>tracked_sessions.yaml</code> if available, then infers from whether the session is in Sam's DR training database.</p>"},{"location":"reference/npc_lims/status/behavior_sessions/#npc_lims.status.behavior_sessions.SessionInfo.is_uploaded","title":"is_uploaded  <code>cached</code> <code>property</code>","text":"<pre><code>is_uploaded: bool\n</code></pre> <p>All of the session's raw data has been uploaded to S3 and can be found in CodeOcean. Not the same as <code>cloud_path</code> being non-None: this property indicates a proper session upload via aind tools, with metadata etc.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; next(session.is_uploaded for session in get_session_info() if session.is_uploaded)\nTrue\n</code></pre>"},{"location":"reference/npc_lims/status/behavior_sessions/#npc_lims.status.behavior_sessions.SessionInfo.rig","title":"rig  <code>property</code>","text":"<pre><code>rig: str\n</code></pre> <p>From DR training spreadsheet (<code>NP2</code>, <code>B2</code>, 'BEH.E`).</p> <ul> <li>does not necessarily match <code>AIBS_RIG_ID</code> on computer</li> <li><code>unknown</code> if not available (for Templeton sessions)</li> </ul>"},{"location":"reference/npc_lims/status/behavior_sessions/#npc_lims.status.behavior_sessions.SessionInfo.task_version","title":"task_version  <code>property</code>","text":"<pre><code>task_version: str\n</code></pre> <p>From DR training spreadsheet (<code>stage 5 ori AMN moving timeouts repeats</code>). - <code>unknown</code> if not available (for Templeton sessions)</p>"},{"location":"reference/npc_lims/status/behavior_sessions/#npc_lims.status.behavior_sessions.SessionInfo.training_info","title":"training_info  <code>cached</code> <code>property</code>","text":"<pre><code>training_info: dict[str, Any]\n</code></pre> <p>Session metadata from Sam's DR training database. - empty dict for Templeton sessions</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; next(get_session_info()).session_info                       # doctest: +SKIP\n{'ID': 1, 'start_time': '2023-03-07 12:56:27', 'rig_name': 'B2', 'task_version': 'stage 0 moving', 'hits': '0', 'dprime_same_modality': '', 'dprime_other_modality_go_stim': '', 'pass': '1', 'ignore': '0'}\n&gt;&gt;&gt; assert next(session.training_info for session in get_session_info() if session.training_info)\n</code></pre>"},{"location":"reference/npc_lims/status/behavior_sessions/#npc_lims.status.behavior_sessions.excel_to_sqlite","title":"excel_to_sqlite","text":"<pre><code>excel_to_sqlite(spreadsheet: str | upath.UPath, save_path: str | upath.UPath) -&gt; upath.UPath\n</code></pre> <p>This code uses the openpyxl package for playing around with excel using Python code to convert complete excel workbook (all sheets) to an SQLite database The code assumes that the first row of every sheet is the column name Every sheet is stored in a separate table The sheet name is assigned as the table name for every sheet.</p> <p>From https://stackoverflow.com/questions/17439885/export-data-from-excel-to-sqlite-database</p> Source code in <code>npc_lims/metadata/spreadsheets.py</code> <pre><code>def excel_to_sqlite(\n    spreadsheet: str | upath.UPath,\n    save_path: str | upath.UPath,\n) -&gt; upath.UPath:\n    \"\"\"\n    This code uses the openpyxl package for playing around with excel using Python code\n    to convert complete excel workbook (all sheets) to an SQLite database\n    The code assumes that the first row of every sheet is the column name\n    Every sheet is stored in a separate table\n    The sheet name is assigned as the table name for every sheet.\n\n    From\n    https://stackoverflow.com/questions/17439885/export-data-from-excel-to-sqlite-database\n    \"\"\"\n    spreadsheet = upath.UPath(spreadsheet)\n    save_path = upath.UPath(save_path)\n\n    db_path = tempfile.mkstemp(suffix=\".sqlite\")[1]\n    xls_path = tempfile.mkstemp(suffix=spreadsheet.suffix)[1]\n    upath.UPath(xls_path).write_bytes(spreadsheet.read_bytes())\n\n    # Replace with a database name\n    con = sqlite3.connect(db_path)\n\n    # replace with the complete path to your excel workbook\n    wb = openpyxl.load_workbook(filename=xls_path)\n\n    def slugify(text: str, lower=1) -&gt; str:\n        if lower == 1:\n            text = text.strip().lower()\n        text = text.replace(\"d'\", \"dprime\")\n        text = re.sub(r\"[^\\w _-]+\", \"\", text)\n        text = re.sub(r\"[- ]+\", \"_\", text)\n        return text\n\n    for sheet in wb.sheetnames:\n        ws = wb[sheet]\n        columns = []\n        duplicate_column_idx = []\n        query = (\n            \"CREATE TABLE \"\n            + repr(str(slugify(sheet)))\n            + \"(ID INTEGER PRIMARY KEY AUTOINCREMENT\"\n        )\n        for row in ws.rows:\n            for idx, col in enumerate(row):\n                column_name = slugify(col.value)\n                if column_name not in columns:\n                    query += \", \" + column_name + \" TEXT\"\n                    columns.append(column_name)\n                else:\n                    duplicate_column_idx.append(idx)\n            break  # only want column names from first row\n        query += \");\"\n        if not columns:\n            continue\n\n        con.execute(query)\n\n        tup = []\n        for i, col in enumerate(ws):\n            tuprow = []\n            if i == 0:\n                continue\n            for idx, col in enumerate(col):\n                if idx in duplicate_column_idx:\n                    continue\n                tuprow.append(str(col.value).strip()) if str(\n                    col.value\n                ).strip() != \"None\" else tuprow.append(\"\")\n            tup.append(tuple(tuprow))\n\n        insQuery1 = \"INSERT INTO \" + repr(str(slugify(sheet))) + \"(\"\n        insQuery2 = \"\"\n        for col in columns:\n            insQuery1 += col + \", \"\n            insQuery2 += \"?, \"\n        insQuery1 = insQuery1[:-2] + \") VALUES(\"\n        insQuery2 = insQuery2[:-2] + \")\"\n        insQuery = insQuery1 + insQuery2\n\n        con.executemany(insQuery, tup)\n        con.commit()\n\n    con.close()\n    save_path.write_bytes(upath.UPath(db_path).read_bytes())\n    return save_path\n</code></pre>"},{"location":"reference/npc_lims/status/behavior_sessions/#npc_lims.status.behavior_sessions.get_data_asset","title":"get_data_asset","text":"<pre><code>get_data_asset(asset: str | uuid.UUID | DataAssetAPI) -&gt; DataAssetAPI\n</code></pre> <p>Converts an asset uuid to dict of info from CodeOcean API.</p> Source code in <code>npc_lims/metadata/codeocean.py</code> <pre><code>def get_data_asset(asset: str | uuid.UUID | DataAssetAPI) -&gt; DataAssetAPI:\n    \"\"\"Converts an asset uuid to dict of info from CodeOcean API.\"\"\"\n    if not isinstance(asset, Mapping):\n        response = get_codeocean_client().get_data_asset(str(asset))\n        response.raise_for_status()\n        asset = response.json()\n    assert isinstance(asset, Mapping), f\"Unexpected {type(asset) = }, {asset = }\"\n    return asset\n</code></pre>"},{"location":"reference/npc_lims/status/behavior_sessions/#npc_lims.status.behavior_sessions.get_data_asset_s3_path","title":"get_data_asset_s3_path","text":"<pre><code>get_data_asset_s3_path(asset_id: str | codeocean.DataAssetAPI) -&gt; upath.UPath\n</code></pre> <p>Path on s3 that contains actual data for CodeOcean data asset.</p> <ul> <li>asset <code>id</code> is a UUID</li> <li>accept anything with an \"id\" attribute or key, or a string Assumes that the data asset has data on s3, which may not be true, and we can't tell from asset info.</li> </ul> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>def get_data_asset_s3_path(asset_id: str | codeocean.DataAssetAPI) -&gt; upath.UPath:\n    \"\"\"Path on s3 that contains actual data for CodeOcean data asset.\n\n    - asset `id` is a UUID\n    - accept anything with an \"id\" attribute or key, or a string\n    Assumes that the data asset has data on s3, which may not be true, and we can't tell from asset info.\n    \"\"\"\n    bucket = CODE_OCEAN_DATA_BUCKET\n    with contextlib.suppress(AttributeError, KeyError):\n        bucket = upath.UPath(upath.UPath(f's3://{asset_id[\"sourceBucket\"]}'))  # type: ignore[index]\n    with contextlib.suppress(AttributeError, KeyError):\n        return bucket / asset_id.get(\"id\")  # type: ignore[union-attr, operator]\n    with contextlib.suppress(AttributeError):\n        return bucket / asset_id.id  # type: ignore[union-attr]\n    return bucket / str(asset_id)\n</code></pre>"},{"location":"reference/npc_lims/status/behavior_sessions/#npc_lims.status.behavior_sessions.get_h5_sync_from_s3","title":"get_h5_sync_from_s3  <code>cached</code>","text":"<pre><code>get_h5_sync_from_s3(session: str | npc_session.SessionRecord) -&gt; upath.UPath\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; get_h5_sync_from_s3('662892_20230821')\nS3Path('s3://aind-ephys-data/ecephys_662892_2023-08-21_12-43-45/behavior/20230821T124345.h5')\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_h5_sync_from_s3(session: str | npc_session.SessionRecord) -&gt; upath.UPath:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; get_h5_sync_from_s3('662892_20230821')\n        S3Path('s3://aind-ephys-data/ecephys_662892_2023-08-21_12-43-45/behavior/20230821T124345.h5')\n    \"\"\"\n    raw_data_paths_s3 = get_raw_data_paths_from_s3(session)\n    sync_path = tuple(path for path in raw_data_paths_s3 if \".h5\" in path.suffix)\n\n    if not sync_path:\n        raise FileNotFoundError(f\"No sync file found in {raw_data_paths_s3!r}\")\n\n    return sync_path[0]\n</code></pre>"},{"location":"reference/npc_lims/status/behavior_sessions/#npc_lims.status.behavior_sessions.get_hdf5_stim_files_from_s3","title":"get_hdf5_stim_files_from_s3  <code>cached</code>","text":"<pre><code>get_hdf5_stim_files_from_s3(session: str | npc_session.SessionRecord) -&gt; tuple[StimFile, ...]\n</code></pre> <p>All the stim files for a session, from the synced <code>DynamicRoutingTask/Data</code> folder on s3.</p> <ul> <li>filters out files that are obviously wrong</li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; files = get_hdf5_stim_files_from_s3('668759_20230711')\n&gt;&gt;&gt; assert len(files) &gt; 0\n&gt;&gt;&gt; files[0].name, files[0].time\n('DynamicRouting1', '13:25:00')\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_hdf5_stim_files_from_s3(\n    session: str | npc_session.SessionRecord,\n) -&gt; tuple[StimFile, ...]:\n    \"\"\"All the stim files for a session, from the synced\n    `DynamicRoutingTask/Data` folder on s3.\n\n    - filters out files that are obviously wrong\n\n    Examples:\n        &gt;&gt;&gt; files = get_hdf5_stim_files_from_s3('668759_20230711')\n        &gt;&gt;&gt; assert len(files) &gt; 0\n        &gt;&gt;&gt; files[0].name, files[0].time\n        ('DynamicRouting1', '13:25:00')\n    \"\"\"\n    session = npc_session.SessionRecord(session)\n    root = DR_DATA_REPO / str(session.subject)\n    if not root.exists():\n        if not DR_DATA_REPO.exists():\n            raise FileNotFoundError(f\"{DR_DATA_REPO = } does not exist\")\n        raise FileNotFoundError(\n            f\"Subject {session.subject} hdf5s not on s3: may have been run by NSB, in which case they are on lims2\"\n        )\n    file_glob = f\"*_{session.subject}_{session.date.replace('-', '')}_??????.hdf5\"\n    files = [StimFile(path, session) for path in root.glob(file_glob)]\n\n    test_glob = file_glob.replace(str(session.subject), \"test\")\n    files += [\n        StimFile(path, session)\n        for path in root.glob(test_glob)\n        if str(session.subject) in path.as_posix()\n    ]\n\n    # no empty files:\n    files = [f for f in files if f.size &gt; 0]\n\n    # single behavior task:\n    behavior_tasks = tuple(f for f in files if \"DynamicRouting\" in f.name)\n    if len(behavior_tasks) &gt; 1:\n        largest = max(behavior_tasks, key=lambda f: f.size)\n        for f in behavior_tasks:\n            if f.path != largest.path:\n                files.remove(f)\n\n    return tuple(files)\n</code></pre>"},{"location":"reference/npc_lims/status/behavior_sessions/#npc_lims.status.behavior_sessions.get_mean_waveform_codeocean_kilosort_path_from_s3","title":"get_mean_waveform_codeocean_kilosort_path_from_s3  <code>cached</code>","text":"<pre><code>get_mean_waveform_codeocean_kilosort_path_from_s3(session: str | npc_session.SessionRecord) -&gt; upath.UPath\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; path = get_spike_times_codeocean_kilosort_path_from_s3('668759_20230711')\n&gt;&gt;&gt; assert path\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_mean_waveform_codeocean_kilosort_path_from_s3(\n    session: str | npc_session.SessionRecord,\n) -&gt; upath.UPath:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; path = get_spike_times_codeocean_kilosort_path_from_s3('668759_20230711')\n        &gt;&gt;&gt; assert path\n    \"\"\"\n    files = get_units_spikes_codeocean_kilosort_top_level_files(session)\n    mean_waveforms_path = next(path for path in files if \"mean\" in str(path))\n\n    return mean_waveforms_path\n</code></pre>"},{"location":"reference/npc_lims/status/behavior_sessions/#npc_lims.status.behavior_sessions.get_nwb_file_from_s3","title":"get_nwb_file_from_s3  <code>cached</code>","text":"<pre><code>get_nwb_file_from_s3(session: str | npc_session.SessionRecord) -&gt; upath.UPath\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; get_nwb_file_from_s3('636766_20230125')\nS3Path('s3://aind-scratch-data/ben.hardcastle/nwb/nwb/DRpilot_636766_20230125.nwb')\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_nwb_file_from_s3(\n    session: str | npc_session.SessionRecord,\n) -&gt; upath.UPath:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; get_nwb_file_from_s3('636766_20230125')\n        S3Path('s3://aind-scratch-data/ben.hardcastle/nwb/nwb/DRpilot_636766_20230125.nwb')\n    \"\"\"\n    session = npc_session.SessionRecord(session)\n    root = NWB_REPO\n    glob = \"*.nwb*\"\n    result = next(\n        (\n            path\n            for path in root.glob(glob)\n            if session == npc_session.SessionRecord(path.name)\n        ),\n        None,\n    )\n    if not result:\n        raise FileNotFoundError(f\"No NWB file found at {root}/{glob}\")\n    return result\n</code></pre>"},{"location":"reference/npc_lims/status/behavior_sessions/#npc_lims.status.behavior_sessions.get_path_from_data_asset","title":"get_path_from_data_asset","text":"<pre><code>get_path_from_data_asset(asset: DataAssetAPI) -&gt; upath.UPath\n</code></pre> <p>Reconstruct path to raw data in bucket (e.g. on s3) using data asset uuid or dict of info from Code Ocean API.</p> Source code in <code>npc_lims/metadata/codeocean.py</code> <pre><code>def get_path_from_data_asset(asset: DataAssetAPI) -&gt; upath.UPath:\n    \"\"\"Reconstruct path to raw data in bucket (e.g. on s3) using data asset\n    uuid or dict of info from Code Ocean API.\"\"\"\n    if \"sourceBucket\" not in asset:\n        raise ValueError(\n            f\"Asset {asset['id']} has no `sourceBucket` info - not sure how to create UPath:\\n{asset!r}\"\n        )\n    bucket_info = asset[\"sourceBucket\"]\n    roots = {\"aws\": \"s3\", \"gcs\": \"gs\"}\n    if bucket_info[\"origin\"] not in roots:\n        raise RuntimeError(\n            f\"Unknown bucket origin - not sure how to create UPath: {bucket_info = }\"\n        )\n    return upath.UPath(\n        f\"{roots[bucket_info['origin']]}://{bucket_info['bucket']}/{bucket_info['prefix']}\"\n    )\n</code></pre>"},{"location":"reference/npc_lims/status/behavior_sessions/#npc_lims.status.behavior_sessions.get_quality_metrics_paths_from_s3","title":"get_quality_metrics_paths_from_s3  <code>cached</code>","text":"<pre><code>get_quality_metrics_paths_from_s3(session: str | npc_session.SessionRecord) -&gt; tuple[upath.UPath, ...]\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; quality_metrics_paths = get_quality_metrics_paths_from_s3('662892_2023-08-21')\n&gt;&gt;&gt; assert len(quality_metrics_paths) &gt; 0\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_quality_metrics_paths_from_s3(\n    session: str | npc_session.SessionRecord,\n) -&gt; tuple[upath.UPath, ...]:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; quality_metrics_paths = get_quality_metrics_paths_from_s3('662892_2023-08-21')\n        &gt;&gt;&gt; assert len(quality_metrics_paths) &gt; 0\n    \"\"\"\n    sorted_paths = get_sorted_data_paths_from_s3(session)\n    postprocessed_files = next(\n        path for path in sorted_paths if \"postprocessed\" in str(path)\n    ).iterdir()\n    quality_metrics_paths = tuple(\n        next(path.glob(\"quality_metrics/metrics.csv\")) for path in postprocessed_files\n    )\n\n    return quality_metrics_paths\n</code></pre>"},{"location":"reference/npc_lims/status/behavior_sessions/#npc_lims.status.behavior_sessions.get_raw_data_paths_from_s3","title":"get_raw_data_paths_from_s3  <code>cached</code>","text":"<pre><code>get_raw_data_paths_from_s3(session: str | npc_session.SessionRecord) -&gt; tuple[upath.UPath, ...]\n</code></pre> <p>All top-level files and folders from the <code>ephys</code> &amp; <code>behavior</code> subdirectories in a session's raw data folder on s3.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; files = get_raw_data_paths_from_s3 ('668759_20230711')\n&gt;&gt;&gt; assert len(files) &gt; 0\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_raw_data_paths_from_s3(\n    session: str | npc_session.SessionRecord,\n) -&gt; tuple[upath.UPath, ...]:\n    \"\"\"All top-level files and folders from the `ephys` &amp; `behavior`\n    subdirectories in a session's raw data folder on s3.\n\n    Examples:\n        &gt;&gt;&gt; files = get_raw_data_paths_from_s3 ('668759_20230711')\n        &gt;&gt;&gt; assert len(files) &gt; 0\n    \"\"\"\n    raw_data_root = codeocean.get_raw_data_root(session)\n    directories: Iterator[upath.UPath] = (\n        directory for directory in raw_data_root.iterdir() if directory.is_dir()\n    )\n    first_level_files_directories: Iterator = (\n        tuple(directory.iterdir()) for directory in directories\n    )\n\n    paths = functools.reduce(operator.add, first_level_files_directories)\n\n    if not paths:\n        raise FileNotFoundError(\n            f\"Raw data paths empty for {session} on s3. Looks like an upload was started, but no files have been transferred.\"\n        )\n    return paths\n</code></pre>"},{"location":"reference/npc_lims/status/behavior_sessions/#npc_lims.status.behavior_sessions.get_raw_data_root","title":"get_raw_data_root  <code>cached</code>","text":"<pre><code>get_raw_data_root(session: str | npc_session.SessionRecord) -&gt; upath.UPath\n</code></pre> <p>Reconstruct path to raw data in bucket (e.g. on s3) using data-asset info from Code Ocean.</p> <pre><code>&gt;&gt;&gt; get_raw_data_root('668759_20230711')\nS3Path('s3://aind-ephys-data/ecephys_668759_2023-07-11_13-07-32')\n</code></pre> Source code in <code>npc_lims/metadata/codeocean.py</code> <pre><code>@functools.cache\ndef get_raw_data_root(session: str | npc_session.SessionRecord) -&gt; upath.UPath:\n    \"\"\"Reconstruct path to raw data in bucket (e.g. on s3) using data-asset\n    info from Code Ocean.\n\n        &gt;&gt;&gt; get_raw_data_root('668759_20230711')\n        S3Path('s3://aind-ephys-data/ecephys_668759_2023-07-11_13-07-32')\n    \"\"\"\n    session = npc_session.SessionRecord(session)\n    raw_assets = tuple(\n        asset for asset in get_session_data_assets(session) if is_raw_data_asset(asset)\n    )\n    raw_asset = get_single_data_asset(session, raw_assets, \"raw\")\n\n    return get_path_from_data_asset(raw_asset)\n</code></pre>"},{"location":"reference/npc_lims/status/behavior_sessions/#npc_lims.status.behavior_sessions.get_recording_dirs_experiment_path_from_s3","title":"get_recording_dirs_experiment_path_from_s3  <code>cached</code>","text":"<pre><code>get_recording_dirs_experiment_path_from_s3(session: str | npc_session.SessionRecord) -&gt; tuple[upath.UPath, ...]\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; recording_dirs = get_recording_dirs_experiment_path_from_s3('662892_20230821')\n&gt;&gt;&gt; assert len(recording_dirs) &gt; 0\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_recording_dirs_experiment_path_from_s3(\n    session: str | npc_session.SessionRecord,\n) -&gt; tuple[upath.UPath, ...]:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; recording_dirs = get_recording_dirs_experiment_path_from_s3('662892_20230821')\n        &gt;&gt;&gt; assert len(recording_dirs) &gt; 0\n    \"\"\"\n    raw_data_paths = get_raw_data_paths_from_s3(session)\n    recording_dirs = (\n        path\n        for path in raw_data_paths\n        if \"Record Node\" in str(path) and \"zarr\" not in str(path)\n    )\n    recording_dirs_experiment = tuple(\n        next(path.glob(\"*/recording*\")) for path in recording_dirs\n    )\n\n    return recording_dirs_experiment\n</code></pre>"},{"location":"reference/npc_lims/status/behavior_sessions/#npc_lims.status.behavior_sessions.get_session_id_from_db_row","title":"get_session_id_from_db_row","text":"<pre><code>get_session_id_from_db_row(subject: int | str, row: dict[str, Any]) -&gt; npc_session.SessionRecord\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; get_session_id_from_db_row(366122, {'start_time': '2023-01-30 12:56:27'})\n'366122_2023-01-30'\n</code></pre> Source code in <code>npc_lims/status/behavior_sessions.py</code> <pre><code>def get_session_id_from_db_row(\n    subject: int | str, row: dict[str, Any]\n) -&gt; npc_session.SessionRecord:\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; get_session_id_from_db_row(366122, {'start_time': '2023-01-30 12:56:27'})\n        '366122_2023-01-30'\n    \"\"\"\n    return npc_session.SessionRecord(\n        f\"{subject} {row[next(k for k in row.keys() if 'start' in k and any(t in k for t in ('date', 'time')))]}\"\n    )\n</code></pre>"},{"location":"reference/npc_lims/status/behavior_sessions/#npc_lims.status.behavior_sessions.get_session_info","title":"get_session_info","text":"<pre><code>get_session_info(session: str | npc_session.SessionRecord | SessionInfo | None = None, **bool_filter_kwargs: bool) -&gt; tuple[SessionInfo, ...] | SessionInfo\n</code></pre> <p>Quickly get a sequence of all tracked sessions.</p> <p>Examples:</p> <pre><code>Each object in the sequence has info about one session:\n&gt;&gt;&gt; sessions = get_session_info()\n&gt;&gt;&gt; sessions[0].__class__.__name__\n'SessionInfo'\n&gt;&gt;&gt; sessions[0].is_ephys                    # doctest: +SKIP\nTrue\n&gt;&gt;&gt; any(s for s in sessions if s.date.year &lt; 2021)\nFalse\n\nPass a session str or SessionRecord to get the info for that session:\n&gt;&gt;&gt; info = get_session_info(\"DRpilot_667252_20230927\")\n&gt;&gt;&gt; assert isinstance(info, SessionInfo)\n</code></pre> Source code in <code>npc_lims/status/tracked_sessions.py</code> <pre><code>def get_session_info(\n    session: str | npc_session.SessionRecord | SessionInfo | None = None,\n    **bool_filter_kwargs: bool,\n) -&gt; tuple[SessionInfo, ...] | SessionInfo:\n    \"\"\"Quickly get a sequence of all tracked sessions.\n\n    Examples:\n\n        Each object in the sequence has info about one session:\n        &gt;&gt;&gt; sessions = get_session_info()\n        &gt;&gt;&gt; sessions[0].__class__.__name__\n        'SessionInfo'\n        &gt;&gt;&gt; sessions[0].is_ephys                    # doctest: +SKIP\n        True\n        &gt;&gt;&gt; any(s for s in sessions if s.date.year &lt; 2021)\n        False\n\n        Pass a session str or SessionRecord to get the info for that session:\n        &gt;&gt;&gt; info = get_session_info(\"DRpilot_667252_20230927\")\n        &gt;&gt;&gt; assert isinstance(info, SessionInfo)\n    \"\"\"\n    if isinstance(session, SessionInfo):\n        session = session.id\n    tracked_sessions = set(\n        _get_session_info_from_file(),\n    )\n    tracked_sessions.update(_get_session_info_from_data_repo())\n    if session is None:\n        filtered_sessions = (\n            s\n            for s in tracked_sessions\n            if all(getattr(s, k) == v for k, v in bool_filter_kwargs.items())\n        )\n        return tuple(sorted(filtered_sessions, key=lambda s: s.id.date, reverse=True))\n    with contextlib.suppress(StopIteration):\n        return next(\n            s\n            for s in tracked_sessions\n            if s.id == (record := npc_session.SessionRecord(session))\n        )\n    raise exceptions.NoSessionInfo(f\"{record} not found in tracked sessions\")\n</code></pre>"},{"location":"reference/npc_lims/status/behavior_sessions/#npc_lims.status.behavior_sessions.get_session_issues","title":"get_session_issues","text":"<pre><code>get_session_issues(session: str | npc_session.SessionRecord | None = None) -&gt; list[str] | list | dict[npc_session.SessionRecord, list[str]]\n</code></pre> <p>Get a dictionary of all sessions with issues mapped to their issue url.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; issues = get_session_issues()\n&gt;&gt;&gt; issues                                                              # doctest: +SKIP\n{\n    '644867_2023-02-21': ['https://github.com/AllenInstitute/npc_sessions/issues/28'],\n    '660023_2023-08-08': ['https://github.com/AllenInstitute/npc_sessions/issues/26'],\n}\n\n&gt;&gt;&gt; single_session_issues = get_session_issues(\"DRPilot_644867_20230221\")\n&gt;&gt;&gt; assert isinstance(single_session_issues, typing.Sequence)\n&gt;&gt;&gt; single_session_issues                                               # doctest: +SKIP\n['https://github.com/AllenInstitute/npc_sessions/issues/28']\n</code></pre> Source code in <code>npc_lims/status/tracked_sessions.py</code> <pre><code>def get_session_issues(\n    session: str | npc_session.SessionRecord | None = None,\n) -&gt; list[str] | list | dict[npc_session.SessionRecord, list[str]]:\n    \"\"\"Get a dictionary of all sessions with issues mapped to their issue url.\n\n    Examples:\n\n        &gt;&gt;&gt; issues = get_session_issues()\n        &gt;&gt;&gt; issues                                                              # doctest: +SKIP\n        {\n            '644867_2023-02-21': ['https://github.com/AllenInstitute/npc_sessions/issues/28'],\n            '660023_2023-08-08': ['https://github.com/AllenInstitute/npc_sessions/issues/26'],\n        }\n\n        &gt;&gt;&gt; single_session_issues = get_session_issues(\"DRPilot_644867_20230221\")\n        &gt;&gt;&gt; assert isinstance(single_session_issues, typing.Sequence)\n        &gt;&gt;&gt; single_session_issues                                               # doctest: +SKIP\n        ['https://github.com/AllenInstitute/npc_sessions/issues/28']\n    \"\"\"\n    if session:\n        try:\n            return get_session_info(session).issues\n        except exceptions.NoSessionInfo:\n            return []\n    return {\n        session.id: session.issues for session in get_session_info() if session.issues\n    }\n</code></pre>"},{"location":"reference/npc_lims/status/behavior_sessions/#npc_lims.status.behavior_sessions.get_session_kwargs","title":"get_session_kwargs","text":"<pre><code>get_session_kwargs(session: str | npc_session.SessionRecord | None = None) -&gt; dict[str, str] | dict | dict[npc_session.SessionRecord, dict[str, str]]\n</code></pre> <p>Get a dictionary of all sessions mapped to their config kwargs. kwargs will be an empty dict if no kwargs have been specified.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; kwargs = get_session_kwargs()\n&gt;&gt;&gt; kwargs                                                          # doctest: +SKIP\n{   '670248_2023-08-02': {\n        'is_task': False,\n    },\n    '667252_2023-09-25': {\n        'invalid_times': [\n            {'start_time': 4996, 'stop_time': -1, 'reason': 'auditory stimulus not presented (amplifier power issue)'}\n        ]\n    },\n}\n&gt;&gt;&gt; single_session_kwargs = get_session_kwargs(\"DRpilot_670248_20230802\")\n&gt;&gt;&gt; assert isinstance(single_session_kwargs, dict)\n&gt;&gt;&gt; single_session_kwargs                                           # doctest: +SKIP\n{'is_task': False}\n</code></pre> Source code in <code>npc_lims/status/tracked_sessions.py</code> <pre><code>def get_session_kwargs(\n    session: str | npc_session.SessionRecord | None = None,\n) -&gt; dict[str, str] | dict | dict[npc_session.SessionRecord, dict[str, str]]:\n    \"\"\"Get a dictionary of all sessions mapped to their config kwargs. kwargs will\n    be an empty dict if no kwargs have been specified.\n\n    Examples:\n\n        &gt;&gt;&gt; kwargs = get_session_kwargs()\n        &gt;&gt;&gt; kwargs                                                          # doctest: +SKIP\n        {   '670248_2023-08-02': {\n                'is_task': False,\n            },\n            '667252_2023-09-25': {\n                'invalid_times': [\n                    {'start_time': 4996, 'stop_time': -1, 'reason': 'auditory stimulus not presented (amplifier power issue)'}\n                ]\n            },\n        }\n        &gt;&gt;&gt; single_session_kwargs = get_session_kwargs(\"DRpilot_670248_20230802\")\n        &gt;&gt;&gt; assert isinstance(single_session_kwargs, dict)\n        &gt;&gt;&gt; single_session_kwargs                                           # doctest: +SKIP\n        {'is_task': False}\n    \"\"\"\n    if session:\n        try:\n            return get_session_info(session).session_kwargs\n        except exceptions.NoSessionInfo:\n            return {}\n    return {session.id: session.session_kwargs for session in get_session_info()}\n</code></pre>"},{"location":"reference/npc_lims/status/behavior_sessions/#npc_lims.status.behavior_sessions.get_session_raw_data_asset","title":"get_session_raw_data_asset","text":"<pre><code>get_session_raw_data_asset(session: str | npc_session.SessionRecord) -&gt; DataAssetAPI\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; get_session_raw_data_asset('668759_20230711')[\"id\"]\n'83636983-f80d-42d6-a075-09b60c6abd5e'\n</code></pre> Source code in <code>npc_lims/metadata/codeocean.py</code> <pre><code>def get_session_raw_data_asset(\n    session: str | npc_session.SessionRecord,\n) -&gt; DataAssetAPI:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; get_session_raw_data_asset('668759_20230711')[\"id\"]\n        '83636983-f80d-42d6-a075-09b60c6abd5e'\n    \"\"\"\n    session = npc_session.SessionRecord(session)\n    raw_assets = tuple(\n        asset for asset in get_session_data_assets(session) if is_raw_data_asset(asset)\n    )\n\n    if not raw_assets:\n        raise ValueError(f\"Session {session} has no raw data assets\")\n\n    return get_single_data_asset(session, raw_assets, \"raw\")\n</code></pre>"},{"location":"reference/npc_lims/status/behavior_sessions/#npc_lims.status.behavior_sessions.get_session_result_data_assets","title":"get_session_result_data_assets","text":"<pre><code>get_session_result_data_assets(session: str | npc_session.SessionRecord) -&gt; tuple[DataAssetAPI, ...]\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; result_data_assets = get_session_result_data_assets('668759_20230711')\n&gt;&gt;&gt; assert len(result_data_assets) &gt; 0\n</code></pre> Source code in <code>npc_lims/metadata/codeocean.py</code> <pre><code>def get_session_result_data_assets(\n    session: str | npc_session.SessionRecord,\n) -&gt; tuple[DataAssetAPI, ...]:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; result_data_assets = get_session_result_data_assets('668759_20230711')\n        &gt;&gt;&gt; assert len(result_data_assets) &gt; 0\n    \"\"\"\n    session_data_assets = get_session_data_assets(session)\n    result_data_assets = tuple(\n        data_asset\n        for data_asset in session_data_assets\n        if data_asset[\"type\"] == \"result\"\n    )\n\n    return result_data_assets\n</code></pre>"},{"location":"reference/npc_lims/status/behavior_sessions/#npc_lims.status.behavior_sessions.get_session_sorted_data_asset","title":"get_session_sorted_data_asset","text":"<pre><code>get_session_sorted_data_asset(session: str | npc_session.SessionRecord) -&gt; DataAssetAPI\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sorted_data_asset = get_session_sorted_data_asset('668759_20230711')\n&gt;&gt;&gt; assert isinstance(sorted_data_asset, dict)\n</code></pre> Source code in <code>npc_lims/metadata/codeocean.py</code> <pre><code>def get_session_sorted_data_asset(\n    session: str | npc_session.SessionRecord,\n) -&gt; DataAssetAPI:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; sorted_data_asset = get_session_sorted_data_asset('668759_20230711')\n        &gt;&gt;&gt; assert isinstance(sorted_data_asset, dict)\n    \"\"\"\n    session_result_data_assets = get_session_data_assets(session)\n    sorted_data_assets = tuple(\n        data_asset\n        for data_asset in session_result_data_assets\n        if is_sorted_data_asset(data_asset) and data_asset[\"files\"] &gt; 2\n    )\n\n    if not sorted_data_assets:\n        raise ValueError(f\"Session {session} has no sorted data assets\")\n\n    return get_single_data_asset(session, sorted_data_assets, \"sorted\")\n</code></pre>"},{"location":"reference/npc_lims/status/behavior_sessions/#npc_lims.status.behavior_sessions.get_session_units_data_asset","title":"get_session_units_data_asset  <code>cached</code>","text":"<pre><code>get_session_units_data_asset(session_id: str | npc_session.SessionRecord) -&gt; DataAssetAPI\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; units_data_asset = get_session_units_data_asset('668759_20230711')\n&gt;&gt;&gt; assert units_data_asset is not None\n</code></pre> Source code in <code>npc_lims/metadata/codeocean.py</code> <pre><code>@functools.cache\ndef get_session_units_data_asset(\n    session_id: str | npc_session.SessionRecord,\n) -&gt; DataAssetAPI:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; units_data_asset = get_session_units_data_asset('668759_20230711')\n        &gt;&gt;&gt; assert units_data_asset is not None\n    \"\"\"\n    session = npc_session.SessionRecord(session_id)\n    session_data_assets = get_session_data_assets(session)\n    session_units_data_assets = tuple(\n        data_asset\n        for data_asset in session_data_assets\n        if \"units\" in data_asset[\"name\"] and \"peak\" not in data_asset[\"name\"]\n    )\n    session_units_data_asset = get_single_data_asset(\n        session, session_units_data_assets, \"units\"\n    )\n\n    return session_units_data_asset\n</code></pre>"},{"location":"reference/npc_lims/status/behavior_sessions/#npc_lims.status.behavior_sessions.get_session_units_spikes_with_peak_channels_data_asset","title":"get_session_units_spikes_with_peak_channels_data_asset  <code>cached</code>","text":"<pre><code>get_session_units_spikes_with_peak_channels_data_asset(session_id: str | npc_session.SessionRecord) -&gt; DataAssetAPI\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; units_peak_channel_data_asset = get_session_units_spikes_with_peak_channels_data_asset('668759_20230711')\n&gt;&gt;&gt; assert units_peak_channel_data_asset is not None\n</code></pre> Source code in <code>npc_lims/metadata/codeocean.py</code> <pre><code>@functools.cache\ndef get_session_units_spikes_with_peak_channels_data_asset(\n    session_id: str | npc_session.SessionRecord,\n) -&gt; DataAssetAPI:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; units_peak_channel_data_asset = get_session_units_spikes_with_peak_channels_data_asset('668759_20230711')\n        &gt;&gt;&gt; assert units_peak_channel_data_asset is not None\n    \"\"\"\n    session = npc_session.SessionRecord(session_id)\n    session_data_assets = get_session_data_assets(session)\n    session_units_spikes_peak_channel_data_assets = tuple(\n        data_asset\n        for data_asset in session_data_assets\n        if \"units_with_peak_channels\" in data_asset[\"name\"]\n    )\n\n    session_units_spikes_peak_channel_data_asset = get_single_data_asset(\n        session, session_units_spikes_peak_channel_data_assets, \"units\"\n    )\n\n    return session_units_spikes_peak_channel_data_asset\n</code></pre>"},{"location":"reference/npc_lims/status/behavior_sessions/#npc_lims.status.behavior_sessions.get_sessions_from_data_repo","title":"get_sessions_from_data_repo  <code>cached</code>","text":"<pre><code>get_sessions_from_data_repo(subject: int | str | None = None) -&gt; tuple[npc_session.SessionRecord, ...] | dict[npc_session.SubjectRecord, tuple[npc_session.SessionRecord, ...]]\n</code></pre> <p>Globs synced behavior data repo for sessions.</p> <p>Examples:</p> <p>get a dict of all subjects mapped to their sessions:</p> <pre><code>&gt;&gt;&gt; all_subjects_sessions = get_sessions_from_data_repo()\n&gt;&gt;&gt; len(all_subjects_sessions)\n93\n</code></pre> <pre><code>&gt;&gt;&gt; len(tuple(all_subjects_sessions.values())[0])\n45\n</code></pre> <p>get a specific subject's sessions as a sequence:</p> <pre><code>&gt;&gt;&gt; get_sessions_from_data_repo(366122)[0]\n'366122_2023-01-30'\n</code></pre> Source code in <code>npc_lims/status/behavior_sessions.py</code> <pre><code>@functools.cache\ndef get_sessions_from_data_repo(\n    subject: int | str | None = None,\n) -&gt; (\n    tuple[npc_session.SessionRecord, ...]\n    | dict[npc_session.SubjectRecord, tuple[npc_session.SessionRecord, ...]]\n):\n    \"\"\"\n    Globs synced behavior data repo for sessions.\n\n    Examples:\n        get a dict of all subjects mapped to their sessions:\n        &gt;&gt;&gt; all_subjects_sessions = get_sessions_from_data_repo()\n        &gt;&gt;&gt; len(all_subjects_sessions)                      # doctest: +SKIP\n        93\n\n        &gt;&gt;&gt; len(tuple(all_subjects_sessions.values())[0])   # doctest: +SKIP\n        45\n\n        get a specific subject's sessions as a sequence:\n        &gt;&gt;&gt; get_sessions_from_data_repo(366122)[0]\n        '366122_2023-01-30'\n\n    \"\"\"\n\n    def _get_sessions_from_subfolders(\n        folder: upath.UPath,\n    ) -&gt; tuple[npc_session.SessionRecord, ...]:\n        sessions = set()\n        for path in folder.iterdir():\n            try:\n                session = npc_session.SessionRecord(path.as_posix())\n            except ValueError:\n                continue\n            sessions.add(session)\n        return tuple(sorted(sessions))\n\n    if subject is not None:\n        return _get_sessions_from_subfolders(\n            get_subject_folders_from_data_repo(subject)\n        )\n\n    subject_to_sessions: dict[\n        npc_session.SubjectRecord, tuple[npc_session.SessionRecord, ...]\n    ] = {}\n    for _subject, folder in get_subject_folders_from_data_repo().items():\n        subject_to_sessions.setdefault(_subject, _get_sessions_from_subfolders(folder))\n    return subject_to_sessions\n</code></pre>"},{"location":"reference/npc_lims/status/behavior_sessions/#npc_lims.status.behavior_sessions.get_sessions_from_training_db","title":"get_sessions_from_training_db  <code>cached</code>","text":"<pre><code>get_sessions_from_training_db() -&gt; dict[int, tuple[dict[str, Any], ...]]\n</code></pre> <p>Includes NSB sessions.</p> <p>{subject: ({spreadsheet row}, ... )}</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sessions = get_sessions_from_training_db()\n&gt;&gt;&gt; assert len(sessions) &gt; 0\n&gt;&gt;&gt; sessions[659250][0]\n{'ID': 1, 'start_time': '2023-03-07 12:56:27', 'rig_name': 'B2', 'task_version': 'stage 0 moving', 'hits': '0', 'dprime_same_modality': '', 'dprime_other_modality_go_stim': '', 'pass': '1', 'ignore': '0'}\n</code></pre> Source code in <code>npc_lims/status/behavior_sessions.py</code> <pre><code>@functools.cache\ndef get_sessions_from_training_db() -&gt; dict[int, tuple[dict[str, Any], ...]]:\n    \"\"\"\n    Includes NSB sessions.\n\n    {subject: ({spreadsheet row}, ... )}\n\n    Examples:\n        &gt;&gt;&gt; sessions = get_sessions_from_training_db()\n        &gt;&gt;&gt; assert len(sessions) &gt; 0\n        &gt;&gt;&gt; sessions[659250][0]                         # doctest: +SKIP\n        {'ID': 1, 'start_time': '2023-03-07 12:56:27', 'rig_name': 'B2', 'task_version': 'stage 0 moving', 'hits': '0', 'dprime_same_modality': '', 'dprime_other_modality_go_stim': '', 'pass': '1', 'ignore': '0'}\n    \"\"\"\n    sessions: dict[int, tuple[dict[str, Any], ...]] = {}\n    for nsb in (False, True):\n        db = npc_lims.metadata.get_training_db(nsb)\n        ## using tables other than `all_mice`\n        subjects = tuple(\n            npc_session.SubjectRecord(table[\"name\"])\n            for table in db.execute(\n                \"SELECT name FROM sqlite_master WHERE type='table'\"\n            ).fetchall()\n            if table[\"name\"] not in (\"sqlite_sequence\", \"all_mice\")\n        )\n        for subject in subjects:\n            sessions[subject] = tuple(\n                row | {\"nsb\": nsb}\n                for row in db.execute(\n                    f\"SELECT * FROM '{subject}' WHERE ignore != 1\"\n                ).fetchall()\n            )\n    return sessions\n</code></pre>"},{"location":"reference/npc_lims/status/behavior_sessions/#npc_lims.status.behavior_sessions.get_sessions_with_data_assets","title":"get_sessions_with_data_assets  <code>cached</code>","text":"<pre><code>get_sessions_with_data_assets(subject: str | int) -&gt; tuple[npc_session.SessionRecord, ...]\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sessions = get_sessions_with_data_assets(668759)\n&gt;&gt;&gt; assert len(sessions) &gt; 0\n</code></pre> Source code in <code>npc_lims/metadata/codeocean.py</code> <pre><code>@functools.cache\ndef get_sessions_with_data_assets(\n    subject: str | int,\n) -&gt; tuple[npc_session.SessionRecord, ...]:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; sessions = get_sessions_with_data_assets(668759)\n        &gt;&gt;&gt; assert len(sessions) &gt; 0\n    \"\"\"\n    assets = get_subject_data_assets(subject)\n    sessions = set()\n    for asset in assets:\n        try:\n            session = npc_session.SessionRecord(asset[\"name\"])\n        except ValueError:\n            continue\n        sessions.add(session)\n    return tuple(sessions)\n</code></pre>"},{"location":"reference/npc_lims/status/behavior_sessions/#npc_lims.status.behavior_sessions.get_settings_xml_path_from_s3","title":"get_settings_xml_path_from_s3  <code>cached</code>","text":"<pre><code>get_settings_xml_path_from_s3(session: str | npc_session.SessionRecord) -&gt; upath.UPath\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; settings_xml_path = get_settings_xml_path_from_s3('670180-2023-07-26')\n&gt;&gt;&gt; assert settings_xml_path.exists()\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_settings_xml_path_from_s3(\n    session: str | npc_session.SessionRecord,\n) -&gt; upath.UPath:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; settings_xml_path = get_settings_xml_path_from_s3('670180-2023-07-26')\n        &gt;&gt;&gt; assert settings_xml_path.exists()\n    \"\"\"\n    raw_data_paths_s3 = get_raw_data_paths_from_s3(session)\n\n    directories = (\n        raw_path\n        for raw_path in raw_data_paths_s3\n        if raw_path.is_dir() and \".zarr\" not in raw_path.suffix\n    )\n    return tuple(raw_path / \"settings.xml\" for raw_path in directories)[0]\n</code></pre>"},{"location":"reference/npc_lims/status/behavior_sessions/#npc_lims.status.behavior_sessions.get_sorted_data_paths_from_s3","title":"get_sorted_data_paths_from_s3  <code>cached</code>","text":"<pre><code>get_sorted_data_paths_from_s3(session: str | npc_session.SessionRecord | None = None, sorted_data_asset_id: str | None = None) -&gt; tuple[upath.UPath, ...]\n</code></pre> <p>Gets the top level files/folders for the sorted data    </p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sorted_data_s3_paths = get_sorted_data_paths_from_s3('668759_20230711')\n&gt;&gt;&gt; assert len(sorted_data_s3_paths) &gt; 0\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_sorted_data_paths_from_s3(\n    session: str | npc_session.SessionRecord | None = None,\n    sorted_data_asset_id: str | None = None,\n) -&gt; tuple[upath.UPath, ...]:\n    \"\"\"\n    Gets the top level files/folders for the sorted data    \n\n    Examples:\n        &gt;&gt;&gt; sorted_data_s3_paths = get_sorted_data_paths_from_s3('668759_20230711')\n        &gt;&gt;&gt; assert len(sorted_data_s3_paths) &gt; 0\n    \"\"\"\n    if sorted_data_asset_id is not None:\n        sorted_data_asset = codeocean.get_data_asset(sorted_data_asset_id)\n    elif session is not None:\n        sorted_data_asset = codeocean.get_session_sorted_data_asset(session)\n    else:\n        raise ValueError(\"Must provide either session or sorted_data_asset_id\")\n    return tuple(get_data_asset_s3_path(sorted_data_asset).iterdir())\n</code></pre>"},{"location":"reference/npc_lims/status/behavior_sessions/#npc_lims.status.behavior_sessions.get_sorted_precurated_paths_from_s3","title":"get_sorted_precurated_paths_from_s3  <code>cached</code>","text":"<pre><code>get_sorted_precurated_paths_from_s3(session: str | npc_session.SessionRecord) -&gt; tuple[upath.UPath, ...]\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sorted_precurated_paths = get_sorted_precurated_paths_from_s3('662892_2023-08-21')\n&gt;&gt;&gt; assert len(sorted_precurated_paths) &gt; 0\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_sorted_precurated_paths_from_s3(\n    session: str | npc_session.SessionRecord,\n) -&gt; tuple[upath.UPath, ...]:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; sorted_precurated_paths = get_sorted_precurated_paths_from_s3('662892_2023-08-21')\n        &gt;&gt;&gt; assert len(sorted_precurated_paths) &gt; 0\n    \"\"\"\n    sorted_paths = get_sorted_data_paths_from_s3(session)\n    sorted_precurated_dirs = tuple(\n        next(\n            path for path in sorted_paths if \"sorting_precurated\" in str(path)\n        ).iterdir()\n    )\n\n    return sorted_precurated_dirs\n</code></pre>"},{"location":"reference/npc_lims/status/behavior_sessions/#npc_lims.status.behavior_sessions.get_spike_sorted_paths_from_s3","title":"get_spike_sorted_paths_from_s3  <code>cached</code>","text":"<pre><code>get_spike_sorted_paths_from_s3(session: str | npc_session.SessionRecord) -&gt; tuple[upath.UPath, ...]\n</code></pre> <p>spike_sorted_paths = get_spike_sorted_paths_from_s3('662892_20230821') assert spike_sorted_paths[0].exists()</p> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_spike_sorted_paths_from_s3(\n    session: str | npc_session.SessionRecord,\n) -&gt; tuple[upath.UPath, ...]:\n    \"\"\"\n        &gt;&gt;&gt; spike_sorted_paths = get_spike_sorted_paths_from_s3('662892_20230821')\n        &gt;&gt;&gt; assert spike_sorted_paths[0].exists()\n    \"\"\"\n    sorted_data_paths = get_sorted_data_paths_from_s3(session)\n    return tuple(\n        next(path for path in sorted_data_paths if \"spike\" in str(path)).iterdir()\n    )\n</code></pre>"},{"location":"reference/npc_lims/status/behavior_sessions/#npc_lims.status.behavior_sessions.get_spike_sorting_device_path_from_s3","title":"get_spike_sorting_device_path_from_s3  <code>cached</code>","text":"<pre><code>get_spike_sorting_device_path_from_s3(session: str | npc_session.SessionRecord, device_name: str) -&gt; upath.UPath\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; get_spike_sorting_device_path_from_s3('662892_20230821', 'ProbeA')\nS3Path('s3://codeocean-s3datasetsbucket-1u41qdg42ur9/d527db85-39b7-4c4f-a465-9ca499b0ca47/spikesorted/experiment1_Record Node 102#Neuropix-PXI-100.ProbeA-AP_recording1/sorting_cached.npz')\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_spike_sorting_device_path_from_s3(\n    session: str | npc_session.SessionRecord, device_name: str\n) -&gt; upath.UPath:\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; get_spike_sorting_device_path_from_s3('662892_20230821', 'ProbeA')\n        S3Path('s3://codeocean-s3datasetsbucket-1u41qdg42ur9/d527db85-39b7-4c4f-a465-9ca499b0ca47/spikesorted/experiment1_Record Node 102#Neuropix-PXI-100.ProbeA-AP_recording1/sorting_cached.npz')\n    \"\"\"\n    spike_sorted_paths = get_spike_sorted_paths_from_s3(session)\n    spike_probe_paths = next(\n        path for path in spike_sorted_paths if device_name in str(path)\n    ).iterdir()\n    sorting_cached_path = next(\n        path for path in spike_probe_paths if \"sorting_cached\" in str(path)\n    )\n\n    return sorting_cached_path\n</code></pre>"},{"location":"reference/npc_lims/status/behavior_sessions/#npc_lims.status.behavior_sessions.get_spike_times_codeocean_kilosort_path_from_s3","title":"get_spike_times_codeocean_kilosort_path_from_s3  <code>cached</code>","text":"<pre><code>get_spike_times_codeocean_kilosort_path_from_s3(session: str | npc_session.SessionRecord) -&gt; upath.UPath\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; path = get_spike_times_codeocean_kilosort_path_from_s3('668759_20230711')\n&gt;&gt;&gt; assert path\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_spike_times_codeocean_kilosort_path_from_s3(\n    session: str | npc_session.SessionRecord,\n) -&gt; upath.UPath:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; path = get_spike_times_codeocean_kilosort_path_from_s3('668759_20230711')\n        &gt;&gt;&gt; assert path\n    \"\"\"\n    files = get_units_spikes_codeocean_kilosort_top_level_files(session)\n    spike_times_path = next(path for path in files if \"spike\" in str(path))\n\n    return spike_times_path\n</code></pre>"},{"location":"reference/npc_lims/status/behavior_sessions/#npc_lims.status.behavior_sessions.get_spikesorted_cache_paths_from_s3","title":"get_spikesorted_cache_paths_from_s3  <code>cached</code>","text":"<pre><code>get_spikesorted_cache_paths_from_s3(session: str | npc_session.SessionRecord) -&gt; tuple[upath.UPath, ...]\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; spike_sorted_cache_paths = get_spikesorted_cache_paths_from_s3('662892_20230821')\n&gt;&gt;&gt; assert len(spike_sorted_cache_paths) &gt; 0\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_spikesorted_cache_paths_from_s3(\n    session: str | npc_session.SessionRecord,\n) -&gt; tuple[upath.UPath, ...]:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; spike_sorted_cache_paths = get_spikesorted_cache_paths_from_s3('662892_20230821')\n        &gt;&gt;&gt; assert len(spike_sorted_cache_paths) &gt; 0\n    \"\"\"\n    spike_sorted_paths = get_spike_sorted_paths_from_s3(session)\n    spike_sorted_cache_files = tuple(\n        next(path.glob(\"sorting_cached.npz\")) for path in spike_sorted_paths\n    )\n\n    return spike_sorted_cache_files\n</code></pre>"},{"location":"reference/npc_lims/status/behavior_sessions/#npc_lims.status.behavior_sessions.get_subject_data_assets","title":"get_subject_data_assets  <code>cached</code>","text":"<pre><code>get_subject_data_assets(subject: str | int) -&gt; tuple[DataAssetAPI, ...]\n</code></pre> <p>All assets associated with a subject ID.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; assets = get_subject_data_assets(668759)\n&gt;&gt;&gt; assert len(assets) &gt; 0\n</code></pre> Source code in <code>npc_lims/metadata/codeocean.py</code> <pre><code>@functools.cache\ndef get_subject_data_assets(subject: str | int) -&gt; tuple[DataAssetAPI, ...]:\n    \"\"\"\n    All assets associated with a subject ID.\n\n    Examples:\n        &gt;&gt;&gt; assets = get_subject_data_assets(668759)\n        &gt;&gt;&gt; assert len(assets) &gt; 0\n    \"\"\"\n    response = get_codeocean_client().search_all_data_assets(\n        query=f\"subject id: {npc_session.SubjectRecord(subject)}\"\n    )\n    response.raise_for_status()\n    return response.json()[\"results\"]\n</code></pre>"},{"location":"reference/npc_lims/status/behavior_sessions/#npc_lims.status.behavior_sessions.get_subject_folders_from_data_repo","title":"get_subject_folders_from_data_repo  <code>cached</code>","text":"<pre><code>get_subject_folders_from_data_repo(subject: int | str | None = None) -&gt; dict[npc_session.SubjectRecord, upath.UPath] | upath.UPath\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; all_subjects = get_subject_folders_from_data_repo()\n&gt;&gt;&gt; len(all_subjects)\n93\n</code></pre> <pre><code>&gt;&gt;&gt; get_subject_folders_from_data_repo(366122).name\n'366122'\n</code></pre> Source code in <code>npc_lims/status/behavior_sessions.py</code> <pre><code>@functools.cache\ndef get_subject_folders_from_data_repo(\n    subject: int | str | None = None,\n) -&gt; dict[npc_session.SubjectRecord, upath.UPath] | upath.UPath:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; all_subjects = get_subject_folders_from_data_repo()\n        &gt;&gt;&gt; len(all_subjects)                               # doctest: +SKIP\n        93\n\n        &gt;&gt;&gt; get_subject_folders_from_data_repo(366122).name\n        '366122'\n    \"\"\"\n    if subject is not None:\n        if not (\n            path := npc_lims.paths.DR_DATA_REPO\n            / str(npc_session.SubjectRecord(subject))\n        ).exists():\n            raise FileNotFoundError(f\"{path=} does not exist\")\n        return path\n    subject_to_folder: dict[npc_session.SubjectRecord, upath.UPath] = {}\n    for path in npc_lims.paths.DR_DATA_REPO.iterdir():\n        if path.is_file():\n            continue\n        if any(invalid_key in path.name for invalid_key in INVALID_SUBJECT_KEYS):\n            continue\n        try:\n            _subject = npc_session.SubjectRecord(path.name)\n        except ValueError:\n            continue\n        if _subject in subject_to_folder:\n            raise ValueError(f\"Duplicate path for {_subject=}: {path}\")\n        subject_to_folder[_subject] = path\n    return subject_to_folder\n</code></pre>"},{"location":"reference/npc_lims/status/behavior_sessions/#npc_lims.status.behavior_sessions.get_subjects_from_training_db","title":"get_subjects_from_training_db","text":"<pre><code>get_subjects_from_training_db(nsb: bool = False) -&gt; dict[npc_session.SubjectRecord, dict[str, Any]]\n</code></pre> <p>Dynamic Routing training spreadsheet info.</p> <p>{subject: ({spreadsheet row}, ... )}</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; subjects = get_subjects_from_training_db(nsb=True)\n&gt;&gt;&gt; assert len(subjects) &gt; 0\n&gt;&gt;&gt; subjects[659250]\n{'ID': 50, 'mouse_id': '659250', 'alive': 'False', 'genotype': 'PV Cre x Ai32', 'sex': 'male', 'birthdate': '2022-11-21 00:00:00', 'surgery_week': '2023-01-30 00:00:00', 'craniotomy': 'True', 'trainer': 'Sam', 'regimen': '7', 'wheel_fixed': 'False', 'timeouts': 'True', 'next_task_version': 'dead'}\n</code></pre> Source code in <code>npc_lims/status/behavior_sessions.py</code> <pre><code>def get_subjects_from_training_db(\n    nsb: bool = False,\n) -&gt; dict[npc_session.SubjectRecord, dict[str, Any]]:\n    \"\"\"\n    Dynamic Routing training spreadsheet info.\n\n    {subject: ({spreadsheet row}, ... )}\n\n    Examples:\n        &gt;&gt;&gt; subjects = get_subjects_from_training_db(nsb=True)\n        &gt;&gt;&gt; assert len(subjects) &gt; 0\n        &gt;&gt;&gt; subjects[659250]                       # doctest: +SKIP\n        {'ID': 50, 'mouse_id': '659250', 'alive': 'False', 'genotype': 'PV Cre x Ai32', 'sex': 'male', 'birthdate': '2022-11-21 00:00:00', 'surgery_week': '2023-01-30 00:00:00', 'craniotomy': 'True', 'trainer': 'Sam', 'regimen': '7', 'wheel_fixed': 'False', 'timeouts': 'True', 'next_task_version': 'dead'}\n    \"\"\"\n    db = npc_lims.metadata.get_training_db(nsb)\n\n    # use entries in `all_mice` table\n    subjects = tuple(\n        {\n            npc_session.SubjectRecord(result[\"mouse_id\"])\n            for result in db.execute(\"SELECT * FROM all_mice\").fetchall()\n        }\n    )\n\n    return {\n        subject: db.execute(\n            \"SELECT * FROM 'all_mice' WHERE mouse_id=?\", (subject,)\n        ).fetchone()\n        for subject in subjects\n    }\n</code></pre>"},{"location":"reference/npc_lims/status/behavior_sessions/#npc_lims.status.behavior_sessions.get_surface_channel_root","title":"get_surface_channel_root","text":"<pre><code>get_surface_channel_root(session: str | npc_session.SessionRecord) -&gt; upath.UPath\n</code></pre> <p>Reconstruct path to surface channel data in bucket (e.g. on s3) using data-asset info from Code Ocean.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; get_surface_channel_root('660023_20230808')\nS3Path('s3://aind-ephys-data/ecephys_660023_2023-08-08_15-11-14')\n&gt;&gt;&gt; assert get_surface_channel_root('660023_20230808') != get_raw_data_root('660023_20230808')\n&gt;&gt;&gt; get_surface_channel_root('649943_20230216')\nTraceback (most recent call last):\n...\nFileNotFoundError: 649943_20230216 has no surface channel data assets\n</code></pre> Source code in <code>npc_lims/metadata/codeocean.py</code> <pre><code>def get_surface_channel_root(session: str | npc_session.SessionRecord) -&gt; upath.UPath:\n    \"\"\"Reconstruct path to surface channel data in bucket (e.g. on s3) using data-asset\n    info from Code Ocean.\n\n    Examples:\n        &gt;&gt;&gt; get_surface_channel_root('660023_20230808')\n        S3Path('s3://aind-ephys-data/ecephys_660023_2023-08-08_15-11-14')\n        &gt;&gt;&gt; assert get_surface_channel_root('660023_20230808') != get_raw_data_root('660023_20230808')\n        &gt;&gt;&gt; get_surface_channel_root('649943_20230216')\n        Traceback (most recent call last):\n        ...\n        FileNotFoundError: 649943_20230216 has no surface channel data assets\n    \"\"\"\n    session = npc_session.SessionRecord(session)\n    raw_assets = tuple(\n        asset for asset in get_session_data_assets(session) if is_raw_data_asset(asset)\n    )\n    try:\n        raw_asset = get_single_data_asset(session.with_idx(1), raw_assets, \"raw\")\n    except SessionIndexError:\n        raise FileNotFoundError(\n            f\"{session} has no surface channel data assets\"\n        ) from None\n    return get_path_from_data_asset(raw_asset)\n</code></pre>"},{"location":"reference/npc_lims/status/behavior_sessions/#npc_lims.status.behavior_sessions.get_template_metrics_paths_from_s3","title":"get_template_metrics_paths_from_s3  <code>cached</code>","text":"<pre><code>get_template_metrics_paths_from_s3(session: str | npc_session.SessionRecord) -&gt; tuple[upath.UPath, ...]\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; template_metrics_paths = get_template_metrics_paths_from_s3('662892_2023-08-21')\n&gt;&gt;&gt; assert len(template_metrics_paths) &gt; 0\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_template_metrics_paths_from_s3(\n    session: str | npc_session.SessionRecord,\n) -&gt; tuple[upath.UPath, ...]:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; template_metrics_paths = get_template_metrics_paths_from_s3('662892_2023-08-21')\n        &gt;&gt;&gt; assert len(template_metrics_paths) &gt; 0\n    \"\"\"\n    sorted_paths = get_sorted_data_paths_from_s3(session)\n    postprocessed_files = next(\n        path for path in sorted_paths if \"postprocessed\" in str(path)\n    ).iterdir()\n    template_metrics_paths = tuple(\n        next(path.glob(\"template_metrics/metrics.csv\")) for path in postprocessed_files\n    )\n\n    return template_metrics_paths\n</code></pre>"},{"location":"reference/npc_lims/status/behavior_sessions/#npc_lims.status.behavior_sessions.get_tissuecyte_annotation_files_from_s3","title":"get_tissuecyte_annotation_files_from_s3  <code>cached</code>","text":"<pre><code>get_tissuecyte_annotation_files_from_s3(session: str | npc_session.SessionRecord) -&gt; tuple[upath.UPath, ...]\n</code></pre> <p>For each probe inserted, get a csv file containing CCF coordinates for each electrode (channel) on the probe.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; electrode_files = get_tissuecyte_annotation_files_from_s3('626791_2022-08-16')\n&gt;&gt;&gt; assert len(electrode_files) &gt; 0\n&gt;&gt;&gt; electrode_files[0].name\n'Probe_A2_channels_626791_warped_processed.csv'\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_tissuecyte_annotation_files_from_s3(\n    session: str | npc_session.SessionRecord,\n) -&gt; tuple[upath.UPath, ...]:\n    \"\"\"For each probe inserted, get a csv file containing CCF coordinates for each\n    electrode (channel) on the probe.\n\n    Examples:\n        &gt;&gt;&gt; electrode_files = get_tissuecyte_annotation_files_from_s3('626791_2022-08-16')\n        &gt;&gt;&gt; assert len(electrode_files) &gt; 0\n        &gt;&gt;&gt; electrode_files[0].name\n        'Probe_A2_channels_626791_warped_processed.csv'\n    \"\"\"\n    session = npc_session.SessionRecord(session)\n    day = tracked_sessions.get_session_info(session).experiment_day\n    subject_electrode_network_path = TISSUECYTE_REPO / str(session.subject.id)\n\n    if not subject_electrode_network_path.exists():\n        raise FileNotFoundError(\n            f\"CCF annotations for {session} have not been uploaded to s3\"\n        )\n\n    electrode_files = tuple(\n        subject_electrode_network_path.glob(\n            f\"Probe_*{day}_channels_{str(session.subject.id)}_warped_processed.csv\"\n        )\n    )\n    if not electrode_files:\n        raise FileNotFoundError(\n            f\"{subject_electrode_network_path} exists, but no CCF annotation files found matching {day} and {session.subject.id} - check session day\"\n        )\n\n    return electrode_files\n</code></pre>"},{"location":"reference/npc_lims/status/behavior_sessions/#npc_lims.status.behavior_sessions.get_training_db","title":"get_training_db  <code>cached</code>","text":"<pre><code>get_training_db(nsb: bool = False) -&gt; sqlite3.Connection\n</code></pre> <p>Download db to tempdir, open connection, return connection.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; assert get_training_db()\n</code></pre> Source code in <code>npc_lims/metadata/spreadsheets.py</code> <pre><code>@functools.cache\ndef get_training_db(nsb: bool = False) -&gt; sqlite3.Connection:\n    \"\"\"\n    Download db to tempdir, open connection, return connection.\n\n    Examples:\n        &gt;&gt;&gt; assert get_training_db()\n    \"\"\"\n    db_path = upath.UPath(tempfile.mkstemp(suffix=\".db\")[1])\n    s3_path = next(\n        path for path in get_training_sqlite_paths() if (\"NSB\" in path.name) == nsb\n    )\n    db_path.write_bytes(s3_path.read_bytes())\n    con = sqlite3.connect(db_path)\n\n    def dict_factory(cursor, row):\n        d = {}\n        for idx, col in enumerate(cursor.description):\n            d[col[0]] = row[idx]\n        return d\n\n    con.row_factory = dict_factory\n    return con\n</code></pre>"},{"location":"reference/npc_lims/status/behavior_sessions/#npc_lims.status.behavior_sessions.get_training_spreadsheet_paths","title":"get_training_spreadsheet_paths","text":"<pre><code>get_training_spreadsheet_paths() -&gt; tuple[upath.UPath, ...]\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; assert len(get_training_spreadsheet_paths()) &gt; 0\n</code></pre> Source code in <code>npc_lims/metadata/spreadsheets.py</code> <pre><code>def get_training_spreadsheet_paths() -&gt; tuple[upath.UPath, ...]:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; assert len(get_training_spreadsheet_paths()) &gt; 0\n    \"\"\"\n    return tuple(npc_lims.DR_DATA_REPO.parent.glob(\"DynamicRoutingTraining*.xlsx\"))\n</code></pre>"},{"location":"reference/npc_lims/status/behavior_sessions/#npc_lims.status.behavior_sessions.get_training_sqlite_paths","title":"get_training_sqlite_paths","text":"<pre><code>get_training_sqlite_paths() -&gt; tuple[upath.UPath, ...]\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; assert len(get_training_sqlite_paths()) == len(get_training_spreadsheet_paths())\n</code></pre> Source code in <code>npc_lims/metadata/spreadsheets.py</code> <pre><code>def get_training_sqlite_paths() -&gt; tuple[upath.UPath, ...]:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; assert len(get_training_sqlite_paths()) == len(get_training_spreadsheet_paths())\n    \"\"\"\n    return tuple(\n        path.with_suffix(\".sqlite\") for path in get_training_spreadsheet_paths()\n    )\n</code></pre>"},{"location":"reference/npc_lims/status/behavior_sessions/#npc_lims.status.behavior_sessions.get_unit_locations_paths_from_s3","title":"get_unit_locations_paths_from_s3  <code>cached</code>","text":"<pre><code>get_unit_locations_paths_from_s3(session: str | npc_session.SessionRecord) -&gt; tuple[upath.UPath, ...]\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; unit_locations_paths = get_unit_locations_paths_from_s3('662892_2023-08-21')\n&gt;&gt;&gt; assert len(unit_locations_paths) &gt; 0\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_unit_locations_paths_from_s3(\n    session: str | npc_session.SessionRecord,\n) -&gt; tuple[upath.UPath, ...]:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; unit_locations_paths = get_unit_locations_paths_from_s3('662892_2023-08-21')\n        &gt;&gt;&gt; assert len(unit_locations_paths) &gt; 0\n    \"\"\"\n    sorted_paths = get_sorted_data_paths_from_s3(session)\n    postprocessed_files = next(\n        path for path in sorted_paths if \"postprocessed\" in str(path)\n    ).iterdir()\n    unit_locations_paths = tuple(\n        next(path.glob(\"unit_locations/unit_locations.npy\"))\n        for path in postprocessed_files\n    )\n\n    return unit_locations_paths\n</code></pre>"},{"location":"reference/npc_lims/status/behavior_sessions/#npc_lims.status.behavior_sessions.get_units_codeoean_kilosort_path_from_s3","title":"get_units_codeoean_kilosort_path_from_s3  <code>cached</code>","text":"<pre><code>get_units_codeoean_kilosort_path_from_s3(session: str | npc_session.SessionRecord) -&gt; upath.UPath\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; path = get_units_codeoean_kilosort_path_from_s3('668759_20230711')\n&gt;&gt;&gt; assert path\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_units_codeoean_kilosort_path_from_s3(\n    session: str | npc_session.SessionRecord,\n) -&gt; upath.UPath:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; path = get_units_codeoean_kilosort_path_from_s3('668759_20230711')\n        &gt;&gt;&gt; assert path\n    \"\"\"\n    files = get_units_spikes_codeocean_kilosort_top_level_files(session)\n    units_path = next(path for path in files if \"csv\" in str(path))\n\n    return units_path\n</code></pre>"},{"location":"reference/npc_lims/status/behavior_sessions/#npc_lims.status.behavior_sessions.get_units_spikes_codeocean_kilosort_top_level_files","title":"get_units_spikes_codeocean_kilosort_top_level_files  <code>cached</code>","text":"<pre><code>get_units_spikes_codeocean_kilosort_top_level_files(session: str | npc_session.SessionRecord) -&gt; tuple[upath.UPath, ...]\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; paths = get_units_spikes_codeocean_kilosort_top_level_files('668759_20230711')\n&gt;&gt;&gt; assert paths\n</code></pre> Source code in <code>npc_lims/paths/s3.py</code> <pre><code>@functools.cache\ndef get_units_spikes_codeocean_kilosort_top_level_files(\n    session: str | npc_session.SessionRecord,\n) -&gt; tuple[upath.UPath, ...]:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; paths = get_units_spikes_codeocean_kilosort_top_level_files('668759_20230711')\n        &gt;&gt;&gt; assert paths\n    \"\"\"\n    units_spikes_data_asset = (\n        codeocean.get_session_units_spikes_with_peak_channels_data_asset(session)\n    )\n\n    units_directory = next(\n        unit_path\n        for unit_path in get_data_asset_s3_path(units_spikes_data_asset).iterdir()\n        if unit_path.is_dir()\n    )\n\n    return tuple(units_directory.iterdir())\n</code></pre>"},{"location":"reference/npc_lims/status/behavior_sessions/#npc_lims.status.behavior_sessions.is_raw_data_asset","title":"is_raw_data_asset","text":"<pre><code>is_raw_data_asset(asset: str | DataAssetAPI) -&gt; bool\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; is_raw_data_asset('83636983-f80d-42d6-a075-09b60c6abd5e')\nTrue\n&gt;&gt;&gt; is_raw_data_asset('173e2fdc-0ca3-4a4e-9886-b74207a91a9a')\nFalse\n</code></pre> Source code in <code>npc_lims/metadata/codeocean.py</code> <pre><code>def is_raw_data_asset(asset: str | DataAssetAPI) -&gt; bool:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; is_raw_data_asset('83636983-f80d-42d6-a075-09b60c6abd5e')\n        True\n        &gt;&gt;&gt; is_raw_data_asset('173e2fdc-0ca3-4a4e-9886-b74207a91a9a')\n        False\n    \"\"\"\n    asset = get_data_asset(asset)\n    if is_sorted_data_asset(asset):\n        return False\n    return asset.get(\"custom_metadata\", {}).get(\n        \"data level\"\n    ) == \"raw data\" or \"raw\" in asset.get(\"tags\", [])\n</code></pre>"},{"location":"reference/npc_lims/status/behavior_sessions/#npc_lims.status.behavior_sessions.is_sorted_data_asset","title":"is_sorted_data_asset","text":"<pre><code>is_sorted_data_asset(asset: str | DataAssetAPI) -&gt; bool\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; is_sorted_data_asset('173e2fdc-0ca3-4a4e-9886-b74207a91a9a')\nTrue\n&gt;&gt;&gt; is_sorted_data_asset('83636983-f80d-42d6-a075-09b60c6abd5e')\nFalse\n</code></pre> Source code in <code>npc_lims/metadata/codeocean.py</code> <pre><code>def is_sorted_data_asset(asset: str | DataAssetAPI) -&gt; bool:\n    \"\"\"    \n    Examples:\n        &gt;&gt;&gt; is_sorted_data_asset('173e2fdc-0ca3-4a4e-9886-b74207a91a9a')\n        True\n        &gt;&gt;&gt; is_sorted_data_asset('83636983-f80d-42d6-a075-09b60c6abd5e')\n        False\n    \"\"\"\n    asset = get_data_asset(asset)\n    if \"ecephys\" not in asset[\"name\"]:\n        return False\n    return \"sorted\" in asset[\"name\"]\n</code></pre>"},{"location":"reference/npc_lims/status/behavior_sessions/#npc_lims.status.behavior_sessions.update_training_dbs","title":"update_training_dbs","text":"<pre><code>update_training_dbs() -&gt; None\n</code></pre> <p>Read spreadsheets from the data repo and write them to corresponding databases, currently sqlite files in the same directory.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; update_training_dbs()\n</code></pre> Source code in <code>npc_lims/metadata/spreadsheets.py</code> <pre><code>def update_training_dbs() -&gt; None:\n    \"\"\"\n    Read spreadsheets from the data repo and write them to corresponding\n    databases, currently sqlite files in the same directory.\n\n    Examples:\n        &gt;&gt;&gt; update_training_dbs()\n    \"\"\"\n    for spreadsheet, sqlite in zip(\n        get_training_spreadsheet_paths(), get_training_sqlite_paths()\n    ):\n        excel_to_sqlite(spreadsheet, sqlite)\n</code></pre>"},{"location":"reference/npc_lims/status/tracked_sessions/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> tracked_sessions","text":""},{"location":"reference/npc_lims/status/tracked_sessions/#npc_lims.status.tracked_sessions","title":"tracked_sessions","text":""},{"location":"reference/npc_lims/status/tracked_sessions/#npc_lims.status.tracked_sessions.SessionInfo","title":"SessionInfo  <code>dataclass</code>","text":"<p>Minimal session metadata obtained quickly from a database.</p> <p>Currently using: https://raw.githubusercontent.com/AllenInstitute/npc_lims/main/tracked_sessions.yaml and training spreadsheets.</p>"},{"location":"reference/npc_lims/status/tracked_sessions/#npc_lims.status.tracked_sessions.SessionInfo.date","title":"date  <code>property</code>","text":"<pre><code>date: npc_session.DateRecord\n</code></pre> <p>YY-MM-DD</p>"},{"location":"reference/npc_lims/status/tracked_sessions/#npc_lims.status.tracked_sessions.SessionInfo.experiment_day","title":"experiment_day  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>experiment_day: int | None = None\n</code></pre> <p>Experiment day (ephys recording, or opto experiment), starting from 1 for each subject. <code>None</code> for training behavior-only sessions.</p>"},{"location":"reference/npc_lims/status/tracked_sessions/#npc_lims.status.tracked_sessions.SessionInfo.idx","title":"idx  <code>property</code>","text":"<pre><code>idx: int\n</code></pre> <p>Session index, starting from 0 for each subject on each day. Currently one session per day, so index isn't specified - implicitly equal to 0.</p>"},{"location":"reference/npc_lims/status/tracked_sessions/#npc_lims.status.tracked_sessions.SessionInfo.is_annotated","title":"is_annotated  <code>cached</code> <code>property</code>","text":"<pre><code>is_annotated: bool\n</code></pre> <p>The subject associated with the sessions has CCF annotation data for probes available on S3.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; next(session.is_annotated for session in get_session_info() if session.is_annotated)\nTrue\n</code></pre>"},{"location":"reference/npc_lims/status/tracked_sessions/#npc_lims.status.tracked_sessions.SessionInfo.is_sorted","title":"is_sorted  <code>cached</code> <code>property</code>","text":"<pre><code>is_sorted: bool\n</code></pre> <p>The AIND sorting pipeline has yielded a Result asset for this session.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; next(session.is_sorted for session in get_session_info() if session.is_sorted)\nTrue\n</code></pre>"},{"location":"reference/npc_lims/status/tracked_sessions/#npc_lims.status.tracked_sessions.SessionInfo.is_surface_channels","title":"is_surface_channels  <code>cached</code> <code>property</code>","text":"<pre><code>is_surface_channels: bool\n</code></pre> <p>The session has ephys data collected separately to record surface channel.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; get_session_info(\"DRpilot_660023_20230808\").is_surface_channels\nTrue\n</code></pre>"},{"location":"reference/npc_lims/status/tracked_sessions/#npc_lims.status.tracked_sessions.SessionInfo.is_sync","title":"is_sync  <code>instance-attribute</code>","text":"<pre><code>is_sync: bool\n</code></pre> <p>The session has sync data, implying more than a behavior-box.</p>"},{"location":"reference/npc_lims/status/tracked_sessions/#npc_lims.status.tracked_sessions.SessionInfo.is_templeton","title":"is_templeton  <code>cached</code> <code>property</code>","text":"<pre><code>is_templeton: bool\n</code></pre> <p>Uses project in <code>tracked_sessions.yaml</code> if available, then infers from whether the session is in Sam's DR training database.</p>"},{"location":"reference/npc_lims/status/tracked_sessions/#npc_lims.status.tracked_sessions.SessionInfo.is_uploaded","title":"is_uploaded  <code>cached</code> <code>property</code>","text":"<pre><code>is_uploaded: bool\n</code></pre> <p>All of the session's raw data has been uploaded to S3 and can be found in CodeOcean. Not the same as <code>cloud_path</code> being non-None: this property indicates a proper session upload via aind tools, with metadata etc.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; next(session.is_uploaded for session in get_session_info() if session.is_uploaded)\nTrue\n</code></pre>"},{"location":"reference/npc_lims/status/tracked_sessions/#npc_lims.status.tracked_sessions.SessionInfo.rig","title":"rig  <code>property</code>","text":"<pre><code>rig: str\n</code></pre> <p>From DR training spreadsheet (<code>NP2</code>, <code>B2</code>, 'BEH.E`).</p> <ul> <li>does not necessarily match <code>AIBS_RIG_ID</code> on computer</li> <li><code>unknown</code> if not available (for Templeton sessions)</li> </ul>"},{"location":"reference/npc_lims/status/tracked_sessions/#npc_lims.status.tracked_sessions.SessionInfo.task_version","title":"task_version  <code>property</code>","text":"<pre><code>task_version: str\n</code></pre> <p>From DR training spreadsheet (<code>stage 5 ori AMN moving timeouts repeats</code>). - <code>unknown</code> if not available (for Templeton sessions)</p>"},{"location":"reference/npc_lims/status/tracked_sessions/#npc_lims.status.tracked_sessions.SessionInfo.training_info","title":"training_info  <code>cached</code> <code>property</code>","text":"<pre><code>training_info: dict[str, Any]\n</code></pre> <p>Session metadata from Sam's DR training database. - empty dict for Templeton sessions</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; next(get_session_info()).session_info                       # doctest: +SKIP\n{'ID': 1, 'start_time': '2023-03-07 12:56:27', 'rig_name': 'B2', 'task_version': 'stage 0 moving', 'hits': '0', 'dprime_same_modality': '', 'dprime_other_modality_go_stim': '', 'pass': '1', 'ignore': '0'}\n&gt;&gt;&gt; assert next(session.training_info for session in get_session_info() if session.training_info)\n</code></pre>"},{"location":"reference/npc_lims/status/tracked_sessions/#npc_lims.status.tracked_sessions.get_session_info","title":"get_session_info","text":"<pre><code>get_session_info(session: str | npc_session.SessionRecord | SessionInfo | None = None, **bool_filter_kwargs: bool) -&gt; tuple[SessionInfo, ...] | SessionInfo\n</code></pre> <p>Quickly get a sequence of all tracked sessions.</p> <p>Examples:</p> <pre><code>Each object in the sequence has info about one session:\n&gt;&gt;&gt; sessions = get_session_info()\n&gt;&gt;&gt; sessions[0].__class__.__name__\n'SessionInfo'\n&gt;&gt;&gt; sessions[0].is_ephys                    # doctest: +SKIP\nTrue\n&gt;&gt;&gt; any(s for s in sessions if s.date.year &lt; 2021)\nFalse\n\nPass a session str or SessionRecord to get the info for that session:\n&gt;&gt;&gt; info = get_session_info(\"DRpilot_667252_20230927\")\n&gt;&gt;&gt; assert isinstance(info, SessionInfo)\n</code></pre> Source code in <code>npc_lims/status/tracked_sessions.py</code> <pre><code>def get_session_info(\n    session: str | npc_session.SessionRecord | SessionInfo | None = None,\n    **bool_filter_kwargs: bool,\n) -&gt; tuple[SessionInfo, ...] | SessionInfo:\n    \"\"\"Quickly get a sequence of all tracked sessions.\n\n    Examples:\n\n        Each object in the sequence has info about one session:\n        &gt;&gt;&gt; sessions = get_session_info()\n        &gt;&gt;&gt; sessions[0].__class__.__name__\n        'SessionInfo'\n        &gt;&gt;&gt; sessions[0].is_ephys                    # doctest: +SKIP\n        True\n        &gt;&gt;&gt; any(s for s in sessions if s.date.year &lt; 2021)\n        False\n\n        Pass a session str or SessionRecord to get the info for that session:\n        &gt;&gt;&gt; info = get_session_info(\"DRpilot_667252_20230927\")\n        &gt;&gt;&gt; assert isinstance(info, SessionInfo)\n    \"\"\"\n    if isinstance(session, SessionInfo):\n        session = session.id\n    tracked_sessions = set(\n        _get_session_info_from_file(),\n    )\n    tracked_sessions.update(_get_session_info_from_data_repo())\n    if session is None:\n        filtered_sessions = (\n            s\n            for s in tracked_sessions\n            if all(getattr(s, k) == v for k, v in bool_filter_kwargs.items())\n        )\n        return tuple(sorted(filtered_sessions, key=lambda s: s.id.date, reverse=True))\n    with contextlib.suppress(StopIteration):\n        return next(\n            s\n            for s in tracked_sessions\n            if s.id == (record := npc_session.SessionRecord(session))\n        )\n    raise exceptions.NoSessionInfo(f\"{record} not found in tracked sessions\")\n</code></pre>"},{"location":"reference/npc_lims/status/tracked_sessions/#npc_lims.status.tracked_sessions.get_session_issues","title":"get_session_issues","text":"<pre><code>get_session_issues(session: str | npc_session.SessionRecord | None = None) -&gt; list[str] | list | dict[npc_session.SessionRecord, list[str]]\n</code></pre> <p>Get a dictionary of all sessions with issues mapped to their issue url.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; issues = get_session_issues()\n&gt;&gt;&gt; issues                                                              # doctest: +SKIP\n{\n    '644867_2023-02-21': ['https://github.com/AllenInstitute/npc_sessions/issues/28'],\n    '660023_2023-08-08': ['https://github.com/AllenInstitute/npc_sessions/issues/26'],\n}\n\n&gt;&gt;&gt; single_session_issues = get_session_issues(\"DRPilot_644867_20230221\")\n&gt;&gt;&gt; assert isinstance(single_session_issues, typing.Sequence)\n&gt;&gt;&gt; single_session_issues                                               # doctest: +SKIP\n['https://github.com/AllenInstitute/npc_sessions/issues/28']\n</code></pre> Source code in <code>npc_lims/status/tracked_sessions.py</code> <pre><code>def get_session_issues(\n    session: str | npc_session.SessionRecord | None = None,\n) -&gt; list[str] | list | dict[npc_session.SessionRecord, list[str]]:\n    \"\"\"Get a dictionary of all sessions with issues mapped to their issue url.\n\n    Examples:\n\n        &gt;&gt;&gt; issues = get_session_issues()\n        &gt;&gt;&gt; issues                                                              # doctest: +SKIP\n        {\n            '644867_2023-02-21': ['https://github.com/AllenInstitute/npc_sessions/issues/28'],\n            '660023_2023-08-08': ['https://github.com/AllenInstitute/npc_sessions/issues/26'],\n        }\n\n        &gt;&gt;&gt; single_session_issues = get_session_issues(\"DRPilot_644867_20230221\")\n        &gt;&gt;&gt; assert isinstance(single_session_issues, typing.Sequence)\n        &gt;&gt;&gt; single_session_issues                                               # doctest: +SKIP\n        ['https://github.com/AllenInstitute/npc_sessions/issues/28']\n    \"\"\"\n    if session:\n        try:\n            return get_session_info(session).issues\n        except exceptions.NoSessionInfo:\n            return []\n    return {\n        session.id: session.issues for session in get_session_info() if session.issues\n    }\n</code></pre>"},{"location":"reference/npc_lims/status/tracked_sessions/#npc_lims.status.tracked_sessions.get_session_kwargs","title":"get_session_kwargs","text":"<pre><code>get_session_kwargs(session: str | npc_session.SessionRecord | None = None) -&gt; dict[str, str] | dict | dict[npc_session.SessionRecord, dict[str, str]]\n</code></pre> <p>Get a dictionary of all sessions mapped to their config kwargs. kwargs will be an empty dict if no kwargs have been specified.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; kwargs = get_session_kwargs()\n&gt;&gt;&gt; kwargs                                                          # doctest: +SKIP\n{   '670248_2023-08-02': {\n        'is_task': False,\n    },\n    '667252_2023-09-25': {\n        'invalid_times': [\n            {'start_time': 4996, 'stop_time': -1, 'reason': 'auditory stimulus not presented (amplifier power issue)'}\n        ]\n    },\n}\n&gt;&gt;&gt; single_session_kwargs = get_session_kwargs(\"DRpilot_670248_20230802\")\n&gt;&gt;&gt; assert isinstance(single_session_kwargs, dict)\n&gt;&gt;&gt; single_session_kwargs                                           # doctest: +SKIP\n{'is_task': False}\n</code></pre> Source code in <code>npc_lims/status/tracked_sessions.py</code> <pre><code>def get_session_kwargs(\n    session: str | npc_session.SessionRecord | None = None,\n) -&gt; dict[str, str] | dict | dict[npc_session.SessionRecord, dict[str, str]]:\n    \"\"\"Get a dictionary of all sessions mapped to their config kwargs. kwargs will\n    be an empty dict if no kwargs have been specified.\n\n    Examples:\n\n        &gt;&gt;&gt; kwargs = get_session_kwargs()\n        &gt;&gt;&gt; kwargs                                                          # doctest: +SKIP\n        {   '670248_2023-08-02': {\n                'is_task': False,\n            },\n            '667252_2023-09-25': {\n                'invalid_times': [\n                    {'start_time': 4996, 'stop_time': -1, 'reason': 'auditory stimulus not presented (amplifier power issue)'}\n                ]\n            },\n        }\n        &gt;&gt;&gt; single_session_kwargs = get_session_kwargs(\"DRpilot_670248_20230802\")\n        &gt;&gt;&gt; assert isinstance(single_session_kwargs, dict)\n        &gt;&gt;&gt; single_session_kwargs                                           # doctest: +SKIP\n        {'is_task': False}\n    \"\"\"\n    if session:\n        try:\n            return get_session_info(session).session_kwargs\n        except exceptions.NoSessionInfo:\n            return {}\n    return {session.id: session.session_kwargs for session in get_session_info()}\n</code></pre>"},{"location":"coverage/","title":"Coverage","text":""}]}